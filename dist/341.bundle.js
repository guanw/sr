"use strict";(self.webpackChunksr=self.webpackChunksr||[]).push([[341],{3391:(e,t,r)=>{r.d(t,{R:()=>n,m:()=>s});const n={name:"texture-bit",vertex:{header:"\n\n        struct TextureUniforms {\n            uTextureMatrix:mat3x3<f32>,\n        }\n\n        @group(2) @binding(2) var<uniform> textureUniforms : TextureUniforms;\n        ",main:"\n            uv = (textureUniforms.uTextureMatrix * vec3(uv, 1.0)).xy;\n        "},fragment:{header:"\n            @group(2) @binding(0) var uTexture: texture_2d<f32>;\n            @group(2) @binding(1) var uSampler: sampler;\n\n         \n        ",main:"\n            outColor = textureSample(uTexture, uSampler, vUV);\n        "}},s={name:"texture-bit",vertex:{header:"\n            uniform mat3 uTextureMatrix;\n        ",main:"\n            uv = (uTextureMatrix * vec3(uv, 1.0)).xy;\n        "},fragment:{header:"\n        uniform sampler2D uTexture;\n\n         \n        ",main:"\n            outColor = texture(uTexture, vUV);\n        "}}},7084:(e,t,r)=>{r.d(t,{q:()=>i});var n=r(268),s=r(8306);function i(e,t){for(const r in e.attributes){const s=e.attributes[r],i=t[r];i?(s.location??(s.location=i.location),s.format??(s.format=i.format),s.offset??(s.offset=i.offset),s.instance??(s.instance=i.instance)):(0,n.R)(`Attribute ${r} is not present in the shader, but is present in the geometry. Unable to infer attribute details.`)}!function(e){const{buffers:t,attributes:r}=e,n={},i={};for(const e in t){const r=t[e];n[r.uid]=0,i[r.uid]=0}for(const e in r){const t=r[e];n[t.buffer.uid]+=(0,s.m)(t.format).stride}for(const e in r){const t=r[e];t.stride??(t.stride=n[t.buffer.uid]),t.start??(t.start=i[t.buffer.uid]),i[t.buffer.uid]+=(0,s.m)(t.format).stride}}(e)}},1172:(e,t,r)=>{r.d(t,{g:()=>s});var n=r(1957);const s=[];s[n.K.NONE]=void 0,s[n.K.DISABLED]={stencilWriteMask:0,stencilReadMask:0},s[n.K.RENDERING_MASK_ADD]={stencilFront:{compare:"equal",passOp:"increment-clamp"},stencilBack:{compare:"equal",passOp:"increment-clamp"}},s[n.K.RENDERING_MASK_REMOVE]={stencilFront:{compare:"equal",passOp:"decrement-clamp"},stencilBack:{compare:"equal",passOp:"decrement-clamp"}},s[n.K.MASK_ACTIVE]={stencilWriteMask:0,stencilFront:{compare:"equal",passOp:"keep"},stencilBack:{compare:"equal",passOp:"keep"}}},581:(e,t,r)=>{r.d(t,{d:()=>i});var n=r(4486),s=r(133);class i extends n.A{constructor({buffer:e,offset:t,size:r}){super(),this.uid=(0,s.L)("buffer"),this._resourceType="bufferResource",this._touched=0,this._resourceId=(0,s.L)("resource"),this._bufferResource=!0,this.destroyed=!1,this.buffer=e,this.offset=0|t,this.size=r,this.buffer.on("change",this.onBufferChange,this)}onBufferChange(){this._resourceId=(0,s.L)("resource"),this.emit("change",this)}destroy(e=!1){this.destroyed=!0,e&&this.buffer.destroy(),this.emit("change",this),this.buffer=null}}},279:(e,t,r)=>{r.d(t,{O:()=>a});var n=r(133),s=r(6932),i=r(4492);const o=class e{constructor(t={}){if(this.uid=(0,n.L)("renderTarget"),this.colorTextures=[],this.dirtyId=0,this.isRoot=!1,this._size=new Float32Array(2),this._managedColorTextures=!1,t={...e.defaultOptions,...t},this.stencil=t.stencil,this.depth=t.depth,this.isRoot=t.isRoot,"number"==typeof t.colorTextures){this._managedColorTextures=!0;for(let e=0;e<t.colorTextures;e++)this.colorTextures.push(new s.v({width:t.width,height:t.height,resolution:t.resolution,antialias:t.antialias}))}else{this.colorTextures=[...t.colorTextures.map((e=>e.source))];const e=this.colorTexture.source;this.resize(e.width,e.height,e._resolution)}this.colorTexture.source.on("resize",this.onSourceResize,this),(t.depthStencilTexture||this.stencil)&&(t.depthStencilTexture instanceof i.g||t.depthStencilTexture instanceof s.v?this.depthStencilTexture=t.depthStencilTexture.source:this.ensureDepthStencilTexture())}get size(){const e=this._size;return e[0]=this.pixelWidth,e[1]=this.pixelHeight,e}get width(){return this.colorTexture.source.width}get height(){return this.colorTexture.source.height}get pixelWidth(){return this.colorTexture.source.pixelWidth}get pixelHeight(){return this.colorTexture.source.pixelHeight}get resolution(){return this.colorTexture.source._resolution}get colorTexture(){return this.colorTextures[0]}onSourceResize(e){this.resize(e.width,e.height,e._resolution,!0)}ensureDepthStencilTexture(){this.depthStencilTexture||(this.depthStencilTexture=new s.v({width:this.width,height:this.height,resolution:this.resolution,format:"depth24plus-stencil8",autoGenerateMipmaps:!1,antialias:!1,mipLevelCount:1}))}resize(e,t,r=this.resolution,n=!1){this.dirtyId++,this.colorTextures.forEach(((s,i)=>{n&&0===i||s.source.resize(e,t,r)})),this.depthStencilTexture&&this.depthStencilTexture.source.resize(e,t,r)}destroy(){this.colorTexture.source.off("resize",this.onSourceResize,this),this._managedColorTextures&&this.colorTextures.forEach((e=>{e.destroy()})),this.depthStencilTexture&&(this.depthStencilTexture.destroy(),delete this.depthStencilTexture)}};o.defaultOptions={width:0,height:0,resolution:1,colorTextures:1,stencil:!1,depth:!1,antialias:!1,isRoot:!1};let a=o},7238:(e,t,r)=>{r.d(t,{l:()=>h});var n=r(9313),s=r(9252),i=r(1257),o=r(7729),a=r(4884),u=r(6932),d=r(4492),l=r(8725),c=r(279);class h{constructor(e){this.rootViewPort=new s.M,this.viewport=new s.M,this.onRenderTargetChange=new o.C("onRenderTargetChange"),this.projectionMatrix=new n.u,this.defaultClearColor=[0,0,0,0],this._renderSurfaceToRenderTargetHash=new Map,this._gpuRenderTargetHash=Object.create(null),this._renderTargetStack=[],this._renderer=e}finishRenderPass(){this.adaptor.finishRenderPass(this.renderTarget)}renderStart({target:e,clear:t,clearColor:r,frame:n}){this._renderTargetStack.length=0,this.push(e,t,r,n),this.rootViewPort.copyFrom(this.viewport),this.rootRenderTarget=this.renderTarget,this.renderingToScreen=function(e){const t=e.colorTexture.source.resource;return globalThis.HTMLCanvasElement&&t instanceof HTMLCanvasElement&&document.body.contains(t)}(this.rootRenderTarget)}bind(e,t=!0,r,n){const s=this.getRenderTarget(e),i=this.renderTarget!==s;this.renderTarget=s,this.renderSurface=e;const o=this.getGpuRenderTarget(s);s.pixelWidth===o.width&&s.pixelHeight===o.height||(this.adaptor.resizeGpuRenderTarget(s),o.width=s.pixelWidth,o.height=s.pixelHeight);const a=s.colorTexture,u=this.viewport,l=a.pixelWidth,c=a.pixelHeight;if(!n&&e instanceof d.g&&(n=e.frame),n){const e=a._resolution;u.x=n.x*e+.5|0,u.y=n.y*e+.5|0,u.width=n.width*e+.5|0,u.height=n.height*e+.5|0}else u.x=0,u.y=0,u.width=l,u.height=c;return function(e,t,r,n,s,i){const o=i?1:-1;e.identity(),e.a=1/n*2,e.d=o*(1/s*2),e.tx=-1-0*e.a,e.ty=-o-0*e.d}(this.projectionMatrix,0,0,u.width/a.resolution,u.height/a.resolution,!s.isRoot),this.adaptor.startRenderPass(s,t,r,u),i&&this.onRenderTargetChange.emit(s),s}clear(e,t=i.u.ALL,r){t&&(e&&(e=this.getRenderTarget(e)),this.adaptor.clear(e||this.renderTarget,t,r,this.viewport))}contextChange(){this._gpuRenderTargetHash=Object.create(null)}push(e,t=i.u.ALL,r,n){const s=this.bind(e,t,r,n);return this._renderTargetStack.push({renderTarget:s,frame:n}),s}pop(){this._renderTargetStack.pop();const e=this._renderTargetStack[this._renderTargetStack.length-1];this.bind(e.renderTarget,!1,null,e.frame)}getRenderTarget(e){return e.isTexture&&(e=e.source),this._renderSurfaceToRenderTargetHash.get(e)??this._initRenderTarget(e)}copyToTexture(e,t,r,n,s){r.x<0&&(n.width+=r.x,s.x-=r.x,r.x=0),r.y<0&&(n.height+=r.y,s.y-=r.y,r.y=0);const{pixelWidth:i,pixelHeight:o}=e;return n.width=Math.min(n.width,i-r.x),n.height=Math.min(n.height,o-r.y),this.adaptor.copyToTexture(e,t,r,n,s)}ensureDepthStencil(){this.renderTarget.stencil||(this.renderTarget.stencil=!0,this.adaptor.startRenderPass(this.renderTarget,!1,null,this.viewport))}destroy(){this._renderer=null,this._renderSurfaceToRenderTargetHash.forEach(((e,t)=>{e!==t&&e.destroy()})),this._renderSurfaceToRenderTargetHash.clear(),this._gpuRenderTargetHash=Object.create(null)}_initRenderTarget(e){let t=null;return a.q.test(e)&&(e=(0,l.c)(e).source),e instanceof c.O?t=e:e instanceof u.v&&(t=new c.O({colorTextures:[e]}),a.q.test(e.source.resource)&&(t.isRoot=!0),e.once("destroy",(()=>{t.destroy();const e=this._gpuRenderTargetHash[t.uid];e&&(this._gpuRenderTargetHash[t.uid]=null,this.adaptor.destroyGpuRenderTarget(e))}))),this._renderSurfaceToRenderTargetHash.set(e,t),t}getGpuRenderTarget(e){return this._gpuRenderTargetHash[e.uid]||(this._gpuRenderTargetHash[e.uid]=this.adaptor.initGpuRenderTarget(e))}}},7047:(e,t,r)=>{r.d(t,{W:()=>o});var n=r(4577),s=r(949),i=r(1132);class o{constructor(e){this._syncFunctionHash=Object.create(null),this._adaptor=e,this._systemCheck()}_systemCheck(){if(!(0,n.f)())throw new Error("Current environment does not allow unsafe-eval, please use pixi.js/unsafe-eval module to enable support.")}ensureUniformGroup(e){const t=this.getUniformGroupData(e);e.buffer||(e.buffer=new s.h({data:new Float32Array(t.layout.size/4),usage:i.S.UNIFORM|i.S.COPY_DST}))}getUniformGroupData(e){return this._syncFunctionHash[e._signature]||this._initUniformGroup(e)}_initUniformGroup(e){const t=e._signature;let r=this._syncFunctionHash[t];if(!r){const n=Object.keys(e.uniformStructures).map((t=>e.uniformStructures[t])),s=this._adaptor.createUboElements(n),i=this._generateUboSync(s.uboElements);r=this._syncFunctionHash[t]={layout:s,syncFunction:i}}return this._syncFunctionHash[t]}_generateUboSync(e){return this._adaptor.generateUboSync(e)}syncUniformGroup(e,t,r){const n=this.getUniformGroupData(e);return e.buffer||(e.buffer=new s.h({data:new Float32Array(n.layout.size/4),usage:i.S.UNIFORM|i.S.COPY_DST})),t||(t=e.buffer.data),r||(r=0),n.syncFunction(e.uniforms,t,r),!0}updateUniformGroup(e){if(e.isStatic&&!e._dirtyId)return!1;e._dirtyId=0;const t=this.syncUniformGroup(e);return e.buffer.update(),t}destroy(){this._syncFunctionHash=null}}},6423:(e,t,r)=>{r.d(t,{E:()=>s});var n=r(8166);function s(e,t,r,s){const i=["\n        var v = null;\n        var v2 = null;\n        var t = 0;\n        var index = 0;\n        var name = null;\n        var arrayOffset = null;\n    "];let o=0;for(let a=0;a<e.length;a++){const u=e[a],d=u.data.name;let l=!1,c=0;for(let e=0;e<n.$.length;e++)if(n.$[e].test(u.data)){c=u.offset/4,i.push(`name = "${d}";`,`offset += ${c-o};`,n.$[e][t]||n.$[e].ubo),l=!0;break}if(!l)if(u.data.size>1)c=u.offset/4,i.push(r(u,c-o));else{const e=s[u.data.type];c=u.offset/4,i.push(`\n                    v = uv.${d};\n                    offset += ${c-o};\n                    ${e};\n                `)}o=c}const a=i.join("\n");return new Function("uv","data","offset",a)}},1266:(e,t,r)=>{function n(e,t){return`\n        for (let i = 0; i < ${e*t}; i++) {\n            data[offset + (((i / ${e})|0) * 4) + (i % ${e})] = v[i];\n        }\n    `}r.d(t,{_:()=>i,g:()=>s});const s={f32:"\n        data[offset] = v;",i32:"\n        data[offset] = v;","vec2<f32>":"\n        data[offset] = v[0];\n        data[offset + 1] = v[1];","vec3<f32>":"\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];","vec4<f32>":"\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];","mat2x2<f32>":"\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 4] = v[2];\n        data[offset + 5] = v[3];","mat3x3<f32>":"\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 4] = v[3];\n        data[offset + 5] = v[4];\n        data[offset + 6] = v[5];\n        data[offset + 8] = v[6];\n        data[offset + 9] = v[7];\n        data[offset + 10] = v[8];","mat4x4<f32>":"\n        for (let i = 0; i < 16; i++) {\n            data[offset + i] = v[i];\n        }","mat3x2<f32>":n(3,2),"mat4x2<f32>":n(4,2),"mat2x3<f32>":n(2,3),"mat4x3<f32>":n(4,3),"mat2x4<f32>":n(2,4),"mat3x4<f32>":n(3,4)},i={...s,"mat2x2<f32>":"\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];\n    "}},8166:(e,t,r)=>{r.d(t,{$:()=>n});const n=[{type:"mat3x3<f32>",test:e=>void 0!==e.value.a,ubo:"\n            var matrix = uv[name].toArray(true);\n            data[offset] = matrix[0];\n            data[offset + 1] = matrix[1];\n            data[offset + 2] = matrix[2];\n            data[offset + 4] = matrix[3];\n            data[offset + 5] = matrix[4];\n            data[offset + 6] = matrix[5];\n            data[offset + 8] = matrix[6];\n            data[offset + 9] = matrix[7];\n            data[offset + 10] = matrix[8];\n        ",uniform:"\n            gl.uniformMatrix3fv(ud[name].location, false, uv[name].toArray(true));\n        "},{type:"vec4<f32>",test:e=>"vec4<f32>"===e.type&&1===e.size&&void 0!==e.value.width,ubo:"\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n            data[offset + 2] = v.width;\n            data[offset + 3] = v.height;\n        ",uniform:"\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                cv[2] = v.width;\n                cv[3] = v.height;\n                gl.uniform4f(ud[name].location, v.x, v.y, v.width, v.height);\n            }\n        "},{type:"vec2<f32>",test:e=>"vec2<f32>"===e.type&&1===e.size&&void 0!==e.value.x,ubo:"\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n        ",uniform:"\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                gl.uniform2f(ud[name].location, v.x, v.y);\n            }\n        "},{type:"vec4<f32>",test:e=>"vec4<f32>"===e.type&&1===e.size&&void 0!==e.value.red,ubo:"\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n            data[offset + 3] = v.alpha;\n        ",uniform:"\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue || cv[3] !== v.alpha) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                cv[3] = v.alpha;\n                gl.uniform4f(ud[name].location, v.red, v.green, v.blue, v.alpha);\n            }\n        "},{type:"vec3<f32>",test:e=>"vec3<f32>"===e.type&&1===e.size&&void 0!==e.value.red,ubo:"\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n        ",uniform:"\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                gl.uniform3f(ud[name].location, v.red, v.green, v.blue);\n            }\n        "}]},1293:(e,t,r)=>{r.d(t,{f:()=>Ue,i:()=>Re});var n=r(8507);class s{constructor(e){this._renderer=e}addRenderable(e,t){this._renderer.renderPipes.batch.break(t),t.add(e)}execute(e){e.isRenderable&&e.render(this._renderer)}destroy(){this._renderer=null}}function i(e,t){const r=e.instructionSet,n=r.instructions;for(let e=0;e<r.instructionSize;e++){const r=n[e];t[r.renderPipeId].execute(r)}}s.extension={type:[n.Ag.WebGLPipes,n.Ag.WebGPUPipes,n.Ag.CanvasPipes],name:"customRender"};class o{constructor(e){this._renderer=e}addRenderGroup(e,t){this._renderer.renderPipes.batch.break(t),t.add(e)}execute(e){e.isRenderable&&(this._renderer.globalUniforms.push({worldTransformMatrix:e.worldTransform,worldColor:e.worldColorAlpha}),i(e,this._renderer.renderPipes),this._renderer.globalUniforms.pop())}destroy(){this._renderer=null}}o.extension={type:[n.Ag.WebGLPipes,n.Ag.WebGPUPipes,n.Ag.CanvasPipes],name:"renderGroup"};var a=r(9313);function u(e,t){const r=e.root,n=e.instructionSet;n.reset(),t.batch.buildStart(n),t.blendMode.buildStart(),t.colorMask.buildStart(),r.sortableChildren&&r.sortChildren(),l(r,n,t,!0),t.batch.buildEnd(n),t.blendMode.buildEnd(n)}function d(e,t,r){e.globalDisplayStatus<7||!e.includeInBuild||(e.sortableChildren&&e.sortChildren(),e.isSimple?function(e,t,r){if(e.renderPipeId&&(r.blendMode.setBlendMode(e,e.groupBlendMode,t),e.didViewUpdate=!1,r[e.renderPipeId].addRenderable(e,t)),!e.renderGroup){const n=e.children,s=n.length;for(let e=0;e<s;e++)d(n[e],t,r)}}(e,t,r):l(e,t,r,!1))}function l(e,t,r,n){if(!n&&e.renderGroup)r.renderGroup.addRenderGroup(e.renderGroup,t);else{for(let n=0;n<e.effects.length;n++){const s=e.effects[n];r[s.pipe].push(s,e,t)}const n=e.renderPipeId;n&&(r.blendMode.setBlendMode(e,e.groupBlendMode,t),e.didViewUpdate=!1,r[n].addRenderable(e,t));const s=e.children;if(s.length)for(let e=0;e<s.length;e++)d(s[e],t,r);for(let n=e.effects.length-1;n>=0;n--){const s=e.effects[n];r[s.pipe].pop(s,e,t)}}}function c(e,t=[]){t.push(e);for(let r=0;r<e.renderGroupChildren.length;r++)c(e.renderGroupChildren[r],t);return t}var h=r(4263);const p=16777215;function f(e,t){return e===p||t===p?e+t-p:function(e,t,r){const n=e>>16&255,s=e>>8&255,i=255&e;return(n+.5*((t>>16&255)-n)<<16)+(s+.5*((t>>8&255)-s)<<8)+(i+.5*((255&t)-i))}(e,t)}const g=new h.mc;function m(e,t=!1){!function(e){const t=e.root;let r;if(e.renderGroupParent){const n=e.renderGroupParent;e.worldTransform.appendFrom(t.relativeGroupTransform,n.worldTransform),e.worldColor=f(t.groupColor,n.worldColor),r=t.groupAlpha*n.worldAlpha}else e.worldTransform.copyFrom(t.localTransform),e.worldColor=t.localColor,r=t.localAlpha;r=r<0?0:r>1?1:r,e.worldAlpha=r,e.worldColorAlpha=e.worldColor+(255*r<<24)}(e);const r=e.childrenToUpdate,n=e.updateTick++;for(const t in r){const s=Number(t),i=r[t],o=i.list,a=i.index;for(let t=0;t<a;t++){const r=o[t];r.parentRenderGroup===e&&r.relativeRenderGroupDepth===s&&v(r,n,0)}i.index=0}if(t)for(let r=0;r<e.renderGroupChildren.length;r++)m(e.renderGroupChildren[r],t)}function v(e,t,r){if(t===e.updateTick)return;e.updateTick=t,e.didChange=!1;const n=e.localTransform;e.updateLocalTransform();const s=e.parent;if(s&&!s.renderGroup?(r|=e._updateFlags,e.relativeGroupTransform.appendFrom(n,s.relativeGroupTransform),r&&x(e,s,r)):(r=e._updateFlags,e.relativeGroupTransform.copyFrom(n),r&&x(e,g,r)),!e.renderGroup){const n=e.children,s=n.length;for(let e=0;e<s;e++)v(n[e],t,r);const i=e.parentRenderGroup;e.renderPipeId&&!i.structureDidChange&&i.updateRenderable(e)}}function x(e,t,r){if(r&h.ig){e.groupColor=f(e.localColor,t.groupColor);let r=e.localAlpha*t.groupAlpha;r=r<0?0:r>1?1:r,e.groupAlpha=r,e.groupColorAlpha=e.groupColor+(255*r<<24)}r&h.u&&(e.groupBlendMode="inherit"===e.localBlendMode?t.groupBlendMode:e.localBlendMode),r&h.fR&&(e.globalDisplayStatus=e.localDisplayStatus&t.globalDisplayStatus),e._updateFlags=0}function _(e,t){const{list:r,index:n}=e.childrenRenderablesToUpdate;let s=!1;for(let e=0;e<n;e++){const n=r[e];if(s=t[n.renderPipeId].validateRenderable(n),s)break}return e.structureDidChange=s,s}const b=new a.u;class k{constructor(e){this._renderer=e}render({container:e,transform:t}){e.isRenderGroup=!0;const r=e.parent,n=e.renderGroup.renderGroupParent;e.parent=null,e.renderGroup.renderGroupParent=null;const s=this._renderer,o=c(e.renderGroup,[]);let a=b;t&&(a=a.copyFrom(e.renderGroup.localTransform),e.renderGroup.localTransform.copyFrom(t));const d=s.renderPipes;for(let e=0;e<o.length;e++){const t=o[e];t.runOnRender(),t.instructionSet.renderPipes=d,t.structureDidChange||_(t,d),m(t),t.structureDidChange?(t.structureDidChange=!1,u(t,d)):y(t),t.childrenRenderablesToUpdate.index=0,s.renderPipes.batch.upload(t.instructionSet)}s.globalUniforms.start({worldTransformMatrix:t?e.renderGroup.localTransform:e.renderGroup.worldTransform,worldColor:e.renderGroup.worldColorAlpha}),i(e.renderGroup,d),d.uniformBatch&&d.uniformBatch.renderEnd(),t&&e.renderGroup.localTransform.copyFrom(a),e.parent=r,e.renderGroup.renderGroupParent=n}destroy(){this._renderer=null}}function y(e){const{list:t,index:r}=e.childrenRenderablesToUpdate;for(let n=0;n<r;n++){const r=t[n];r.didViewUpdate&&e.updateRenderable(r)}}k.extension={type:[n.Ag.WebGLSystem,n.Ag.WebGPUSystem,n.Ag.CanvasSystem],name:"renderGroup"};var T=r(8218),M=r(8422);class S{constructor(e){this._gpuSpriteHash=Object.create(null),this._renderer=e}addRenderable(e,t){const r=this._getGpuSprite(e);e._didSpriteUpdate&&this._updateBatchableSprite(e,r),this._renderer.renderPipes.batch.addToBatch(r)}updateRenderable(e){const t=this._gpuSpriteHash[e.uid];e._didSpriteUpdate&&this._updateBatchableSprite(e,t),t.batcher.updateElement(t)}validateRenderable(e){const t=e._texture,r=this._getGpuSprite(e);return r.texture._source!==t._source&&!r.batcher.checkAndUpdateTexture(r,t)}destroyRenderable(e){const t=this._gpuSpriteHash[e.uid];T.Z.return(t),this._gpuSpriteHash[e.uid]=null}_updateBatchableSprite(e,t){e._didSpriteUpdate=!1,t.bounds=e.bounds,t.texture=e._texture}_getGpuSprite(e){return this._gpuSpriteHash[e.uid]||this._initGPUSprite(e)}_initGPUSprite(e){const t=T.Z.get(M.K);return t.renderable=e,t.texture=e._texture,t.bounds=e.bounds,t.roundPixels=this._renderer._roundPixels|e._roundPixels,this._gpuSpriteHash[e.uid]=t,e._didSpriteUpdate=!1,e.on("destroyed",(()=>{this.destroyRenderable(e)})),t}destroy(){for(const e in this._gpuSpriteHash)T.Z.return(this._gpuSpriteHash[e]);this._gpuSpriteHash=null,this._renderer=null}}S.extension={type:[n.Ag.WebGLPipes,n.Ag.WebGPUPipes,n.Ag.CanvasPipes],name:"sprite"};var w=r(7073),C=r(7547),P=r(8634),G=r(5130);class A{constructor(e,t){this.state=C.U.for2d(),this._batches=Object.create(null),this._geometries=Object.create(null),this.renderer=e,this._adaptor=t,this._adaptor.init(this)}buildStart(e){if(!this._batches[e.uid]){const t=new G.i;this._batches[e.uid]=t,this._geometries[t.uid]=new P.J}this._activeBatch=this._batches[e.uid],this._activeGeometry=this._geometries[this._activeBatch.uid],this._activeBatch.begin()}addToBatch(e){this._activeBatch.add(e)}break(e){this._activeBatch.break(e)}buildEnd(e){const t=this._activeBatch,r=this._activeGeometry;t.finish(e),r.indexBuffer.setDataWithSize(t.indexBuffer,t.indexSize,!0),r.buffers[0].setDataWithSize(t.attributeBuffer.float32View,t.attributeSize,!1)}upload(e){const t=this._batches[e.uid],r=this._geometries[t.uid];t.dirty&&(t.dirty=!1,r.buffers[0].update(4*t.attributeSize))}execute(e){if("startBatch"===e.action){const t=e.batcher,r=this._geometries[t.uid];this._adaptor.start(this,r)}this._adaptor.execute(this,e)}destroy(){this.state=null,this.renderer=null,this._adaptor.destroy(),this._adaptor=null;for(const e in this._batches)this._batches[e].destroy();this._batches=null;for(const e in this._geometries)this._geometries[e].destroy();this._geometries=null}}A.extension={type:[n.Ag.WebGLPipes,n.Ag.WebGPUPipes,n.Ag.CanvasPipes],name:"batch"};var R=r(9049),U=r(9113),B=r(3012),F=r(5811),O=r(1196),I=r(8475);const z=class e extends I.M{constructor(t){super(t={...e.defaultOptions,...t}),this.enabled=!0,this._state=C.U.for2d(),this.padding=t.padding,"boolean"==typeof t.antialias?this.antialias=t.antialias?"on":"off":this.antialias=t.antialias,this.resolution=t.resolution,this.blendRequired=t.blendRequired,this.addResource("uTexture",0,1)}apply(e,t,r,n){e.applyFilter(this,t,r,n)}get blendMode(){return this._state.blendMode}set blendMode(e){this._state.blendMode=e}static from(t){const{gpu:r,gl:n,...s}=t;let i,o;return r&&(i=B.B.from(r)),n&&(o=U.M.from(n)),new e({gpuProgram:i,glProgram:o,...s})}};z.defaultOptions={blendMode:"normal",resolution:1,padding:0,antialias:"off",blendRequired:!1};let D=z;var E="struct GlobalFilterUniforms {\n  uInputSize:vec4<f32>,\n  uInputPixel:vec4<f32>,\n  uInputClamp:vec4<f32>,\n  uOutputFrame:vec4<f32>,\n  uGlobalFrame:vec4<f32>,\n  uOutputTexture:vec4<f32>,  \n};\n\nstruct MaskUniforms {\n  uFilterMatrix:mat3x3<f32>,\n  uMaskClamp:vec4<f32>,\n  uAlpha:f32,\n};\n\n\n@group(0) @binding(0) var<uniform> gfu: GlobalFilterUniforms;\n@group(0) @binding(1) var uTexture: texture_2d<f32>;\n@group(0) @binding(2) var uSampler : sampler;\n\n@group(1) @binding(0) var<uniform> filterUniforms : MaskUniforms;\n@group(1) @binding(1) var uMaskTexture: texture_2d<f32>;\n\nstruct VSOutput {\n    @builtin(position) position: vec4<f32>,\n    @location(0) uv : vec2<f32>,\n    @location(1) filterUv : vec2<f32>,\n  };\n\nfn filterVertexPosition(aPosition:vec2<f32>) -> vec4<f32>\n{\n    var position = aPosition * gfu.uOutputFrame.zw + gfu.uOutputFrame.xy;\n\n    position.x = position.x * (2.0 / gfu.uOutputTexture.x) - 1.0;\n    position.y = position.y * (2.0*gfu.uOutputTexture.z / gfu.uOutputTexture.y) - gfu.uOutputTexture.z;\n\n    return vec4(position, 0.0, 1.0);\n}\n\nfn filterTextureCoord( aPosition:vec2<f32> ) -> vec2<f32>\n{\n    return aPosition * (gfu.uOutputFrame.zw * gfu.uInputSize.zw);\n}\n\nfn globalTextureCoord( aPosition:vec2<f32> ) -> vec2<f32>\n{\n  return  (aPosition.xy / gfu.uGlobalFrame.zw) + (gfu.uGlobalFrame.xy / gfu.uGlobalFrame.zw);  \n}\n\nfn getFilterCoord(aPosition:vec2<f32> ) -> vec2<f32>\n{\n  return ( filterUniforms.uFilterMatrix * vec3( filterTextureCoord(aPosition), 1.0)  ).xy;\n}\n\nfn getSize() -> vec2<f32>\n{\n\n  \n  return gfu.uGlobalFrame.zw;\n}\n  \n@vertex\nfn mainVertex(\n  @location(0) aPosition : vec2<f32>, \n) -> VSOutput {\n  return VSOutput(\n   filterVertexPosition(aPosition),\n   filterTextureCoord(aPosition),\n   getFilterCoord(aPosition)\n  );\n}\n\n@fragment\nfn mainFragment(\n  @location(0) uv: vec2<f32>,\n  @location(1) filterUv: vec2<f32>,\n  @builtin(position) position: vec4<f32>\n) -> @location(0) vec4<f32> {\n\n    var maskClamp = filterUniforms.uMaskClamp;\n\n     var clip = step(3.5,\n        step(maskClamp.x, filterUv.x) +\n        step(maskClamp.y, filterUv.y) +\n        step(filterUv.x, maskClamp.z) +\n        step(filterUv.y, maskClamp.w));\n\n    var mask = textureSample(uMaskTexture, uSampler, filterUv);\n    var source = textureSample(uTexture, uSampler, uv);\n    \n    var npmAlpha = 0.0;\n\n    var alphaMul = 1.0 - npmAlpha * (1.0 - mask.a);\n\n    var a = (alphaMul * mask.r) * clip;\n\n    return vec4(source.rgb, source.a) * a;\n}";class W extends D{constructor(e){const{sprite:t,...r}=e,n=new O.N(t.texture),s=new F.k({uFilterMatrix:{value:new a.u,type:"mat3x3<f32>"},uMaskClamp:{value:n.uClampFrame,type:"vec4<f32>"},uAlpha:{value:1,type:"f32"}});super({...r,gpuProgram:B.B.from({vertex:{source:E,entryPoint:"mainVertex"},fragment:{source:E,entryPoint:"mainFragment"}}),glProgram:U.M.from({vertex:"in vec2 aPosition;\n\nout vec2 vTextureCoord;\nout vec2 vMaskCoord;\n\n\nuniform vec4 uInputSize;\nuniform vec4 uOutputFrame;\nuniform vec4 uOutputTexture;\nuniform mat3 uFilterMatrix;\n\nvec4 filterVertexPosition(  vec2 aPosition )\n{\n    vec2 position = aPosition * uOutputFrame.zw + uOutputFrame.xy;\n       \n    position.x = position.x * (2.0 / uOutputTexture.x) - 1.0;\n    position.y = position.y * (2.0*uOutputTexture.z / uOutputTexture.y) - uOutputTexture.z;\n\n    return vec4(position, 0.0, 1.0);\n}\n\nvec2 filterTextureCoord(  vec2 aPosition )\n{\n    return aPosition * (uOutputFrame.zw * uInputSize.zw);\n}\n\nvec2 getFilterCoord( vec2 aPosition )\n{\n    return  ( uFilterMatrix * vec3( filterTextureCoord(aPosition), 1.0)  ).xy;\n}   \n\nvoid main(void)\n{\n    gl_Position = filterVertexPosition(aPosition);\n    vTextureCoord = filterTextureCoord(aPosition);\n    vMaskCoord = getFilterCoord(aPosition);\n}\n",fragment:"in vec2 vMaskCoord;\nin vec2 vTextureCoord;\n\nuniform sampler2D uTexture;\nuniform sampler2D uMaskTexture;\n\nuniform float uAlpha;\nuniform vec4 uMaskClamp;\n\nout vec4 finalColor;\n\nvoid main(void)\n{\n    float clip = step(3.5,\n        step(uMaskClamp.x, vMaskCoord.x) +\n        step(uMaskClamp.y, vMaskCoord.y) +\n        step(vMaskCoord.x, uMaskClamp.z) +\n        step(vMaskCoord.y, uMaskClamp.w));\n\n    // TODO look into why this is needed\n    float npmAlpha = uAlpha; \n    vec4 original = texture(uTexture, vTextureCoord);\n    vec4 masky = texture(uMaskTexture, vMaskCoord);\n    float alphaMul = 1.0 - npmAlpha * (1.0 - masky.a);\n\n    original *= (alphaMul * masky.r * uAlpha * clip);\n\n    finalColor = original;\n}\n",name:"mask-filter"}),resources:{filterUniforms:s,uMaskTexture:t.texture.source}}),this.sprite=t,this._textureMatrix=n}apply(e,t,r,n){this._textureMatrix.texture=this.sprite.texture,e.calculateSpriteMatrix(this.resources.filterUniforms.uniforms.uFilterMatrix,this.sprite).prepend(this._textureMatrix.mapCoord),this.resources.uMaskTexture=this.sprite.texture.source,e.applyFilter(this,t,r,n)}}var H=r(9636),L=r(9443),V=r(6844),$=r(4492),j=r(2437);const K=new H.c;class N extends R.a{constructor(){super(),this.filters=[new W({sprite:new V.k($.g.EMPTY)})]}get sprite(){return this.filters[0].sprite}set sprite(e){this.filters[0].sprite=e}}class q{constructor(e){this._activeMaskStage=[],this._renderer=e}push(e,t,r){const n=this._renderer;if(n.renderPipes.batch.break(r),r.add({renderPipeId:"alphaMask",action:"pushMaskBegin",mask:e,canBundle:!1,maskedContainer:t}),e.renderMaskToTexture){const t=e.mask;t.includeInBuild=!0,d(t,r,n.renderPipes),t.includeInBuild=!1}n.renderPipes.batch.break(r),r.add({renderPipeId:"alphaMask",action:"pushMaskEnd",mask:e,maskedContainer:t,canBundle:!1})}pop(e,t,r){this._renderer.renderPipes.batch.break(r),r.add({renderPipeId:"alphaMask",action:"popMaskEnd",mask:e,canBundle:!1})}execute(e){const t=this._renderer,r=e.mask.renderMaskToTexture;if("pushMaskBegin"===e.action){const n=T.Z.get(N);if(r){e.mask.mask.measurable=!0;const r=(0,L.fB)(e.mask.mask,!0,K);e.mask.mask.measurable=!1,r.ceil();const s=j.W.getOptimalTexture(r.width,r.height,1,!1);t.renderTarget.push(s,!0),t.globalUniforms.push({offset:r,worldColor:4294967295});const i=n.sprite;i.texture=s,i.worldTransform.tx=r.minX,i.worldTransform.ty=r.minY,this._activeMaskStage.push({filterEffect:n,maskedContainer:e.maskedContainer,filterTexture:s})}else n.sprite=e.mask.mask,this._activeMaskStage.push({filterEffect:n,maskedContainer:e.maskedContainer})}else if("pushMaskEnd"===e.action){const e=this._activeMaskStage[this._activeMaskStage.length-1];r&&(t.renderTarget.pop(),t.globalUniforms.pop()),t.filter.push({renderPipeId:"filter",action:"pushFilter",container:e.maskedContainer,filterEffect:e.filterEffect,canBundle:!1})}else if("popMaskEnd"===e.action){t.filter.pop();const e=this._activeMaskStage.pop();r&&j.W.returnTexture(e.filterTexture),T.Z.return(e.filterEffect)}}destroy(){this._renderer=null,this._activeMaskStage=null}}q.extension={type:[n.Ag.WebGLPipes,n.Ag.WebGPUPipes,n.Ag.CanvasPipes],name:"alphaMask"};class Y{constructor(e){this._colorStack=[],this._colorStackIndex=0,this._currentColor=0,this._renderer=e}buildStart(){this._colorStack[0]=15,this._colorStackIndex=1,this._currentColor=15}push(e,t,r){this._renderer.renderPipes.batch.break(r);const n=this._colorStack;n[this._colorStackIndex]=n[this._colorStackIndex-1]&e.mask;const s=this._colorStack[this._colorStackIndex];s!==this._currentColor&&(this._currentColor=s,r.add({renderPipeId:"colorMask",colorMask:s,canBundle:!1})),this._colorStackIndex++}pop(e,t,r){this._renderer.renderPipes.batch.break(r);const n=this._colorStack;this._colorStackIndex--;const s=n[this._colorStackIndex-1];s!==this._currentColor&&(this._currentColor=s,r.add({renderPipeId:"colorMask",colorMask:s,canBundle:!1}))}execute(e){this._renderer.colorMask.setMask(e.colorMask)}destroy(){this._colorStack=null}}Y.extension={type:[n.Ag.WebGLPipes,n.Ag.WebGPUPipes,n.Ag.CanvasPipes],name:"colorMask"};var Z=r(1257),J=r(1957);class X{constructor(e){this._maskStackHash={},this._maskHash=new WeakMap,this._renderer=e}push(e,t,r){var n;const s=e,i=this._renderer;i.renderPipes.batch.break(r),i.renderPipes.blendMode.setBlendMode(s.mask,"none",r),r.add({renderPipeId:"stencilMask",action:"pushMaskBegin",mask:e,canBundle:!1});const o=s.mask;o.includeInBuild=!0,this._maskHash.has(s)||this._maskHash.set(s,{instructionsStart:0,instructionsLength:0});const a=this._maskHash.get(s);a.instructionsStart=r.instructionSize,d(o,r,i.renderPipes),o.includeInBuild=!1,i.renderPipes.batch.break(r),r.add({renderPipeId:"stencilMask",action:"pushMaskEnd",mask:e,canBundle:!1});const u=r.instructionSize-a.instructionsStart-1;a.instructionsLength=u;const l=i.renderTarget.renderTarget.uid;(n=this._maskStackHash)[l]??(n[l]=0)}pop(e,t,r){const n=e,s=this._renderer;s.renderPipes.batch.break(r),s.renderPipes.blendMode.setBlendMode(n.mask,"none",r),r.add({renderPipeId:"stencilMask",action:"popMaskBegin",canBundle:!1});const i=this._maskHash.get(e);for(let e=0;e<i.instructionsLength;e++)r.instructions[r.instructionSize++]=r.instructions[i.instructionsStart++];r.add({renderPipeId:"stencilMask",action:"popMaskEnd",canBundle:!1})}execute(e){var t;const r=this._renderer,n=r.renderTarget.renderTarget.uid;let s=(t=this._maskStackHash)[n]??(t[n]=0);"pushMaskBegin"===e.action?(r.renderTarget.ensureDepthStencil(),r.stencil.setStencilMode(J.K.RENDERING_MASK_ADD,s),s++,r.colorMask.setMask(0)):"pushMaskEnd"===e.action?(r.stencil.setStencilMode(J.K.MASK_ACTIVE,s),r.colorMask.setMask(15)):"popMaskBegin"===e.action?(r.colorMask.setMask(0),0!==s?r.stencil.setStencilMode(J.K.RENDERING_MASK_REMOVE,s):(r.renderTarget.clear(null,Z.u.STENCIL),r.stencil.setStencilMode(J.K.DISABLED,s)),s--):"popMaskEnd"===e.action&&(r.stencil.setStencilMode(J.K.MASK_ACTIVE,s),r.colorMask.setMask(15)),this._maskStackHash[n]=s}destroy(){this._renderer=null,this._maskStackHash=null,this._maskHash=null}}X.extension={type:[n.Ag.WebGLPipes,n.Ag.WebGPUPipes,n.Ag.CanvasPipes],name:"stencilMask"};var Q=r(2577);const ee=class e{constructor(){this.clearBeforeRender=!0,this._backgroundColor=new Q.Q(0),this.color=this._backgroundColor,this.alpha=1}init(t){t={...e.defaultOptions,...t},this.clearBeforeRender=t.clearBeforeRender,this.color=t.background||t.backgroundColor||this._backgroundColor,this.alpha=t.backgroundAlpha,this._backgroundColor.setAlpha(t.backgroundAlpha)}get color(){return this._backgroundColor}set color(e){this._backgroundColor.setValue(e)}get alpha(){return this._backgroundColor.alpha}set alpha(e){this._backgroundColor.setAlpha(e)}get colorRgba(){return this._backgroundColor.toArray()}destroy(){}};ee.extension={type:[n.Ag.WebGLSystem,n.Ag.WebGPUSystem,n.Ag.CanvasSystem],name:"background",priority:0},ee.defaultOptions={backgroundAlpha:1,backgroundColor:0,clearBeforeRender:!0};let te=ee;var re=r(268);const ne={};n.XO.handle(n.Ag.BlendMode,(e=>{if(!e.name)throw new Error("BlendMode extension must have a name property");ne[e.name]=e.ref}),(e=>{delete ne[e.name]}));class se{constructor(e){this._isAdvanced=!1,this._filterHash=Object.create(null),this._renderer=e}setBlendMode(e,t,r){this._activeBlendMode!==t?(this._activeBlendMode=t,this._isAdvanced&&this._endAdvancedBlendMode(r),this._isAdvanced=!!ne[t],this._isAdvanced&&(this._beginAdvancedBlendMode(r),this._renderableList.push(e))):this._isAdvanced&&this._renderableList.push(e)}_beginAdvancedBlendMode(e){this._renderer.renderPipes.batch.break(e);const t=this._activeBlendMode;if(!ne[t])return void(0,re.R)(`Unable to assign BlendMode: '${t}'. You may want to include: import 'pixi.js/advanced-blend-modes'`);let r=this._filterHash[t];r||(r=this._filterHash[t]=new R.a,r.filters=[new ne[t]]);const n={renderPipeId:"filter",action:"pushFilter",renderables:[],filterEffect:r,canBundle:!1};this._renderableList=n.renderables,e.add(n)}_endAdvancedBlendMode(e){this._renderableList=null,this._renderer.renderPipes.batch.break(e),e.add({renderPipeId:"filter",action:"popFilter",canBundle:!1})}buildStart(){this._isAdvanced=!1}buildEnd(e){this._isAdvanced&&this._endAdvancedBlendMode(e)}destroy(){this._renderer=null,this._renderableList=null;for(const e in this._filterHash)this._filterHash[e].destroy();this._filterHash=null}}se.extension={type:[n.Ag.WebGLPipes,n.Ag.WebGPUPipes,n.Ag.CanvasPipes],name:"blendMode"};const ie={png:"image/png",jpg:"image/jpeg",webp:"image/webp"},oe=class e{constructor(e){this._renderer=e}_normalizeOptions(e,t={}){return e instanceof h.mc||e instanceof $.g?{target:e,...t}:{...t,...e}}async image(e){const t=new Image;return t.src=await this.base64(e),t}async base64(t){t=this._normalizeOptions(t,e.defaultImageOptions);const{format:r,quality:n}=t,s=this.canvas(t);if(void 0!==s.toBlob)return new Promise(((e,t)=>{s.toBlob((r=>{if(!r)return void t(new Error("ICanvas.toBlob failed!"));const n=new FileReader;n.onload=()=>e(n.result),n.onerror=t,n.readAsDataURL(r)}),ie[r],n)}));if(void 0!==s.toDataURL)return s.toDataURL(ie[r],n);if(void 0!==s.convertToBlob){const e=await s.convertToBlob({type:ie[r],quality:n});return new Promise(((t,r)=>{const n=new FileReader;n.onload=()=>t(n.result),n.onerror=r,n.readAsDataURL(e)}))}throw new Error("Extract.base64() requires ICanvas.toDataURL, ICanvas.toBlob, or ICanvas.convertToBlob to be implemented")}canvas(e){const t=(e=this._normalizeOptions(e)).target,r=this._renderer;if(t instanceof $.g)return r.texture.generateCanvas(t);const n=r.textureGenerator.generateTexture(e),s=r.texture.generateCanvas(n);return n.destroy(),s}pixels(e){const t=(e=this._normalizeOptions(e)).target,r=this._renderer,n=t instanceof $.g?t:r.textureGenerator.generateTexture(e),s=r.texture.getPixels(n);return t instanceof h.mc&&n.destroy(),s}texture(e){return(e=this._normalizeOptions(e)).target instanceof $.g?e.target:this._renderer.textureGenerator.generateTexture(e)}download(e){e=this._normalizeOptions(e);const t=this.canvas(e),r=document.createElement("a");r.download=e.filename??"image.png",r.href=t.toDataURL("image/png"),document.body.appendChild(r),r.click(),document.body.removeChild(r)}log(e){const t=e.width??200;e=this._normalizeOptions(e);const r=this.canvas(e),n=r.toDataURL();console.log(`[Pixi Texture] ${r.width}px ${r.height}px`);const s=["font-size: 1px;",`padding: ${t}px 300px;`,`background: url(${n}) no-repeat;`,"background-size: contain;"].join(" ");console.log("%c ",s)}destroy(){this._renderer=null}};oe.extension={type:[n.Ag.WebGLSystem,n.Ag.WebGPUSystem],name:"extract"},oe.defaultImageOptions={format:"png",quality:1};let ae=oe;var ue=r(9252),de=r(7269),le=r(6932);class ce extends $.g{static create(e){return new $.g({source:new le.v(e)})}resize(e,t,r){return this.source.resize(e,t,r),this}}const he=new ue.M,pe=new H.c,fe=[0,0,0,0];class ge{constructor(e){this._renderer=e}generateTexture(e){e instanceof h.mc&&(e={target:e,frame:void 0,textureSourceOptions:{},resolution:void 0});const t=e.resolution||this._renderer.resolution,r=e.antialias||this._renderer.view.antialias,n=e.target;let s=e.clearColor;s=s?Array.isArray(s)&&4===s.length?s:Q.Q.shared.setValue(s).toArray():fe;const i=e.frame?.copyTo(he)||(0,de.n)(n,pe).rectangle;i.width=0|Math.max(i.width,1/t),i.height=0|Math.max(i.height,1/t);const o=ce.create({...e.textureSourceOptions,width:i.width,height:i.height,resolution:t,antialias:r}),u=a.u.shared.translate(-i.x,-i.y);return this._renderer.render({container:n,transform:u,target:o,clearColor:s}),o.source.updateMipmaps(),o}destroy(){this._renderer=null}}ge.extension={type:[n.Ag.WebGLSystem,n.Ag.WebGPUSystem],name:"textureGenerator"};var me=r(5101),ve=r(2760),xe=r(3513),_e=r(5099);class be{constructor(e){this._stackIndex=0,this._globalUniformDataStack=[],this._uniformsPool=[],this._activeUniforms=[],this._bindGroupPool=[],this._activeBindGroups=[],this._renderer=e}reset(){this._stackIndex=0;for(let e=0;e<this._activeUniforms.length;e++)this._uniformsPool.push(this._activeUniforms[e]);for(let e=0;e<this._activeBindGroups.length;e++)this._bindGroupPool.push(this._activeBindGroups[e]);this._activeUniforms.length=0,this._activeBindGroups.length=0}start(e){this.reset(),this.push(e)}bind({size:e,projectionMatrix:t,worldTransformMatrix:r,worldColor:n,offset:s}){const i=this._renderer.renderTarget.renderTarget,o=this._stackIndex?this._globalUniformDataStack[this._stackIndex-1]:{projectionData:i,worldTransformMatrix:new a.u,worldColor:4294967295,offset:new me.b},u={projectionMatrix:t||this._renderer.renderTarget.projectionMatrix,resolution:e||i.size,worldTransformMatrix:r||o.worldTransformMatrix,worldColor:n||o.worldColor,offset:s||o.offset,bindGroup:null},d=this._uniformsPool.pop()||this._createUniforms();this._activeUniforms.push(d);const l=d.uniforms;let c;l.uProjectionMatrix=u.projectionMatrix,l.uResolution=u.resolution,l.uWorldTransformMatrix.copyFrom(u.worldTransformMatrix),l.uWorldTransformMatrix.tx-=u.offset.x,l.uWorldTransformMatrix.ty-=u.offset.y,(0,ve.V)(u.worldColor,l.uWorldColorAlpha,0),d.update(),this._renderer.renderPipes.uniformBatch?c=this._renderer.renderPipes.uniformBatch.getUniformBindGroup(d,!1):(c=this._bindGroupPool.pop()||new xe.T,this._activeBindGroups.push(c),c.setResource(d,0)),u.bindGroup=c,this._currentGlobalUniformData=u}push(e){this.bind(e),this._globalUniformDataStack[this._stackIndex++]=this._currentGlobalUniformData}pop(){this._currentGlobalUniformData=this._globalUniformDataStack[--this._stackIndex-1],this._renderer.type===_e.W.WEBGL&&this._currentGlobalUniformData.bindGroup.resources[0].update()}get bindGroup(){return this._currentGlobalUniformData.bindGroup}get uniformGroup(){return this._currentGlobalUniformData.bindGroup.resources[0]}_createUniforms(){return new F.k({uProjectionMatrix:{value:new a.u,type:"mat3x3<f32>"},uWorldTransformMatrix:{value:new a.u,type:"mat3x3<f32>"},uWorldColorAlpha:{value:new Float32Array(4),type:"vec4<f32>"},uResolution:{value:[0,0],type:"vec2<f32>"}},{isStatic:!0})}destroy(){this._renderer=null}}be.extension={type:[n.Ag.WebGLSystem,n.Ag.WebGPUSystem,n.Ag.CanvasSystem],name:"globalUniforms"};var ke=r(1761);let ye=!1;const Te="8.2.1";class Me{constructor(e){this._renderer=e}init(e){if(e.hello){let e=this._renderer.name;this._renderer.type===_e.W.WEBGL&&(e+=` ${this._renderer.context.webGLVersion}`),function(e){if(!ye){if(ke.e.get().getNavigator().userAgent.toLowerCase().indexOf("chrome")>-1){const t=[`%c  %c  %c  %c  %c PixiJS %c v${Te} (${e}) http://www.pixijs.com/\n\n`,"background: #E72264; padding:5px 0;","background: #6CA2EA; padding:5px 0;","background: #B5D33D; padding:5px 0;","background: #FED23F; padding:5px 0;","color: #FFFFFF; background: #E72264; padding:5px 0;","color: #E72264; background: #FFFFFF; padding:5px 0;"];globalThis.console.log(...t)}else globalThis.console&&globalThis.console.log(`PixiJS ${Te} - ${e} - http://www.pixijs.com/`);ye=!0}}(e)}}}Me.extension={type:[n.Ag.WebGLSystem,n.Ag.WebGPUSystem,n.Ag.CanvasSystem],name:"hello",priority:-2},Me.defaultOptions={hello:!1};const Se=class e{constructor(e){this._renderer=e,this.count=0,this.checkCount=0}init(t){t={...e.defaultOptions,...t},this.checkCountMax=t.textureGCCheckCountMax,this.maxIdle=t.textureGCAMaxIdle,this.active=t.textureGCActive}postrender(){this._renderer.renderingToScreen&&(this.count++,this.active&&(this.checkCount++,this.checkCount>this.checkCountMax&&(this.checkCount=0,this.run())))}run(){const e=this._renderer.texture.managedTextures;for(let t=0;t<e.length;t++){const r=e[t];r.autoGarbageCollect&&r.resource&&r._touched>-1&&this.count-r._touched>this.maxIdle&&(r._touched=-1,r.unload())}}destroy(){this._renderer=null}};Se.extension={type:[n.Ag.WebGLSystem,n.Ag.WebGPUSystem],name:"textureGC"},Se.defaultOptions={textureGCActive:!0,textureGCAMaxIdle:3600,textureGCCheckCountMax:600};let we=Se;n.XO.add(we);var Ce=r(4670),Pe=r(279),Ge=r(8725);const Ae=class e{get resolution(){return this.texture.source._resolution}set resolution(e){this.texture.source.resize(this.texture.source.width,this.texture.source.height,e)}init(t){(t={...e.defaultOptions,...t}).view&&((0,Ce.t)(Ce.l,"ViewSystem.view has been renamed to ViewSystem.canvas"),t.canvas=t.view),this.screen=new ue.M(0,0,t.width,t.height),this.canvas=t.canvas||ke.e.get().createCanvas(),this.antialias=!!t.antialias,this.texture=(0,Ge.c)(this.canvas,t),this.renderTarget=new Pe.O({colorTextures:[this.texture],depth:!!t.depth,isRoot:!0}),this.texture.source.transparent=t.backgroundAlpha<1,this.multiView=!!t.multiView,this.autoDensity&&(this.canvas.style.width=`${this.texture.width}px`,this.canvas.style.height=`${this.texture.height}px`),this.resolution=t.resolution}resize(e,t,r){this.texture.source.resize(e,t,r),this.screen.width=this.texture.frame.width,this.screen.height=this.texture.frame.height,this.autoDensity&&(this.canvas.style.width=`${e}px`,this.canvas.style.height=`${t}px`)}destroy(e=!1){("boolean"==typeof e?e:e?.removeView)&&this.canvas.parentNode&&this.canvas.parentNode.removeChild(this.canvas)}};Ae.extension={type:[n.Ag.WebGLSystem,n.Ag.WebGPUSystem,n.Ag.CanvasSystem],name:"view",priority:0},Ae.defaultOptions={width:800,height:600,autoDensity:!1,antialias:!1};const Re=[te,be,Me,Ae,k,we,ge,ae,w.d],Ue=[se,A,S,o,q,X,Y,s]},8725:(e,t,r)=>{r.d(t,{c:()=>o});var n=r(4884),s=r(4492);const i=new Map;function o(e,t){if(!i.has(e)){const r=new s.g({source:new n.q({resource:e,...t})}),o=()=>{i.get(e)===r&&i.delete(e)};r.once("destroy",o),r.source.once("destroy",o),i.set(e,r)}return i.get(e)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TyxFLDBEQ2xDRixNQUFNa1osRUFBOEIsSUFBSWpoQixJQUN4QyxTQUFTK0QsRUFBaUJvVyxFQUFRL0gsR0FDaEMsSUFBSzZPLEVBQVk5SixJQUFJZ0QsR0FBUyxDQUM1QixNQUFNL2IsRUFBVSxJQUFJLElBQVEsQ0FDMUJDLE9BQVEsSUFBSSxJQUFhLENBQ3ZCNkMsU0FBVWlaLEtBQ1AvSCxNQUdEOE8sRUFBWSxLQUNaRCxFQUFZL2QsSUFBSWlYLEtBQVkvYixHQUM5QjZpQixFQUFZRSxPQUFPaEgsRUFDckIsRUFFRi9iLEVBQVE2RixLQUFLLFVBQVdpZCxHQUN4QjlpQixFQUFRQyxPQUFPNEYsS0FBSyxVQUFXaWQsR0FDL0JELEVBQVk5YyxJQUFJZ1csRUFBUS9iLEVBQzFCLENBQ0EsT0FBTzZpQixFQUFZL2QsSUFBSWlYLEVBQ3pCLEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zci8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvaGlnaC1zaGFkZXIvc2hhZGVyLWJpdHMvdGV4dHVyZUJpdC5tanMiLCJ3ZWJwYWNrOi8vc3IvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9zaGFkZXIvcHJvZ3JhbS9lbnN1cmVBdHRyaWJ1dGVzLm1qcyIsIndlYnBhY2s6Ly9zci8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dwdS9zdGF0ZS9HcHVTdGVuY2lsTW9kZXNUb1BpeGkubWpzIiwid2VicGFjazovL3NyLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL2J1ZmZlci9CdWZmZXJSZXNvdXJjZS5tanMiLCJ3ZWJwYWNrOi8vc3IvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvcmVuZGVyVGFyZ2V0L1JlbmRlclRhcmdldC5tanMiLCJ3ZWJwYWNrOi8vc3IvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvcmVuZGVyVGFyZ2V0L1JlbmRlclRhcmdldFN5c3RlbS5tanMiLCJ3ZWJwYWNrOi8vc3IvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvcmVuZGVyVGFyZ2V0L2lzUmVuZGVyaW5nVG9TY3JlZW4ubWpzIiwid2VicGFjazovL3NyLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ3B1L3JlbmRlclRhcmdldC9jYWxjdWxhdGVQcm9qZWN0aW9uLm1qcyIsIndlYnBhY2s6Ly9zci8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC9zaGFkZXIvVWJvU3lzdGVtLm1qcyIsIndlYnBhY2s6Ly9zci8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC9zaGFkZXIvdXRpbHMvY3JlYXRlVWJvU3luY0Z1bmN0aW9uLm1qcyIsIndlYnBhY2s6Ly9zci8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC9zaGFkZXIvdXRpbHMvdWJvU3luY0Z1bmN0aW9ucy5tanMiLCJ3ZWJwYWNrOi8vc3IvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvc2hhZGVyL3V0aWxzL3VuaWZvcm1QYXJzZXJzLm1qcyIsIndlYnBhY2s6Ly9zci8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9zY2VuZS9jb250YWluZXIvQ3VzdG9tUmVuZGVyUGlwZS5tanMiLCJ3ZWJwYWNrOi8vc3IvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvY29udGFpbmVyL3V0aWxzL2V4ZWN1dGVJbnN0cnVjdGlvbnMubWpzIiwid2VicGFjazovL3NyLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL2NvbnRhaW5lci9SZW5kZXJHcm91cFBpcGUubWpzIiwid2VicGFjazovL3NyLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL2NvbnRhaW5lci91dGlscy9idWlsZEluc3RydWN0aW9ucy5tanMiLCJ3ZWJwYWNrOi8vc3IvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvY29udGFpbmVyL3V0aWxzL2NvbGxlY3RSZW5kZXJHcm91cHMubWpzIiwid2VicGFjazovL3NyLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL2NvbnRhaW5lci91dGlscy9taXhDb2xvcnMubWpzIiwid2VicGFjazovL3NyLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL2NvbnRhaW5lci91dGlscy9taXhIZXhDb2xvcnMubWpzIiwid2VicGFjazovL3NyLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL2NvbnRhaW5lci91dGlscy91cGRhdGVSZW5kZXJHcm91cFRyYW5zZm9ybXMubWpzIiwid2VicGFjazovL3NyLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL2NvbnRhaW5lci91dGlscy92YWxpZGF0ZVJlbmRlcmFibGVzLm1qcyIsIndlYnBhY2s6Ly9zci8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9zY2VuZS9jb250YWluZXIvUmVuZGVyR3JvdXBTeXN0ZW0ubWpzIiwid2VicGFjazovL3NyLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3Nwcml0ZS9TcHJpdGVQaXBlLm1qcyIsIndlYnBhY2s6Ly9zci8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvYmF0Y2hlci9zaGFyZWQvQmF0Y2hlclBpcGUubWpzIiwid2VicGFjazovL3NyLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL2ZpbHRlcnMvRmlsdGVyLm1qcyIsIndlYnBhY2s6Ly9zci8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9maWx0ZXJzL21hc2svbWFzay5mcmFnLm1qcyIsIndlYnBhY2s6Ly9zci8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9maWx0ZXJzL21hc2svbWFzay53Z3NsLm1qcyIsIndlYnBhY2s6Ly9zci8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9maWx0ZXJzL21hc2svTWFza0ZpbHRlci5tanMiLCJ3ZWJwYWNrOi8vc3IvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvZmlsdGVycy9tYXNrL21hc2sudmVydC5tanMiLCJ3ZWJwYWNrOi8vc3IvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL21hc2svYWxwaGEvQWxwaGFNYXNrUGlwZS5tanMiLCJ3ZWJwYWNrOi8vc3IvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL21hc2svY29sb3IvQ29sb3JNYXNrUGlwZS5tanMiLCJ3ZWJwYWNrOi8vc3IvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL21hc2svc3RlbmNpbC9TdGVuY2lsTWFza1BpcGUubWpzIiwid2VicGFjazovL3NyLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL2JhY2tncm91bmQvQmFja2dyb3VuZFN5c3RlbS5tanMiLCJ3ZWJwYWNrOi8vc3IvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvYmxlbmRNb2Rlcy9CbGVuZE1vZGVQaXBlLm1qcyIsIndlYnBhY2s6Ly9zci8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC9leHRyYWN0L0V4dHJhY3RTeXN0ZW0ubWpzIiwid2VicGFjazovL3NyLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3RleHR1cmUvUmVuZGVyVGV4dHVyZS5tanMiLCJ3ZWJwYWNrOi8vc3IvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvZXh0cmFjdC9HZW5lcmF0ZVRleHR1cmVTeXN0ZW0ubWpzIiwid2VicGFjazovL3NyLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3JlbmRlclRhcmdldC9HbG9iYWxVbmlmb3JtU3lzdGVtLm1qcyIsIndlYnBhY2s6Ly9zci8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi91dGlscy9zYXlIZWxsby5tanMiLCJ3ZWJwYWNrOi8vc3IvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvc3RhcnR1cC9IZWxsb1N5c3RlbS5tanMiLCJ3ZWJwYWNrOi8vc3IvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvdGV4dHVyZS9UZXh0dXJlR0NTeXN0ZW0ubWpzIiwid2VicGFjazovL3NyLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3ZpZXcvVmlld1N5c3RlbS5tanMiLCJ3ZWJwYWNrOi8vc3IvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvc3lzdGVtL1NoYXJlZFN5c3RlbXMubWpzIiwid2VicGFjazovL3NyLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3RleHR1cmUvdXRpbHMvZ2V0Q2FudmFzVGV4dHVyZS5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCB0ZXh0dXJlQml0ID0ge1xuICBuYW1lOiBcInRleHR1cmUtYml0XCIsXG4gIHZlcnRleDoge1xuICAgIGhlYWRlcjogKFxuICAgICAgLyogd2dzbCAqL1xuICAgICAgYFxuXG4gICAgICAgIHN0cnVjdCBUZXh0dXJlVW5pZm9ybXMge1xuICAgICAgICAgICAgdVRleHR1cmVNYXRyaXg6bWF0M3gzPGYzMj4sXG4gICAgICAgIH1cblxuICAgICAgICBAZ3JvdXAoMikgQGJpbmRpbmcoMikgdmFyPHVuaWZvcm0+IHRleHR1cmVVbmlmb3JtcyA6IFRleHR1cmVVbmlmb3JtcztcbiAgICAgICAgYFxuICAgICksXG4gICAgbWFpbjogKFxuICAgICAgLyogd2dzbCAqL1xuICAgICAgYFxuICAgICAgICAgICAgdXYgPSAodGV4dHVyZVVuaWZvcm1zLnVUZXh0dXJlTWF0cml4ICogdmVjMyh1diwgMS4wKSkueHk7XG4gICAgICAgIGBcbiAgICApXG4gIH0sXG4gIGZyYWdtZW50OiB7XG4gICAgaGVhZGVyOiAoXG4gICAgICAvKiB3Z3NsICovXG4gICAgICBgXG4gICAgICAgICAgICBAZ3JvdXAoMikgQGJpbmRpbmcoMCkgdmFyIHVUZXh0dXJlOiB0ZXh0dXJlXzJkPGYzMj47XG4gICAgICAgICAgICBAZ3JvdXAoMikgQGJpbmRpbmcoMSkgdmFyIHVTYW1wbGVyOiBzYW1wbGVyO1xuXG4gICAgICAgICBcbiAgICAgICAgYFxuICAgICksXG4gICAgbWFpbjogKFxuICAgICAgLyogd2dzbCAqL1xuICAgICAgYFxuICAgICAgICAgICAgb3V0Q29sb3IgPSB0ZXh0dXJlU2FtcGxlKHVUZXh0dXJlLCB1U2FtcGxlciwgdlVWKTtcbiAgICAgICAgYFxuICAgIClcbiAgfVxufTtcbmNvbnN0IHRleHR1cmVCaXRHbCA9IHtcbiAgbmFtZTogXCJ0ZXh0dXJlLWJpdFwiLFxuICB2ZXJ0ZXg6IHtcbiAgICBoZWFkZXI6IChcbiAgICAgIC8qIGdsc2wgKi9cbiAgICAgIGBcbiAgICAgICAgICAgIHVuaWZvcm0gbWF0MyB1VGV4dHVyZU1hdHJpeDtcbiAgICAgICAgYFxuICAgICksXG4gICAgbWFpbjogKFxuICAgICAgLyogZ2xzbCAqL1xuICAgICAgYFxuICAgICAgICAgICAgdXYgPSAodVRleHR1cmVNYXRyaXggKiB2ZWMzKHV2LCAxLjApKS54eTtcbiAgICAgICAgYFxuICAgIClcbiAgfSxcbiAgZnJhZ21lbnQ6IHtcbiAgICBoZWFkZXI6IChcbiAgICAgIC8qIGdsc2wgKi9cbiAgICAgIGBcbiAgICAgICAgdW5pZm9ybSBzYW1wbGVyMkQgdVRleHR1cmU7XG5cbiAgICAgICAgIFxuICAgICAgICBgXG4gICAgKSxcbiAgICBtYWluOiAoXG4gICAgICAvKiBnbHNsICovXG4gICAgICBgXG4gICAgICAgICAgICBvdXRDb2xvciA9IHRleHR1cmUodVRleHR1cmUsIHZVVik7XG4gICAgICAgIGBcbiAgICApXG4gIH1cbn07XG5cbmV4cG9ydCB7IHRleHR1cmVCaXQsIHRleHR1cmVCaXRHbCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGV4dHVyZUJpdC5tanMubWFwXG4iLCJpbXBvcnQgeyB3YXJuIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vdXRpbHMvbG9nZ2luZy93YXJuLm1qcyc7XG5pbXBvcnQgeyBnZXRBdHRyaWJ1dGVJbmZvRnJvbUZvcm1hdCB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9nZW9tZXRyeS91dGlscy9nZXRBdHRyaWJ1dGVJbmZvRnJvbUZvcm1hdC5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGVuc3VyZUF0dHJpYnV0ZXMoZ2VvbWV0cnksIGV4dHJhY3RlZERhdGEpIHtcbiAgZm9yIChjb25zdCBpIGluIGdlb21ldHJ5LmF0dHJpYnV0ZXMpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGUgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzW2ldO1xuICAgIGNvbnN0IGF0dHJpYnV0ZURhdGEgPSBleHRyYWN0ZWREYXRhW2ldO1xuICAgIGlmIChhdHRyaWJ1dGVEYXRhKSB7XG4gICAgICBhdHRyaWJ1dGUubG9jYXRpb24gPz8gKGF0dHJpYnV0ZS5sb2NhdGlvbiA9IGF0dHJpYnV0ZURhdGEubG9jYXRpb24pO1xuICAgICAgYXR0cmlidXRlLmZvcm1hdCA/PyAoYXR0cmlidXRlLmZvcm1hdCA9IGF0dHJpYnV0ZURhdGEuZm9ybWF0KTtcbiAgICAgIGF0dHJpYnV0ZS5vZmZzZXQgPz8gKGF0dHJpYnV0ZS5vZmZzZXQgPSBhdHRyaWJ1dGVEYXRhLm9mZnNldCk7XG4gICAgICBhdHRyaWJ1dGUuaW5zdGFuY2UgPz8gKGF0dHJpYnV0ZS5pbnN0YW5jZSA9IGF0dHJpYnV0ZURhdGEuaW5zdGFuY2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuKGBBdHRyaWJ1dGUgJHtpfSBpcyBub3QgcHJlc2VudCBpbiB0aGUgc2hhZGVyLCBidXQgaXMgcHJlc2VudCBpbiB0aGUgZ2VvbWV0cnkuIFVuYWJsZSB0byBpbmZlciBhdHRyaWJ1dGUgZGV0YWlscy5gKTtcbiAgICB9XG4gIH1cbiAgZW5zdXJlU3RhcnRBbmRTdHJpZGUoZ2VvbWV0cnkpO1xufVxuZnVuY3Rpb24gZW5zdXJlU3RhcnRBbmRTdHJpZGUoZ2VvbWV0cnkpIHtcbiAgY29uc3QgeyBidWZmZXJzLCBhdHRyaWJ1dGVzIH0gPSBnZW9tZXRyeTtcbiAgY29uc3QgdGVtcFN0cmlkZSA9IHt9O1xuICBjb25zdCB0ZW1wU3RhcnQgPSB7fTtcbiAgZm9yIChjb25zdCBqIGluIGJ1ZmZlcnMpIHtcbiAgICBjb25zdCBidWZmZXIgPSBidWZmZXJzW2pdO1xuICAgIHRlbXBTdHJpZGVbYnVmZmVyLnVpZF0gPSAwO1xuICAgIHRlbXBTdGFydFtidWZmZXIudWlkXSA9IDA7XG4gIH1cbiAgZm9yIChjb25zdCBqIGluIGF0dHJpYnV0ZXMpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzW2pdO1xuICAgIHRlbXBTdHJpZGVbYXR0cmlidXRlLmJ1ZmZlci51aWRdICs9IGdldEF0dHJpYnV0ZUluZm9Gcm9tRm9ybWF0KGF0dHJpYnV0ZS5mb3JtYXQpLnN0cmlkZTtcbiAgfVxuICBmb3IgKGNvbnN0IGogaW4gYXR0cmlidXRlcykge1xuICAgIGNvbnN0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbal07XG4gICAgYXR0cmlidXRlLnN0cmlkZSA/PyAoYXR0cmlidXRlLnN0cmlkZSA9IHRlbXBTdHJpZGVbYXR0cmlidXRlLmJ1ZmZlci51aWRdKTtcbiAgICBhdHRyaWJ1dGUuc3RhcnQgPz8gKGF0dHJpYnV0ZS5zdGFydCA9IHRlbXBTdGFydFthdHRyaWJ1dGUuYnVmZmVyLnVpZF0pO1xuICAgIHRlbXBTdGFydFthdHRyaWJ1dGUuYnVmZmVyLnVpZF0gKz0gZ2V0QXR0cmlidXRlSW5mb0Zyb21Gb3JtYXQoYXR0cmlidXRlLmZvcm1hdCkuc3RyaWRlO1xuICB9XG59XG5cbmV4cG9ydCB7IGVuc3VyZUF0dHJpYnV0ZXMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVuc3VyZUF0dHJpYnV0ZXMubWpzLm1hcFxuIiwiaW1wb3J0IHsgU1RFTkNJTF9NT0RFUyB9IGZyb20gJy4uLy4uL3NoYXJlZC9zdGF0ZS9jb25zdC5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNvbnN0IEdwdVN0ZW5jaWxNb2Rlc1RvUGl4aSA9IFtdO1xuR3B1U3RlbmNpbE1vZGVzVG9QaXhpW1NURU5DSUxfTU9ERVMuTk9ORV0gPSB2b2lkIDA7XG5HcHVTdGVuY2lsTW9kZXNUb1BpeGlbU1RFTkNJTF9NT0RFUy5ESVNBQkxFRF0gPSB7XG4gIHN0ZW5jaWxXcml0ZU1hc2s6IDAsXG4gIHN0ZW5jaWxSZWFkTWFzazogMFxufTtcbkdwdVN0ZW5jaWxNb2Rlc1RvUGl4aVtTVEVOQ0lMX01PREVTLlJFTkRFUklOR19NQVNLX0FERF0gPSB7XG4gIHN0ZW5jaWxGcm9udDoge1xuICAgIGNvbXBhcmU6IFwiZXF1YWxcIixcbiAgICBwYXNzT3A6IFwiaW5jcmVtZW50LWNsYW1wXCJcbiAgfSxcbiAgc3RlbmNpbEJhY2s6IHtcbiAgICBjb21wYXJlOiBcImVxdWFsXCIsXG4gICAgcGFzc09wOiBcImluY3JlbWVudC1jbGFtcFwiXG4gIH1cbn07XG5HcHVTdGVuY2lsTW9kZXNUb1BpeGlbU1RFTkNJTF9NT0RFUy5SRU5ERVJJTkdfTUFTS19SRU1PVkVdID0ge1xuICBzdGVuY2lsRnJvbnQ6IHtcbiAgICBjb21wYXJlOiBcImVxdWFsXCIsXG4gICAgcGFzc09wOiBcImRlY3JlbWVudC1jbGFtcFwiXG4gIH0sXG4gIHN0ZW5jaWxCYWNrOiB7XG4gICAgY29tcGFyZTogXCJlcXVhbFwiLFxuICAgIHBhc3NPcDogXCJkZWNyZW1lbnQtY2xhbXBcIlxuICB9XG59O1xuR3B1U3RlbmNpbE1vZGVzVG9QaXhpW1NURU5DSUxfTU9ERVMuTUFTS19BQ1RJVkVdID0ge1xuICBzdGVuY2lsV3JpdGVNYXNrOiAwLFxuICBzdGVuY2lsRnJvbnQ6IHtcbiAgICBjb21wYXJlOiBcImVxdWFsXCIsXG4gICAgcGFzc09wOiBcImtlZXBcIlxuICB9LFxuICBzdGVuY2lsQmFjazoge1xuICAgIGNvbXBhcmU6IFwiZXF1YWxcIixcbiAgICBwYXNzT3A6IFwia2VlcFwiXG4gIH1cbn07XG5cbmV4cG9ydCB7IEdwdVN0ZW5jaWxNb2Rlc1RvUGl4aSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R3B1U3RlbmNpbE1vZGVzVG9QaXhpLm1qcy5tYXBcbiIsImltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnZXZlbnRlbWl0dGVyMyc7XG5pbXBvcnQgeyB1aWQgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy9kYXRhL3VpZC5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNsYXNzIEJ1ZmZlclJlc291cmNlIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBCdWZmZXIgUmVzb3VyY2UuXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZm9yIHRoZSBidWZmZXIgcmVzb3VyY2VcbiAgICogQHBhcmFtIG9wdGlvbnMuYnVmZmVyIC0gVGhlIHVuZGVybHlpbmcgYnVmZmVyIHRoYXQgdGhpcyByZXNvdXJjZSBpcyB1c2luZ1xuICAgKiBAcGFyYW0gb3B0aW9ucy5vZmZzZXQgLSBUaGUgb2Zmc2V0IG9mIHRoZSBidWZmZXIgdGhpcyByZXNvdXJjZSBpcyB1c2luZy5cbiAgICogSWYgbm90IHByb3ZpZGVkLCB0aGVuIGl0IHdpbGwgdXNlIHRoZSBvZmZzZXQgb2YgdGhlIGJ1ZmZlci5cbiAgICogQHBhcmFtIG9wdGlvbnMuc2l6ZSAtIFRoZSBzaXplIG9mIHRoZSBidWZmZXIgdGhpcyByZXNvdXJjZSBpcyB1c2luZy5cbiAgICogSWYgbm90IHByb3ZpZGVkLCB0aGVuIGl0IHdpbGwgdXNlIHRoZSBzaXplIG9mIHRoZSBidWZmZXIuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7IGJ1ZmZlciwgb2Zmc2V0LCBzaXplIH0pIHtcbiAgICBzdXBlcigpO1xuICAgIC8qKlxuICAgICAqIGVtaXRzIHdoZW4gdGhlIHVuZGVybHlpbmcgYnVmZmVyIGhhcyBjaGFuZ2VkIHNoYXBlIChpLmUuIHJlc2l6ZWQpXG4gICAgICogbGV0dGluZyB0aGUgcmVuZGVyZXIga25vdyB0aGF0IGl0IG5lZWRzIHRvIGRpc2NhcmQgdGhlIG9sZCBidWZmZXIgb24gdGhlIEdQVSBhbmQgY3JlYXRlIGEgbmV3IG9uZVxuICAgICAqIEBldmVudCBjaGFuZ2VcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBhIHVuaXF1ZSBpZCBmb3IgdGhpcyB1bmlmb3JtIGdyb3VwIHVzZWQgdGhyb3VnaCB0aGUgcmVuZGVyZXJcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgdGhpcy51aWQgPSB1aWQoXCJidWZmZXJcIik7XG4gICAgLyoqXG4gICAgICogYSByZXNvdXJjZSB0eXBlLCB1c2VkIHRvIGlkZW50aWZ5IGhvdyB0byBoYW5kbGUgaXQgd2hlbiBpdHMgaW4gYSBiaW5kIGdyb3VwIC8gc2hhZGVyIHJlc291cmNlXG4gICAgICogQGludGVybmFsXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIHRoaXMuX3Jlc291cmNlVHlwZSA9IFwiYnVmZmVyUmVzb3VyY2VcIjtcbiAgICAvKipcbiAgICAgKiB1c2VkIGludGVybmFsbHkgdG8ga25vdyBpZiBhIHVuaWZvcm0gZ3JvdXAgd2FzIHVzZWQgaW4gdGhlIGxhc3QgcmVuZGVyIHBhc3NcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgdGhpcy5fdG91Y2hlZCA9IDA7XG4gICAgLyoqXG4gICAgICogdGhlIHJlc291cmNlIGlkIHVzZWQgaW50ZXJuYWxseSBieSB0aGUgcmVuZGVyZXIgdG8gYnVpbGQgYmluZCBncm91cCBrZXlzXG4gICAgICogQGludGVybmFsXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIHRoaXMuX3Jlc291cmNlSWQgPSB1aWQoXCJyZXNvdXJjZVwiKTtcbiAgICAvKipcbiAgICAgKiBBIGNoZWVreSBoaW50IHRvIHRoZSBHTCByZW5kZXJlciB0byBsZXQgaXQga25vdyB0aGlzIGlzIGEgQnVmZmVyUmVzb3VyY2VcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgdGhpcy5fYnVmZmVyUmVzb3VyY2UgPSB0cnVlO1xuICAgIC8qKlxuICAgICAqIEhhcyB0aGUgQnVmZmVyIHJlc291cmNlIGJlZW4gZGVzdHJveWVkP1xuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5idWZmZXIgPSBidWZmZXI7XG4gICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQgfCAwO1xuICAgIHRoaXMuc2l6ZSA9IHNpemU7XG4gICAgdGhpcy5idWZmZXIub24oXCJjaGFuZ2VcIiwgdGhpcy5vbkJ1ZmZlckNoYW5nZSwgdGhpcyk7XG4gIH1cbiAgb25CdWZmZXJDaGFuZ2UoKSB7XG4gICAgdGhpcy5fcmVzb3VyY2VJZCA9IHVpZChcInJlc291cmNlXCIpO1xuICAgIHRoaXMuZW1pdChcImNoYW5nZVwiLCB0aGlzKTtcbiAgfVxuICAvKipcbiAgICogRGVzdHJveXMgdGhpcyByZXNvdXJjZS4gTWFrZSBzdXJlIHRoZSB1bmRlcmx5aW5nIGJ1ZmZlciBpcyBub3QgdXNlZCBhbnl3aGVyZSBlbHNlXG4gICAqIGlmIHlvdSB3YW50IHRvIGRlc3Ryb3kgaXQgYXMgd2VsbCwgb3IgY29kZSB3aWxsIGV4cGxvZGVcbiAgICogQHBhcmFtIGRlc3Ryb3lCdWZmZXIgLSBTaG91bGQgdGhlIHVuZGVybHlpbmcgYnVmZmVyIGJlIGRlc3Ryb3llZCBhcyB3ZWxsP1xuICAgKi9cbiAgZGVzdHJveShkZXN0cm95QnVmZmVyID0gZmFsc2UpIHtcbiAgICB0aGlzLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgaWYgKGRlc3Ryb3lCdWZmZXIpIHtcbiAgICAgIHRoaXMuYnVmZmVyLmRlc3Ryb3koKTtcbiAgICB9XG4gICAgdGhpcy5lbWl0KFwiY2hhbmdlXCIsIHRoaXMpO1xuICAgIHRoaXMuYnVmZmVyID0gbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgeyBCdWZmZXJSZXNvdXJjZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QnVmZmVyUmVzb3VyY2UubWpzLm1hcFxuIiwiaW1wb3J0IHsgdWlkIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvZGF0YS91aWQubWpzJztcbmltcG9ydCB7IFRleHR1cmVTb3VyY2UgfSBmcm9tICcuLi90ZXh0dXJlL3NvdXJjZXMvVGV4dHVyZVNvdXJjZS5tanMnO1xuaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gJy4uL3RleHR1cmUvVGV4dHVyZS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNvbnN0IF9SZW5kZXJUYXJnZXQgPSBjbGFzcyBfUmVuZGVyVGFyZ2V0IHtcbiAgLyoqXG4gICAqIEBwYXJhbSBbZGVzY3JpcHRvcl0gLSBPcHRpb25zIGZvciBjcmVhdGluZyBhIHJlbmRlciB0YXJnZXQuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihkZXNjcmlwdG9yID0ge30pIHtcbiAgICB0aGlzLnVpZCA9IHVpZChcInJlbmRlclRhcmdldFwiKTtcbiAgICAvKipcbiAgICAgKiBBbiBhcnJheSBvZiB0ZXh0dXJlcyB0aGF0IGNhbiBiZSB3cml0dGVuIHRvIGJ5IHRoZSBHUFUgLSBtb3N0bHkgdGhpcyBoYXMgb25lIHRleHR1cmUgaW4gUGl4aSwgYnV0IHlvdSBjb3VsZFxuICAgICAqIHdyaXRlIHRvIG11bHRpcGxlIGlmIHJlcXVpcmVkISAoZWcgZGVmZXJyZWQgbGlnaHRpbmcpXG4gICAgICovXG4gICAgdGhpcy5jb2xvclRleHR1cmVzID0gW107XG4gICAgdGhpcy5kaXJ0eUlkID0gMDtcbiAgICB0aGlzLmlzUm9vdCA9IGZhbHNlO1xuICAgIHRoaXMuX3NpemUgPSBuZXcgRmxvYXQzMkFycmF5KDIpO1xuICAgIC8qKiBpZiB0cnVlLCB0aGVuIHdoZW4gdGhlIHJlbmRlciB0YXJnZXQgaXMgZGVzdHJveWVkLCBpdCB3aWxsIGRlc3Ryb3kgYWxsIHRoZSB0ZXh0dXJlcyB0aGF0IHdlcmUgY3JlYXRlZCBmb3IgaXQuICovXG4gICAgdGhpcy5fbWFuYWdlZENvbG9yVGV4dHVyZXMgPSBmYWxzZTtcbiAgICBkZXNjcmlwdG9yID0geyAuLi5fUmVuZGVyVGFyZ2V0LmRlZmF1bHRPcHRpb25zLCAuLi5kZXNjcmlwdG9yIH07XG4gICAgdGhpcy5zdGVuY2lsID0gZGVzY3JpcHRvci5zdGVuY2lsO1xuICAgIHRoaXMuZGVwdGggPSBkZXNjcmlwdG9yLmRlcHRoO1xuICAgIHRoaXMuaXNSb290ID0gZGVzY3JpcHRvci5pc1Jvb3Q7XG4gICAgaWYgKHR5cGVvZiBkZXNjcmlwdG9yLmNvbG9yVGV4dHVyZXMgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHRoaXMuX21hbmFnZWRDb2xvclRleHR1cmVzID0gdHJ1ZTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVzY3JpcHRvci5jb2xvclRleHR1cmVzOyBpKyspIHtcbiAgICAgICAgdGhpcy5jb2xvclRleHR1cmVzLnB1c2goXG4gICAgICAgICAgbmV3IFRleHR1cmVTb3VyY2Uoe1xuICAgICAgICAgICAgd2lkdGg6IGRlc2NyaXB0b3Iud2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IGRlc2NyaXB0b3IuaGVpZ2h0LFxuICAgICAgICAgICAgcmVzb2x1dGlvbjogZGVzY3JpcHRvci5yZXNvbHV0aW9uLFxuICAgICAgICAgICAgYW50aWFsaWFzOiBkZXNjcmlwdG9yLmFudGlhbGlhc1xuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY29sb3JUZXh0dXJlcyA9IFsuLi5kZXNjcmlwdG9yLmNvbG9yVGV4dHVyZXMubWFwKCh0ZXh0dXJlKSA9PiB0ZXh0dXJlLnNvdXJjZSldO1xuICAgICAgY29uc3QgY29sb3JTb3VyY2UgPSB0aGlzLmNvbG9yVGV4dHVyZS5zb3VyY2U7XG4gICAgICB0aGlzLnJlc2l6ZShjb2xvclNvdXJjZS53aWR0aCwgY29sb3JTb3VyY2UuaGVpZ2h0LCBjb2xvclNvdXJjZS5fcmVzb2x1dGlvbik7XG4gICAgfVxuICAgIHRoaXMuY29sb3JUZXh0dXJlLnNvdXJjZS5vbihcInJlc2l6ZVwiLCB0aGlzLm9uU291cmNlUmVzaXplLCB0aGlzKTtcbiAgICBpZiAoZGVzY3JpcHRvci5kZXB0aFN0ZW5jaWxUZXh0dXJlIHx8IHRoaXMuc3RlbmNpbCkge1xuICAgICAgaWYgKGRlc2NyaXB0b3IuZGVwdGhTdGVuY2lsVGV4dHVyZSBpbnN0YW5jZW9mIFRleHR1cmUgfHwgZGVzY3JpcHRvci5kZXB0aFN0ZW5jaWxUZXh0dXJlIGluc3RhbmNlb2YgVGV4dHVyZVNvdXJjZSkge1xuICAgICAgICB0aGlzLmRlcHRoU3RlbmNpbFRleHR1cmUgPSBkZXNjcmlwdG9yLmRlcHRoU3RlbmNpbFRleHR1cmUuc291cmNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5lbnN1cmVEZXB0aFN0ZW5jaWxUZXh0dXJlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGdldCBzaXplKCkge1xuICAgIGNvbnN0IF9zaXplID0gdGhpcy5fc2l6ZTtcbiAgICBfc2l6ZVswXSA9IHRoaXMucGl4ZWxXaWR0aDtcbiAgICBfc2l6ZVsxXSA9IHRoaXMucGl4ZWxIZWlnaHQ7XG4gICAgcmV0dXJuIF9zaXplO1xuICB9XG4gIGdldCB3aWR0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5jb2xvclRleHR1cmUuc291cmNlLndpZHRoO1xuICB9XG4gIGdldCBoZWlnaHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29sb3JUZXh0dXJlLnNvdXJjZS5oZWlnaHQ7XG4gIH1cbiAgZ2V0IHBpeGVsV2lkdGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29sb3JUZXh0dXJlLnNvdXJjZS5waXhlbFdpZHRoO1xuICB9XG4gIGdldCBwaXhlbEhlaWdodCgpIHtcbiAgICByZXR1cm4gdGhpcy5jb2xvclRleHR1cmUuc291cmNlLnBpeGVsSGVpZ2h0O1xuICB9XG4gIGdldCByZXNvbHV0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmNvbG9yVGV4dHVyZS5zb3VyY2UuX3Jlc29sdXRpb247XG4gIH1cbiAgZ2V0IGNvbG9yVGV4dHVyZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb2xvclRleHR1cmVzWzBdO1xuICB9XG4gIG9uU291cmNlUmVzaXplKHNvdXJjZSkge1xuICAgIHRoaXMucmVzaXplKHNvdXJjZS53aWR0aCwgc291cmNlLmhlaWdodCwgc291cmNlLl9yZXNvbHV0aW9uLCB0cnVlKTtcbiAgfVxuICAvKipcbiAgICogVGhpcyB3aWxsIGVuc3VyZSBhIGRlcHRoU3RlbmNpbCB0ZXh0dXJlIGlzIGNyZWF0ZWQgZm9yIHRoaXMgcmVuZGVyIHRhcmdldC5cbiAgICogTW9zdCBsaWtlbHkgY2FsbGVkIGJ5IHRoZSBtYXNrIHN5c3RlbSB0byBtYWtlIHN1cmUgd2UgaGF2ZSBzdGVuY2lsIGJ1ZmZlciBhZGRlZC5cbiAgICogQGludGVybmFsXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGVuc3VyZURlcHRoU3RlbmNpbFRleHR1cmUoKSB7XG4gICAgaWYgKCF0aGlzLmRlcHRoU3RlbmNpbFRleHR1cmUpIHtcbiAgICAgIHRoaXMuZGVwdGhTdGVuY2lsVGV4dHVyZSA9IG5ldyBUZXh0dXJlU291cmNlKHtcbiAgICAgICAgd2lkdGg6IHRoaXMud2lkdGgsXG4gICAgICAgIGhlaWdodDogdGhpcy5oZWlnaHQsXG4gICAgICAgIHJlc29sdXRpb246IHRoaXMucmVzb2x1dGlvbixcbiAgICAgICAgZm9ybWF0OiBcImRlcHRoMjRwbHVzLXN0ZW5jaWw4XCIsXG4gICAgICAgIGF1dG9HZW5lcmF0ZU1pcG1hcHM6IGZhbHNlLFxuICAgICAgICBhbnRpYWxpYXM6IGZhbHNlLFxuICAgICAgICBtaXBMZXZlbENvdW50OiAxXG4gICAgICAgIC8vIHNhbXBsZUNvdW50OiBoYW5kbGVkIGJ5IHRoZSByZW5kZXIgdGFyZ2V0IHN5c3RlbS4uXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgcmVzaXplKHdpZHRoLCBoZWlnaHQsIHJlc29sdXRpb24gPSB0aGlzLnJlc29sdXRpb24sIHNraXBDb2xvclRleHR1cmUgPSBmYWxzZSkge1xuICAgIHRoaXMuZGlydHlJZCsrO1xuICAgIHRoaXMuY29sb3JUZXh0dXJlcy5mb3JFYWNoKChjb2xvclRleHR1cmUsIGkpID0+IHtcbiAgICAgIGlmIChza2lwQ29sb3JUZXh0dXJlICYmIGkgPT09IDApXG4gICAgICAgIHJldHVybjtcbiAgICAgIGNvbG9yVGV4dHVyZS5zb3VyY2UucmVzaXplKHdpZHRoLCBoZWlnaHQsIHJlc29sdXRpb24pO1xuICAgIH0pO1xuICAgIGlmICh0aGlzLmRlcHRoU3RlbmNpbFRleHR1cmUpIHtcbiAgICAgIHRoaXMuZGVwdGhTdGVuY2lsVGV4dHVyZS5zb3VyY2UucmVzaXplKHdpZHRoLCBoZWlnaHQsIHJlc29sdXRpb24pO1xuICAgIH1cbiAgfVxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuY29sb3JUZXh0dXJlLnNvdXJjZS5vZmYoXCJyZXNpemVcIiwgdGhpcy5vblNvdXJjZVJlc2l6ZSwgdGhpcyk7XG4gICAgaWYgKHRoaXMuX21hbmFnZWRDb2xvclRleHR1cmVzKSB7XG4gICAgICB0aGlzLmNvbG9yVGV4dHVyZXMuZm9yRWFjaCgodGV4dHVyZSkgPT4ge1xuICAgICAgICB0ZXh0dXJlLmRlc3Ryb3koKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAodGhpcy5kZXB0aFN0ZW5jaWxUZXh0dXJlKSB7XG4gICAgICB0aGlzLmRlcHRoU3RlbmNpbFRleHR1cmUuZGVzdHJveSgpO1xuICAgICAgZGVsZXRlIHRoaXMuZGVwdGhTdGVuY2lsVGV4dHVyZTtcbiAgICB9XG4gIH1cbn07XG4vKiogVGhlIGRlZmF1bHQgb3B0aW9ucyBmb3IgYSByZW5kZXIgdGFyZ2V0ICovXG5fUmVuZGVyVGFyZ2V0LmRlZmF1bHRPcHRpb25zID0ge1xuICAvKiogdGhlIHdpZHRoIG9mIHRoZSBSZW5kZXJUYXJnZXQgKi9cbiAgd2lkdGg6IDAsXG4gIC8qKiB0aGUgaGVpZ2h0IG9mIHRoZSBSZW5kZXJUYXJnZXQgKi9cbiAgaGVpZ2h0OiAwLFxuICAvKiogdGhlIHJlc29sdXRpb24gb2YgdGhlIFJlbmRlclRhcmdldCAqL1xuICByZXNvbHV0aW9uOiAxLFxuICAvKiogYW4gYXJyYXkgb2YgdGV4dHVyZXMsIG9yIGEgbnVtYmVyIGluZGljYXRpbmcgaG93IG1hbnkgY29sb3IgdGV4dHVyZXMgdGhlcmUgc2hvdWxkIGJlICovXG4gIGNvbG9yVGV4dHVyZXM6IDEsXG4gIC8qKiBzaG91bGQgdGhpcyByZW5kZXIgdGFyZ2V0IGhhdmUgYSBzdGVuY2lsIGJ1ZmZlcj8gKi9cbiAgc3RlbmNpbDogZmFsc2UsXG4gIC8qKiBzaG91bGQgdGhpcyByZW5kZXIgdGFyZ2V0IGhhdmUgYSBkZXB0aCBidWZmZXI/ICovXG4gIGRlcHRoOiBmYWxzZSxcbiAgLyoqIHNob3VsZCB0aGlzIHJlbmRlciB0YXJnZXQgYmUgYW50aWFsaWFzZWQ/ICovXG4gIGFudGlhbGlhczogZmFsc2UsXG4gIC8vIHNhdmUgb24gcGVyZiBieSBkZWZhdWx0IVxuICAvKiogaXMgdGhpcyBhIHJvb3QgZWxlbWVudCwgdHJ1ZSBpZiB0aGlzIGlzIGdsIGNvbnRleHQgb3duZXJzIHJlbmRlciB0YXJnZXQgKi9cbiAgaXNSb290OiBmYWxzZVxufTtcbmxldCBSZW5kZXJUYXJnZXQgPSBfUmVuZGVyVGFyZ2V0O1xuXG5leHBvcnQgeyBSZW5kZXJUYXJnZXQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJlbmRlclRhcmdldC5tanMubWFwXG4iLCJpbXBvcnQgeyBNYXRyaXggfSBmcm9tICcuLi8uLi8uLi8uLi9tYXRocy9tYXRyaXgvTWF0cml4Lm1qcyc7XG5pbXBvcnQgeyBSZWN0YW5nbGUgfSBmcm9tICcuLi8uLi8uLi8uLi9tYXRocy9zaGFwZXMvUmVjdGFuZ2xlLm1qcyc7XG5pbXBvcnQgeyBDTEVBUiB9IGZyb20gJy4uLy4uL2dsL2NvbnN0Lm1qcyc7XG5pbXBvcnQgeyBjYWxjdWxhdGVQcm9qZWN0aW9uIH0gZnJvbSAnLi4vLi4vZ3B1L3JlbmRlclRhcmdldC9jYWxjdWxhdGVQcm9qZWN0aW9uLm1qcyc7XG5pbXBvcnQgeyBTeXN0ZW1SdW5uZXIgfSBmcm9tICcuLi9zeXN0ZW0vU3lzdGVtUnVubmVyLm1qcyc7XG5pbXBvcnQgeyBDYW52YXNTb3VyY2UgfSBmcm9tICcuLi90ZXh0dXJlL3NvdXJjZXMvQ2FudmFzU291cmNlLm1qcyc7XG5pbXBvcnQgeyBUZXh0dXJlU291cmNlIH0gZnJvbSAnLi4vdGV4dHVyZS9zb3VyY2VzL1RleHR1cmVTb3VyY2UubWpzJztcbmltcG9ydCB7IFRleHR1cmUgfSBmcm9tICcuLi90ZXh0dXJlL1RleHR1cmUubWpzJztcbmltcG9ydCB7IGdldENhbnZhc1RleHR1cmUgfSBmcm9tICcuLi90ZXh0dXJlL3V0aWxzL2dldENhbnZhc1RleHR1cmUubWpzJztcbmltcG9ydCB7IGlzUmVuZGVyaW5nVG9TY3JlZW4gfSBmcm9tICcuL2lzUmVuZGVyaW5nVG9TY3JlZW4ubWpzJztcbmltcG9ydCB7IFJlbmRlclRhcmdldCB9IGZyb20gJy4vUmVuZGVyVGFyZ2V0Lm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY2xhc3MgUmVuZGVyVGFyZ2V0U3lzdGVtIHtcbiAgY29uc3RydWN0b3IocmVuZGVyZXIpIHtcbiAgICAvKiogVGhpcyBpcyB0aGUgcm9vdCB2aWV3cG9ydCBmb3IgdGhlIHJlbmRlciBwYXNzKi9cbiAgICB0aGlzLnJvb3RWaWV3UG9ydCA9IG5ldyBSZWN0YW5nbGUoKTtcbiAgICAvKiogdGhlIGN1cnJlbnQgdmlld3BvcnQgdGhhdCB0aGUgZ3B1IGlzIHVzaW5nICovXG4gICAgdGhpcy52aWV3cG9ydCA9IG5ldyBSZWN0YW5nbGUoKTtcbiAgICAvKipcbiAgICAgKiBhIHJ1bm5lciB0aGF0IGxldHMgc3lzdGVtcyBrbm93IGlmIHRoZSBhY3RpdmUgcmVuZGVyIHRhcmdldCBoYXMgY2hhbmdlZC5cbiAgICAgKiBFZyB0aGUgU3RlbmNpbCBTeXN0ZW0gbmVlZHMgdG8ga25vdyBzbyBpdCBjYW4gbWFuYWdlIHRoZSBzdGVuY2lsIGJ1ZmZlclxuICAgICAqL1xuICAgIHRoaXMub25SZW5kZXJUYXJnZXRDaGFuZ2UgPSBuZXcgU3lzdGVtUnVubmVyKFwib25SZW5kZXJUYXJnZXRDaGFuZ2VcIik7XG4gICAgLyoqIHRoZSBwcm9qZWN0aW9uIG1hdHJpeCB0aGF0IGlzIHVzZWQgYnkgdGhlIHNoYWRlcnMgYmFzZWQgb24gdGhlIGFjdGl2ZSByZW5kZXIgdGFyZ2V0IGFuZCB0aGUgdmlld3BvcnQgKi9cbiAgICB0aGlzLnByb2plY3Rpb25NYXRyaXggPSBuZXcgTWF0cml4KCk7XG4gICAgLyoqIHRoZSBkZWZhdWx0IGNsZWFyIGNvbG9yIGZvciByZW5kZXIgdGFyZ2V0cyAqL1xuICAgIHRoaXMuZGVmYXVsdENsZWFyQ29sb3IgPSBbMCwgMCwgMCwgMF07XG4gICAgLyoqXG4gICAgICogYSBoYXNoIHRoYXQgc3RvcmVzIHRoZSByZW5kZXIgdGFyZ2V0IGZvciBhIGdpdmVuIHJlbmRlciBzdXJmYWNlLiBXaGVuIHlvdSBwYXNzIGluIGEgdGV4dHVyZSBzb3VyY2UsXG4gICAgICogYSByZW5kZXIgdGFyZ2V0IGlzIGNyZWF0ZWQgZm9yIGl0LiBUaGlzIG1hcCBzdG9yZXMgYW5kIG1ha2VzIGl0IGVhc3kgdG8gcmV0cmlldmUgdGhlIHJlbmRlciB0YXJnZXRcbiAgICAgKi9cbiAgICB0aGlzLl9yZW5kZXJTdXJmYWNlVG9SZW5kZXJUYXJnZXRIYXNoID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICAvKiogQSBoYXNoIHRoYXQgc3RvcmVzIGEgZ3B1IHJlbmRlciB0YXJnZXQgZm9yIGEgZ2l2ZW4gcmVuZGVyIHRhcmdldC4gKi9cbiAgICB0aGlzLl9ncHVSZW5kZXJUYXJnZXRIYXNoID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgLyoqXG4gICAgICogQSBzdGFjayB0aGF0IHN0b3JlcyB0aGUgcmVuZGVyIHRhcmdldCBhbmQgZnJhbWUgdGhhdCBpcyBjdXJyZW50bHkgYmVpbmcgcmVuZGVyZWQgdG8uXG4gICAgICogV2hlbiBwdXNoIGlzIGNhbGxlZCwgdGhlIGN1cnJlbnQgcmVuZGVyIHRhcmdldCBpcyBzdG9yZWQgaW4gdGhpcyBzdGFjay5cbiAgICAgKiBXaGVuIHBvcCBpcyBjYWxsZWQsIHRoZSBwcmV2aW91cyByZW5kZXIgdGFyZ2V0IGlzIHJlc3RvcmVkLlxuICAgICAqL1xuICAgIHRoaXMuX3JlbmRlclRhcmdldFN0YWNrID0gW107XG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgfVxuICAvKiogY2FsbGVkIHdoZW4gZGV2IHdhbnRzIHRvIGZpbmlzaCBhIHJlbmRlciBwYXNzICovXG4gIGZpbmlzaFJlbmRlclBhc3MoKSB7XG4gICAgdGhpcy5hZGFwdG9yLmZpbmlzaFJlbmRlclBhc3ModGhpcy5yZW5kZXJUYXJnZXQpO1xuICB9XG4gIC8qKlxuICAgKiBjYWxsZWQgd2hlbiB0aGUgcmVuZGVyZXIgc3RhcnRzIHRvIHJlbmRlciBhIHNjZW5lLlxuICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgKiBAcGFyYW0gb3B0aW9ucy50YXJnZXQgLSB0aGUgcmVuZGVyIHRhcmdldCB0byByZW5kZXIgdG9cbiAgICogQHBhcmFtIG9wdGlvbnMuY2xlYXIgLSB0aGUgY2xlYXIgbW9kZSB0byB1c2UuIENhbiBiZSB0cnVlIG9yIGEgQ0xFQVIgbnVtYmVyICdDT0xPUiB8IERFUFRIIHwgU1RFTkNJTCcgMGIxMTFcbiAgICogQHBhcmFtIG9wdGlvbnMuY2xlYXJDb2xvciAtIHRoZSBjb2xvciB0byBjbGVhciB0b1xuICAgKiBAcGFyYW0gb3B0aW9ucy5mcmFtZSAtIHRoZSBmcmFtZSB0byByZW5kZXIgdG9cbiAgICovXG4gIHJlbmRlclN0YXJ0KHtcbiAgICB0YXJnZXQsXG4gICAgY2xlYXIsXG4gICAgY2xlYXJDb2xvcixcbiAgICBmcmFtZVxuICB9KSB7XG4gICAgdGhpcy5fcmVuZGVyVGFyZ2V0U3RhY2subGVuZ3RoID0gMDtcbiAgICB0aGlzLnB1c2goXG4gICAgICB0YXJnZXQsXG4gICAgICBjbGVhcixcbiAgICAgIGNsZWFyQ29sb3IsXG4gICAgICBmcmFtZVxuICAgICk7XG4gICAgdGhpcy5yb290Vmlld1BvcnQuY29weUZyb20odGhpcy52aWV3cG9ydCk7XG4gICAgdGhpcy5yb290UmVuZGVyVGFyZ2V0ID0gdGhpcy5yZW5kZXJUYXJnZXQ7XG4gICAgdGhpcy5yZW5kZXJpbmdUb1NjcmVlbiA9IGlzUmVuZGVyaW5nVG9TY3JlZW4odGhpcy5yb290UmVuZGVyVGFyZ2V0KTtcbiAgfVxuICAvKipcbiAgICogQmluZGluZyBhIHJlbmRlciBzdXJmYWNlISBUaGlzIGlzIHRoZSBtYWluIGZ1bmN0aW9uIG9mIHRoZSByZW5kZXIgdGFyZ2V0IHN5c3RlbS5cbiAgICogSXQgd2lsbCB0YWtlIHRoZSBSZW5kZXJTdXJmYWNlICh3aGljaCBjYW4gYmUgYSB0ZXh0dXJlLCBjYW52YXMsIG9yIHJlbmRlciB0YXJnZXQpIGFuZCBiaW5kIGl0IHRvIHRoZSByZW5kZXJlci5cbiAgICogT25jZSBib3VuZCBhbGwgZHJhdyBjYWxscyB3aWxsIGJlIHJlbmRlcmVkIHRvIHRoZSByZW5kZXIgc3VyZmFjZS5cbiAgICpcbiAgICogSWYgYSBmcmFtZSBpcyBub3QgcHJvdmlkZSBhbmQgdGhlIHJlbmRlciBzdXJmYWNlIGlzIGEgdGV4dHVyZSwgdGhlIGZyYW1lIG9mIHRoZSB0ZXh0dXJlIHdpbGwgYmUgdXNlZC5cbiAgICogQHBhcmFtIHJlbmRlclN1cmZhY2UgLSB0aGUgcmVuZGVyIHN1cmZhY2UgdG8gYmluZFxuICAgKiBAcGFyYW0gY2xlYXIgLSB0aGUgY2xlYXIgbW9kZSB0byB1c2UuIENhbiBiZSB0cnVlIG9yIGEgQ0xFQVIgbnVtYmVyICdDT0xPUiB8IERFUFRIIHwgU1RFTkNJTCcgMGIxMTFcbiAgICogQHBhcmFtIGNsZWFyQ29sb3IgLSB0aGUgY29sb3IgdG8gY2xlYXIgdG9cbiAgICogQHBhcmFtIGZyYW1lIC0gdGhlIGZyYW1lIHRvIHJlbmRlciB0b1xuICAgKiBAcmV0dXJucyB0aGUgcmVuZGVyIHRhcmdldCB0aGF0IHdhcyBib3VuZFxuICAgKi9cbiAgYmluZChyZW5kZXJTdXJmYWNlLCBjbGVhciA9IHRydWUsIGNsZWFyQ29sb3IsIGZyYW1lKSB7XG4gICAgY29uc3QgcmVuZGVyVGFyZ2V0ID0gdGhpcy5nZXRSZW5kZXJUYXJnZXQocmVuZGVyU3VyZmFjZSk7XG4gICAgY29uc3QgZGlkQ2hhbmdlID0gdGhpcy5yZW5kZXJUYXJnZXQgIT09IHJlbmRlclRhcmdldDtcbiAgICB0aGlzLnJlbmRlclRhcmdldCA9IHJlbmRlclRhcmdldDtcbiAgICB0aGlzLnJlbmRlclN1cmZhY2UgPSByZW5kZXJTdXJmYWNlO1xuICAgIGNvbnN0IGdwdVJlbmRlclRhcmdldCA9IHRoaXMuZ2V0R3B1UmVuZGVyVGFyZ2V0KHJlbmRlclRhcmdldCk7XG4gICAgaWYgKHJlbmRlclRhcmdldC5waXhlbFdpZHRoICE9PSBncHVSZW5kZXJUYXJnZXQud2lkdGggfHwgcmVuZGVyVGFyZ2V0LnBpeGVsSGVpZ2h0ICE9PSBncHVSZW5kZXJUYXJnZXQuaGVpZ2h0KSB7XG4gICAgICB0aGlzLmFkYXB0b3IucmVzaXplR3B1UmVuZGVyVGFyZ2V0KHJlbmRlclRhcmdldCk7XG4gICAgICBncHVSZW5kZXJUYXJnZXQud2lkdGggPSByZW5kZXJUYXJnZXQucGl4ZWxXaWR0aDtcbiAgICAgIGdwdVJlbmRlclRhcmdldC5oZWlnaHQgPSByZW5kZXJUYXJnZXQucGl4ZWxIZWlnaHQ7XG4gICAgfVxuICAgIGNvbnN0IHNvdXJjZSA9IHJlbmRlclRhcmdldC5jb2xvclRleHR1cmU7XG4gICAgY29uc3Qgdmlld3BvcnQgPSB0aGlzLnZpZXdwb3J0O1xuICAgIGNvbnN0IHBpeGVsV2lkdGggPSBzb3VyY2UucGl4ZWxXaWR0aDtcbiAgICBjb25zdCBwaXhlbEhlaWdodCA9IHNvdXJjZS5waXhlbEhlaWdodDtcbiAgICBpZiAoIWZyYW1lICYmIHJlbmRlclN1cmZhY2UgaW5zdGFuY2VvZiBUZXh0dXJlKSB7XG4gICAgICBmcmFtZSA9IHJlbmRlclN1cmZhY2UuZnJhbWU7XG4gICAgfVxuICAgIGlmIChmcmFtZSkge1xuICAgICAgY29uc3QgcmVzb2x1dGlvbiA9IHNvdXJjZS5fcmVzb2x1dGlvbjtcbiAgICAgIHZpZXdwb3J0LnggPSBmcmFtZS54ICogcmVzb2x1dGlvbiArIDAuNSB8IDA7XG4gICAgICB2aWV3cG9ydC55ID0gZnJhbWUueSAqIHJlc29sdXRpb24gKyAwLjUgfCAwO1xuICAgICAgdmlld3BvcnQud2lkdGggPSBmcmFtZS53aWR0aCAqIHJlc29sdXRpb24gKyAwLjUgfCAwO1xuICAgICAgdmlld3BvcnQuaGVpZ2h0ID0gZnJhbWUuaGVpZ2h0ICogcmVzb2x1dGlvbiArIDAuNSB8IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZpZXdwb3J0LnggPSAwO1xuICAgICAgdmlld3BvcnQueSA9IDA7XG4gICAgICB2aWV3cG9ydC53aWR0aCA9IHBpeGVsV2lkdGg7XG4gICAgICB2aWV3cG9ydC5oZWlnaHQgPSBwaXhlbEhlaWdodDtcbiAgICB9XG4gICAgY2FsY3VsYXRlUHJvamVjdGlvbihcbiAgICAgIHRoaXMucHJvamVjdGlvbk1hdHJpeCxcbiAgICAgIDAsXG4gICAgICAwLFxuICAgICAgdmlld3BvcnQud2lkdGggLyBzb3VyY2UucmVzb2x1dGlvbixcbiAgICAgIHZpZXdwb3J0LmhlaWdodCAvIHNvdXJjZS5yZXNvbHV0aW9uLFxuICAgICAgIXJlbmRlclRhcmdldC5pc1Jvb3RcbiAgICApO1xuICAgIHRoaXMuYWRhcHRvci5zdGFydFJlbmRlclBhc3MocmVuZGVyVGFyZ2V0LCBjbGVhciwgY2xlYXJDb2xvciwgdmlld3BvcnQpO1xuICAgIGlmIChkaWRDaGFuZ2UpIHtcbiAgICAgIHRoaXMub25SZW5kZXJUYXJnZXRDaGFuZ2UuZW1pdChyZW5kZXJUYXJnZXQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVuZGVyVGFyZ2V0O1xuICB9XG4gIGNsZWFyKHRhcmdldCwgY2xlYXIgPSBDTEVBUi5BTEwsIGNsZWFyQ29sb3IpIHtcbiAgICBpZiAoIWNsZWFyKVxuICAgICAgcmV0dXJuO1xuICAgIGlmICh0YXJnZXQpIHtcbiAgICAgIHRhcmdldCA9IHRoaXMuZ2V0UmVuZGVyVGFyZ2V0KHRhcmdldCk7XG4gICAgfVxuICAgIHRoaXMuYWRhcHRvci5jbGVhcihcbiAgICAgIHRhcmdldCB8fCB0aGlzLnJlbmRlclRhcmdldCxcbiAgICAgIGNsZWFyLFxuICAgICAgY2xlYXJDb2xvcixcbiAgICAgIHRoaXMudmlld3BvcnRcbiAgICApO1xuICB9XG4gIGNvbnRleHRDaGFuZ2UoKSB7XG4gICAgdGhpcy5fZ3B1UmVuZGVyVGFyZ2V0SGFzaCA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9XG4gIC8qKlxuICAgKiBQdXNoIGEgcmVuZGVyIHN1cmZhY2UgdG8gdGhlIHJlbmRlcmVyLiBUaGlzIHdpbGwgYmluZCB0aGUgcmVuZGVyIHN1cmZhY2UgdG8gdGhlIHJlbmRlcmVyLFxuICAgKiBAcGFyYW0gcmVuZGVyU3VyZmFjZSAtIHRoZSByZW5kZXIgc3VyZmFjZSB0byBwdXNoXG4gICAqIEBwYXJhbSBjbGVhciAtIHRoZSBjbGVhciBtb2RlIHRvIHVzZS4gQ2FuIGJlIHRydWUgb3IgYSBDTEVBUiBudW1iZXIgJ0NPTE9SIHwgREVQVEggfCBTVEVOQ0lMJyAwYjExMVxuICAgKiBAcGFyYW0gY2xlYXJDb2xvciAtIHRoZSBjb2xvciB0byBjbGVhciB0b1xuICAgKiBAcGFyYW0gZnJhbWUgLSB0aGUgZnJhbWUgdG8gdXNlIHdoZW4gcmVuZGVyaW5nIHRvIHRoZSByZW5kZXIgc3VyZmFjZVxuICAgKi9cbiAgcHVzaChyZW5kZXJTdXJmYWNlLCBjbGVhciA9IENMRUFSLkFMTCwgY2xlYXJDb2xvciwgZnJhbWUpIHtcbiAgICBjb25zdCByZW5kZXJUYXJnZXQgPSB0aGlzLmJpbmQocmVuZGVyU3VyZmFjZSwgY2xlYXIsIGNsZWFyQ29sb3IsIGZyYW1lKTtcbiAgICB0aGlzLl9yZW5kZXJUYXJnZXRTdGFjay5wdXNoKHtcbiAgICAgIHJlbmRlclRhcmdldCxcbiAgICAgIGZyYW1lXG4gICAgfSk7XG4gICAgcmV0dXJuIHJlbmRlclRhcmdldDtcbiAgfVxuICAvKiogUG9wcyB0aGUgY3VycmVudCByZW5kZXIgdGFyZ2V0IGZyb20gdGhlIHJlbmRlcmVyIGFuZCByZXN0b3JlcyB0aGUgcHJldmlvdXMgcmVuZGVyIHRhcmdldC4gKi9cbiAgcG9wKCkge1xuICAgIHRoaXMuX3JlbmRlclRhcmdldFN0YWNrLnBvcCgpO1xuICAgIGNvbnN0IGN1cnJlbnRSZW5kZXJUYXJnZXREYXRhID0gdGhpcy5fcmVuZGVyVGFyZ2V0U3RhY2tbdGhpcy5fcmVuZGVyVGFyZ2V0U3RhY2subGVuZ3RoIC0gMV07XG4gICAgdGhpcy5iaW5kKGN1cnJlbnRSZW5kZXJUYXJnZXREYXRhLnJlbmRlclRhcmdldCwgZmFsc2UsIG51bGwsIGN1cnJlbnRSZW5kZXJUYXJnZXREYXRhLmZyYW1lKTtcbiAgfVxuICAvKipcbiAgICogR2V0cyB0aGUgcmVuZGVyIHRhcmdldCBmcm9tIHRoZSBwcm92aWRlIHJlbmRlciBzdXJmYWNlLiBFZyBpZiBpdHMgYSB0ZXh0dXJlLFxuICAgKiBpdCB3aWxsIHJldHVybiB0aGUgcmVuZGVyIHRhcmdldCBmb3IgdGhlIHRleHR1cmUuXG4gICAqIElmIGl0cyBhIHJlbmRlciB0YXJnZXQsIGl0IHdpbGwgcmV0dXJuIHRoZSBzYW1lIHJlbmRlciB0YXJnZXQuXG4gICAqIEBwYXJhbSByZW5kZXJTdXJmYWNlIC0gdGhlIHJlbmRlciBzdXJmYWNlIHRvIGdldCB0aGUgcmVuZGVyIHRhcmdldCBmb3JcbiAgICogQHJldHVybnMgdGhlIHJlbmRlciB0YXJnZXQgZm9yIHRoZSByZW5kZXIgc3VyZmFjZVxuICAgKi9cbiAgZ2V0UmVuZGVyVGFyZ2V0KHJlbmRlclN1cmZhY2UpIHtcbiAgICBpZiAocmVuZGVyU3VyZmFjZS5pc1RleHR1cmUpIHtcbiAgICAgIHJlbmRlclN1cmZhY2UgPSByZW5kZXJTdXJmYWNlLnNvdXJjZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3JlbmRlclN1cmZhY2VUb1JlbmRlclRhcmdldEhhc2guZ2V0KHJlbmRlclN1cmZhY2UpID8/IHRoaXMuX2luaXRSZW5kZXJUYXJnZXQocmVuZGVyU3VyZmFjZSk7XG4gIH1cbiAgLyoqXG4gICAqIENvcGllcyBhIHJlbmRlciBzdXJmYWNlIHRvIGFub3RoZXIgdGV4dHVyZVxuICAgKiBAcGFyYW0gc291cmNlUmVuZGVyU3VyZmFjZVRleHR1cmUgLSB0aGUgcmVuZGVyIHN1cmZhY2UgdG8gY29weSBmcm9tXG4gICAqIEBwYXJhbSBkZXN0aW5hdGlvblRleHR1cmUgLSB0aGUgdGV4dHVyZSB0byBjb3B5IHRvXG4gICAqIEBwYXJhbSBvcmlnaW5TcmMgLSB0aGUgb3JpZ2luIG9mIHRoZSBjb3B5XG4gICAqIEBwYXJhbSBvcmlnaW5TcmMueCAtIHRoZSB4IG9yaWdpbiBvZiB0aGUgY29weVxuICAgKiBAcGFyYW0gb3JpZ2luU3JjLnkgLSB0aGUgeSBvcmlnaW4gb2YgdGhlIGNvcHlcbiAgICogQHBhcmFtIHNpemUgLSB0aGUgc2l6ZSBvZiB0aGUgY29weVxuICAgKiBAcGFyYW0gc2l6ZS53aWR0aCAtIHRoZSB3aWR0aCBvZiB0aGUgY29weVxuICAgKiBAcGFyYW0gc2l6ZS5oZWlnaHQgLSB0aGUgaGVpZ2h0IG9mIHRoZSBjb3B5XG4gICAqIEBwYXJhbSBvcmlnaW5EZXN0IC0gdGhlIGRlc3RpbmF0aW9uIG9yaWdpbiAodG9wIGxlZnQgdG8gcGFzdGUgZnJvbSEpXG4gICAqIEBwYXJhbSBvcmlnaW5EZXN0LnggLSB0aGUgeCBvcmlnaW4gb2YgdGhlIHBhc3RlXG4gICAqIEBwYXJhbSBvcmlnaW5EZXN0LnkgLSB0aGUgeSBvcmlnaW4gb2YgdGhlIHBhc3RlXG4gICAqL1xuICBjb3B5VG9UZXh0dXJlKHNvdXJjZVJlbmRlclN1cmZhY2VUZXh0dXJlLCBkZXN0aW5hdGlvblRleHR1cmUsIG9yaWdpblNyYywgc2l6ZSwgb3JpZ2luRGVzdCkge1xuICAgIGlmIChvcmlnaW5TcmMueCA8IDApIHtcbiAgICAgIHNpemUud2lkdGggKz0gb3JpZ2luU3JjLng7XG4gICAgICBvcmlnaW5EZXN0LnggLT0gb3JpZ2luU3JjLng7XG4gICAgICBvcmlnaW5TcmMueCA9IDA7XG4gICAgfVxuICAgIGlmIChvcmlnaW5TcmMueSA8IDApIHtcbiAgICAgIHNpemUuaGVpZ2h0ICs9IG9yaWdpblNyYy55O1xuICAgICAgb3JpZ2luRGVzdC55IC09IG9yaWdpblNyYy55O1xuICAgICAgb3JpZ2luU3JjLnkgPSAwO1xuICAgIH1cbiAgICBjb25zdCB7IHBpeGVsV2lkdGgsIHBpeGVsSGVpZ2h0IH0gPSBzb3VyY2VSZW5kZXJTdXJmYWNlVGV4dHVyZTtcbiAgICBzaXplLndpZHRoID0gTWF0aC5taW4oc2l6ZS53aWR0aCwgcGl4ZWxXaWR0aCAtIG9yaWdpblNyYy54KTtcbiAgICBzaXplLmhlaWdodCA9IE1hdGgubWluKHNpemUuaGVpZ2h0LCBwaXhlbEhlaWdodCAtIG9yaWdpblNyYy55KTtcbiAgICByZXR1cm4gdGhpcy5hZGFwdG9yLmNvcHlUb1RleHR1cmUoXG4gICAgICBzb3VyY2VSZW5kZXJTdXJmYWNlVGV4dHVyZSxcbiAgICAgIGRlc3RpbmF0aW9uVGV4dHVyZSxcbiAgICAgIG9yaWdpblNyYyxcbiAgICAgIHNpemUsXG4gICAgICBvcmlnaW5EZXN0XG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogZW5zdXJlcyB0aGF0IHdlIGhhdmUgYSBkZXB0aCBzdGVuY2lsIGJ1ZmZlciBhdmFpbGFibGUgdG8gcmVuZGVyIHRvXG4gICAqIFRoaXMgaXMgdXNlZCBieSB0aGUgbWFzayBzeXN0ZW0gdG8gbWFrZSBzdXJlIHdlIGhhdmUgYSBzdGVuY2lsIGJ1ZmZlci5cbiAgICovXG4gIGVuc3VyZURlcHRoU3RlbmNpbCgpIHtcbiAgICBpZiAoIXRoaXMucmVuZGVyVGFyZ2V0LnN0ZW5jaWwpIHtcbiAgICAgIHRoaXMucmVuZGVyVGFyZ2V0LnN0ZW5jaWwgPSB0cnVlO1xuICAgICAgdGhpcy5hZGFwdG9yLnN0YXJ0UmVuZGVyUGFzcyh0aGlzLnJlbmRlclRhcmdldCwgZmFsc2UsIG51bGwsIHRoaXMudmlld3BvcnQpO1xuICAgIH1cbiAgfVxuICAvKiogbnVrZXMgdGhlIHJlbmRlciB0YXJnZXQgc3lzdGVtICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSBudWxsO1xuICAgIHRoaXMuX3JlbmRlclN1cmZhY2VUb1JlbmRlclRhcmdldEhhc2guZm9yRWFjaCgocmVuZGVyVGFyZ2V0LCBrZXkpID0+IHtcbiAgICAgIGlmIChyZW5kZXJUYXJnZXQgIT09IGtleSkge1xuICAgICAgICByZW5kZXJUYXJnZXQuZGVzdHJveSgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuX3JlbmRlclN1cmZhY2VUb1JlbmRlclRhcmdldEhhc2guY2xlYXIoKTtcbiAgICB0aGlzLl9ncHVSZW5kZXJUYXJnZXRIYXNoID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIH1cbiAgX2luaXRSZW5kZXJUYXJnZXQocmVuZGVyU3VyZmFjZSkge1xuICAgIGxldCByZW5kZXJUYXJnZXQgPSBudWxsO1xuICAgIGlmIChDYW52YXNTb3VyY2UudGVzdChyZW5kZXJTdXJmYWNlKSkge1xuICAgICAgcmVuZGVyU3VyZmFjZSA9IGdldENhbnZhc1RleHR1cmUocmVuZGVyU3VyZmFjZSkuc291cmNlO1xuICAgIH1cbiAgICBpZiAocmVuZGVyU3VyZmFjZSBpbnN0YW5jZW9mIFJlbmRlclRhcmdldCkge1xuICAgICAgcmVuZGVyVGFyZ2V0ID0gcmVuZGVyU3VyZmFjZTtcbiAgICB9IGVsc2UgaWYgKHJlbmRlclN1cmZhY2UgaW5zdGFuY2VvZiBUZXh0dXJlU291cmNlKSB7XG4gICAgICByZW5kZXJUYXJnZXQgPSBuZXcgUmVuZGVyVGFyZ2V0KHtcbiAgICAgICAgY29sb3JUZXh0dXJlczogW3JlbmRlclN1cmZhY2VdXG4gICAgICB9KTtcbiAgICAgIGlmIChDYW52YXNTb3VyY2UudGVzdChyZW5kZXJTdXJmYWNlLnNvdXJjZS5yZXNvdXJjZSkpIHtcbiAgICAgICAgcmVuZGVyVGFyZ2V0LmlzUm9vdCA9IHRydWU7XG4gICAgICB9XG4gICAgICByZW5kZXJTdXJmYWNlLm9uY2UoXCJkZXN0cm95XCIsICgpID0+IHtcbiAgICAgICAgcmVuZGVyVGFyZ2V0LmRlc3Ryb3koKTtcbiAgICAgICAgY29uc3QgZ3B1UmVuZGVyVGFyZ2V0ID0gdGhpcy5fZ3B1UmVuZGVyVGFyZ2V0SGFzaFtyZW5kZXJUYXJnZXQudWlkXTtcbiAgICAgICAgaWYgKGdwdVJlbmRlclRhcmdldCkge1xuICAgICAgICAgIHRoaXMuX2dwdVJlbmRlclRhcmdldEhhc2hbcmVuZGVyVGFyZ2V0LnVpZF0gPSBudWxsO1xuICAgICAgICAgIHRoaXMuYWRhcHRvci5kZXN0cm95R3B1UmVuZGVyVGFyZ2V0KGdwdVJlbmRlclRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLl9yZW5kZXJTdXJmYWNlVG9SZW5kZXJUYXJnZXRIYXNoLnNldChyZW5kZXJTdXJmYWNlLCByZW5kZXJUYXJnZXQpO1xuICAgIHJldHVybiByZW5kZXJUYXJnZXQ7XG4gIH1cbiAgZ2V0R3B1UmVuZGVyVGFyZ2V0KHJlbmRlclRhcmdldCkge1xuICAgIHJldHVybiB0aGlzLl9ncHVSZW5kZXJUYXJnZXRIYXNoW3JlbmRlclRhcmdldC51aWRdIHx8ICh0aGlzLl9ncHVSZW5kZXJUYXJnZXRIYXNoW3JlbmRlclRhcmdldC51aWRdID0gdGhpcy5hZGFwdG9yLmluaXRHcHVSZW5kZXJUYXJnZXQocmVuZGVyVGFyZ2V0KSk7XG4gIH1cbn1cblxuZXhwb3J0IHsgUmVuZGVyVGFyZ2V0U3lzdGVtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZW5kZXJUYXJnZXRTeXN0ZW0ubWpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBpc1JlbmRlcmluZ1RvU2NyZWVuKHJlbmRlclRhcmdldCkge1xuICBjb25zdCByZXNvdXJjZSA9IHJlbmRlclRhcmdldC5jb2xvclRleHR1cmUuc291cmNlLnJlc291cmNlO1xuICByZXR1cm4gZ2xvYmFsVGhpcy5IVE1MQ2FudmFzRWxlbWVudCAmJiByZXNvdXJjZSBpbnN0YW5jZW9mIEhUTUxDYW52YXNFbGVtZW50ICYmIGRvY3VtZW50LmJvZHkuY29udGFpbnMocmVzb3VyY2UpO1xufVxuXG5leHBvcnQgeyBpc1JlbmRlcmluZ1RvU2NyZWVuIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1JlbmRlcmluZ1RvU2NyZWVuLm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gY2FsY3VsYXRlUHJvamVjdGlvbihwbSwgeCwgeSwgd2lkdGgsIGhlaWdodCwgZmxpcFkpIHtcbiAgY29uc3Qgc2lnbiA9IGZsaXBZID8gMSA6IC0xO1xuICBwbS5pZGVudGl0eSgpO1xuICBwbS5hID0gMSAvIHdpZHRoICogMjtcbiAgcG0uZCA9IHNpZ24gKiAoMSAvIGhlaWdodCAqIDIpO1xuICBwbS50eCA9IC0xIC0geCAqIHBtLmE7XG4gIHBtLnR5ID0gLXNpZ24gLSB5ICogcG0uZDtcbiAgcmV0dXJuIHBtO1xufVxuXG5leHBvcnQgeyBjYWxjdWxhdGVQcm9qZWN0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYWxjdWxhdGVQcm9qZWN0aW9uLm1qcy5tYXBcbiIsImltcG9ydCB7IHVuc2FmZUV2YWxTdXBwb3J0ZWQgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy9icm93c2VyL3Vuc2FmZUV2YWxTdXBwb3J0ZWQubWpzJztcbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gJy4uL2J1ZmZlci9CdWZmZXIubWpzJztcbmltcG9ydCB7IEJ1ZmZlclVzYWdlIH0gZnJvbSAnLi4vYnVmZmVyL2NvbnN0Lm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY2xhc3MgVWJvU3lzdGVtIHtcbiAgY29uc3RydWN0b3IoYWRhcHRvcikge1xuICAgIC8qKiBDYWNoZSBvZiB1bmlmb3JtIGJ1ZmZlciBsYXlvdXRzIGFuZCBzeW5jIGZ1bmN0aW9ucywgc28gd2UgZG9uJ3QgaGF2ZSB0byByZS1jcmVhdGUgdGhlbSAqL1xuICAgIHRoaXMuX3N5bmNGdW5jdGlvbkhhc2ggPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9hZGFwdG9yID0gYWRhcHRvcjtcbiAgICB0aGlzLl9zeXN0ZW1DaGVjaygpO1xuICB9XG4gIC8qKlxuICAgKiBPdmVycmlkZWFibGUgZnVuY3Rpb24gYnkgYHBpeGkuanMvdW5zYWZlLWV2YWxgIHRvIHNpbGVuY2VcbiAgICogdGhyb3dpbmcgYW4gZXJyb3IgaWYgcGxhdGZvcm0gZG9lc24ndCBzdXBwb3J0IHVuc2FmZS1ldmFscy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zeXN0ZW1DaGVjaygpIHtcbiAgICBpZiAoIXVuc2FmZUV2YWxTdXBwb3J0ZWQoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ3VycmVudCBlbnZpcm9ubWVudCBkb2VzIG5vdCBhbGxvdyB1bnNhZmUtZXZhbCwgcGxlYXNlIHVzZSBwaXhpLmpzL3Vuc2FmZS1ldmFsIG1vZHVsZSB0byBlbmFibGUgc3VwcG9ydC5cIik7XG4gICAgfVxuICB9XG4gIGVuc3VyZVVuaWZvcm1Hcm91cCh1bmlmb3JtR3JvdXApIHtcbiAgICBjb25zdCB1bmlmb3JtRGF0YSA9IHRoaXMuZ2V0VW5pZm9ybUdyb3VwRGF0YSh1bmlmb3JtR3JvdXApO1xuICAgIHVuaWZvcm1Hcm91cC5idWZmZXIgfHwgKHVuaWZvcm1Hcm91cC5idWZmZXIgPSBuZXcgQnVmZmVyKHtcbiAgICAgIGRhdGE6IG5ldyBGbG9hdDMyQXJyYXkodW5pZm9ybURhdGEubGF5b3V0LnNpemUgLyA0KSxcbiAgICAgIHVzYWdlOiBCdWZmZXJVc2FnZS5VTklGT1JNIHwgQnVmZmVyVXNhZ2UuQ09QWV9EU1RcbiAgICB9KSk7XG4gIH1cbiAgZ2V0VW5pZm9ybUdyb3VwRGF0YSh1bmlmb3JtR3JvdXApIHtcbiAgICByZXR1cm4gdGhpcy5fc3luY0Z1bmN0aW9uSGFzaFt1bmlmb3JtR3JvdXAuX3NpZ25hdHVyZV0gfHwgdGhpcy5faW5pdFVuaWZvcm1Hcm91cCh1bmlmb3JtR3JvdXApO1xuICB9XG4gIF9pbml0VW5pZm9ybUdyb3VwKHVuaWZvcm1Hcm91cCkge1xuICAgIGNvbnN0IHVuaWZvcm1Hcm91cFNpZ25hdHVyZSA9IHVuaWZvcm1Hcm91cC5fc2lnbmF0dXJlO1xuICAgIGxldCB1bmlmb3JtRGF0YSA9IHRoaXMuX3N5bmNGdW5jdGlvbkhhc2hbdW5pZm9ybUdyb3VwU2lnbmF0dXJlXTtcbiAgICBpZiAoIXVuaWZvcm1EYXRhKSB7XG4gICAgICBjb25zdCBlbGVtZW50cyA9IE9iamVjdC5rZXlzKHVuaWZvcm1Hcm91cC51bmlmb3JtU3RydWN0dXJlcykubWFwKChpKSA9PiB1bmlmb3JtR3JvdXAudW5pZm9ybVN0cnVjdHVyZXNbaV0pO1xuICAgICAgY29uc3QgbGF5b3V0ID0gdGhpcy5fYWRhcHRvci5jcmVhdGVVYm9FbGVtZW50cyhlbGVtZW50cyk7XG4gICAgICBjb25zdCBzeW5jRnVuY3Rpb24gPSB0aGlzLl9nZW5lcmF0ZVVib1N5bmMobGF5b3V0LnVib0VsZW1lbnRzKTtcbiAgICAgIHVuaWZvcm1EYXRhID0gdGhpcy5fc3luY0Z1bmN0aW9uSGFzaFt1bmlmb3JtR3JvdXBTaWduYXR1cmVdID0ge1xuICAgICAgICBsYXlvdXQsXG4gICAgICAgIHN5bmNGdW5jdGlvblxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3N5bmNGdW5jdGlvbkhhc2hbdW5pZm9ybUdyb3VwU2lnbmF0dXJlXTtcbiAgfVxuICBfZ2VuZXJhdGVVYm9TeW5jKHVib0VsZW1lbnRzKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkYXB0b3IuZ2VuZXJhdGVVYm9TeW5jKHVib0VsZW1lbnRzKTtcbiAgfVxuICBzeW5jVW5pZm9ybUdyb3VwKHVuaWZvcm1Hcm91cCwgZGF0YSwgb2Zmc2V0KSB7XG4gICAgY29uc3QgdW5pZm9ybUdyb3VwRGF0YSA9IHRoaXMuZ2V0VW5pZm9ybUdyb3VwRGF0YSh1bmlmb3JtR3JvdXApO1xuICAgIHVuaWZvcm1Hcm91cC5idWZmZXIgfHwgKHVuaWZvcm1Hcm91cC5idWZmZXIgPSBuZXcgQnVmZmVyKHtcbiAgICAgIGRhdGE6IG5ldyBGbG9hdDMyQXJyYXkodW5pZm9ybUdyb3VwRGF0YS5sYXlvdXQuc2l6ZSAvIDQpLFxuICAgICAgdXNhZ2U6IEJ1ZmZlclVzYWdlLlVOSUZPUk0gfCBCdWZmZXJVc2FnZS5DT1BZX0RTVFxuICAgIH0pKTtcbiAgICBkYXRhIHx8IChkYXRhID0gdW5pZm9ybUdyb3VwLmJ1ZmZlci5kYXRhKTtcbiAgICBvZmZzZXQgfHwgKG9mZnNldCA9IDApO1xuICAgIHVuaWZvcm1Hcm91cERhdGEuc3luY0Z1bmN0aW9uKHVuaWZvcm1Hcm91cC51bmlmb3JtcywgZGF0YSwgb2Zmc2V0KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB1cGRhdGVVbmlmb3JtR3JvdXAodW5pZm9ybUdyb3VwKSB7XG4gICAgaWYgKHVuaWZvcm1Hcm91cC5pc1N0YXRpYyAmJiAhdW5pZm9ybUdyb3VwLl9kaXJ0eUlkKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHVuaWZvcm1Hcm91cC5fZGlydHlJZCA9IDA7XG4gICAgY29uc3Qgc3luY2VkID0gdGhpcy5zeW5jVW5pZm9ybUdyb3VwKHVuaWZvcm1Hcm91cCk7XG4gICAgdW5pZm9ybUdyb3VwLmJ1ZmZlci51cGRhdGUoKTtcbiAgICByZXR1cm4gc3luY2VkO1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5fc3luY0Z1bmN0aW9uSGFzaCA9IG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IHsgVWJvU3lzdGVtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1VYm9TeXN0ZW0ubWpzLm1hcFxuIiwiaW1wb3J0IHsgdW5pZm9ybVBhcnNlcnMgfSBmcm9tICcuL3VuaWZvcm1QYXJzZXJzLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gY3JlYXRlVWJvU3luY0Z1bmN0aW9uKHVib0VsZW1lbnRzLCBwYXJzZXJDb2RlLCBhcnJheUdlbmVyYXRpb25GdW5jdGlvbiwgc2luZ2xlU2V0dGVyc01hcCkge1xuICBjb25zdCBmdW5jRnJhZ21lbnRzID0gW2BcbiAgICAgICAgdmFyIHYgPSBudWxsO1xuICAgICAgICB2YXIgdjIgPSBudWxsO1xuICAgICAgICB2YXIgdCA9IDA7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHZhciBuYW1lID0gbnVsbDtcbiAgICAgICAgdmFyIGFycmF5T2Zmc2V0ID0gbnVsbDtcbiAgICBgXTtcbiAgbGV0IHByZXYgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHVib0VsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgdWJvRWxlbWVudCA9IHVib0VsZW1lbnRzW2ldO1xuICAgIGNvbnN0IG5hbWUgPSB1Ym9FbGVtZW50LmRhdGEubmFtZTtcbiAgICBsZXQgcGFyc2VkID0gZmFsc2U7XG4gICAgbGV0IG9mZnNldCA9IDA7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCB1bmlmb3JtUGFyc2Vycy5sZW5ndGg7IGorKykge1xuICAgICAgY29uc3QgdW5pZm9ybVBhcnNlciA9IHVuaWZvcm1QYXJzZXJzW2pdO1xuICAgICAgaWYgKHVuaWZvcm1QYXJzZXIudGVzdCh1Ym9FbGVtZW50LmRhdGEpKSB7XG4gICAgICAgIG9mZnNldCA9IHVib0VsZW1lbnQub2Zmc2V0IC8gNDtcbiAgICAgICAgZnVuY0ZyYWdtZW50cy5wdXNoKFxuICAgICAgICAgIGBuYW1lID0gXCIke25hbWV9XCI7YCxcbiAgICAgICAgICBgb2Zmc2V0ICs9ICR7b2Zmc2V0IC0gcHJldn07YCxcbiAgICAgICAgICB1bmlmb3JtUGFyc2Vyc1tqXVtwYXJzZXJDb2RlXSB8fCB1bmlmb3JtUGFyc2Vyc1tqXS51Ym9cbiAgICAgICAgKTtcbiAgICAgICAgcGFyc2VkID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghcGFyc2VkKSB7XG4gICAgICBpZiAodWJvRWxlbWVudC5kYXRhLnNpemUgPiAxKSB7XG4gICAgICAgIG9mZnNldCA9IHVib0VsZW1lbnQub2Zmc2V0IC8gNDtcbiAgICAgICAgZnVuY0ZyYWdtZW50cy5wdXNoKGFycmF5R2VuZXJhdGlvbkZ1bmN0aW9uKHVib0VsZW1lbnQsIG9mZnNldCAtIHByZXYpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHRlbXBsYXRlID0gc2luZ2xlU2V0dGVyc01hcFt1Ym9FbGVtZW50LmRhdGEudHlwZV07XG4gICAgICAgIG9mZnNldCA9IHVib0VsZW1lbnQub2Zmc2V0IC8gNDtcbiAgICAgICAgZnVuY0ZyYWdtZW50cy5wdXNoKFxuICAgICAgICAgIC8qIHdnc2wgKi9cbiAgICAgICAgICBgXG4gICAgICAgICAgICAgICAgICAgIHYgPSB1di4ke25hbWV9O1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgKz0gJHtvZmZzZXQgLSBwcmV2fTtcbiAgICAgICAgICAgICAgICAgICAgJHt0ZW1wbGF0ZX07XG4gICAgICAgICAgICAgICAgYFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBwcmV2ID0gb2Zmc2V0O1xuICB9XG4gIGNvbnN0IGZyYWdtZW50U3JjID0gZnVuY0ZyYWdtZW50cy5qb2luKFwiXFxuXCIpO1xuICByZXR1cm4gbmV3IEZ1bmN0aW9uKFxuICAgIFwidXZcIixcbiAgICBcImRhdGFcIixcbiAgICBcIm9mZnNldFwiLFxuICAgIGZyYWdtZW50U3JjXG4gICk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZVVib1N5bmNGdW5jdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlVWJvU3luY0Z1bmN0aW9uLm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gbG9vcE1hdHJpeChjb2wsIHJvdykge1xuICBjb25zdCB0b3RhbCA9IGNvbCAqIHJvdztcbiAgcmV0dXJuIGBcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAke3RvdGFsfTsgaSsrKSB7XG4gICAgICAgICAgICBkYXRhW29mZnNldCArICgoKGkgLyAke2NvbH0pfDApICogNCkgKyAoaSAlICR7Y29sfSldID0gdltpXTtcbiAgICAgICAgfVxuICAgIGA7XG59XG5jb25zdCB1Ym9TeW5jRnVuY3Rpb25zU1RENDAgPSB7XG4gIGYzMjogYFxuICAgICAgICBkYXRhW29mZnNldF0gPSB2O2AsXG4gIGkzMjogYFxuICAgICAgICBkYXRhW29mZnNldF0gPSB2O2AsXG4gIFwidmVjMjxmMzI+XCI6IGBcbiAgICAgICAgZGF0YVtvZmZzZXRdID0gdlswXTtcbiAgICAgICAgZGF0YVtvZmZzZXQgKyAxXSA9IHZbMV07YCxcbiAgXCJ2ZWMzPGYzMj5cIjogYFxuICAgICAgICBkYXRhW29mZnNldF0gPSB2WzBdO1xuICAgICAgICBkYXRhW29mZnNldCArIDFdID0gdlsxXTtcbiAgICAgICAgZGF0YVtvZmZzZXQgKyAyXSA9IHZbMl07YCxcbiAgXCJ2ZWM0PGYzMj5cIjogYFxuICAgICAgICBkYXRhW29mZnNldF0gPSB2WzBdO1xuICAgICAgICBkYXRhW29mZnNldCArIDFdID0gdlsxXTtcbiAgICAgICAgZGF0YVtvZmZzZXQgKyAyXSA9IHZbMl07XG4gICAgICAgIGRhdGFbb2Zmc2V0ICsgM10gPSB2WzNdO2AsXG4gIFwibWF0MngyPGYzMj5cIjogYFxuICAgICAgICBkYXRhW29mZnNldF0gPSB2WzBdO1xuICAgICAgICBkYXRhW29mZnNldCArIDFdID0gdlsxXTtcbiAgICAgICAgZGF0YVtvZmZzZXQgKyA0XSA9IHZbMl07XG4gICAgICAgIGRhdGFbb2Zmc2V0ICsgNV0gPSB2WzNdO2AsXG4gIFwibWF0M3gzPGYzMj5cIjogYFxuICAgICAgICBkYXRhW29mZnNldF0gPSB2WzBdO1xuICAgICAgICBkYXRhW29mZnNldCArIDFdID0gdlsxXTtcbiAgICAgICAgZGF0YVtvZmZzZXQgKyAyXSA9IHZbMl07XG4gICAgICAgIGRhdGFbb2Zmc2V0ICsgNF0gPSB2WzNdO1xuICAgICAgICBkYXRhW29mZnNldCArIDVdID0gdls0XTtcbiAgICAgICAgZGF0YVtvZmZzZXQgKyA2XSA9IHZbNV07XG4gICAgICAgIGRhdGFbb2Zmc2V0ICsgOF0gPSB2WzZdO1xuICAgICAgICBkYXRhW29mZnNldCArIDldID0gdls3XTtcbiAgICAgICAgZGF0YVtvZmZzZXQgKyAxMF0gPSB2WzhdO2AsXG4gIFwibWF0NHg0PGYzMj5cIjogYFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICAgICAgICAgIGRhdGFbb2Zmc2V0ICsgaV0gPSB2W2ldO1xuICAgICAgICB9YCxcbiAgXCJtYXQzeDI8ZjMyPlwiOiBsb29wTWF0cml4KDMsIDIpLFxuICBcIm1hdDR4MjxmMzI+XCI6IGxvb3BNYXRyaXgoNCwgMiksXG4gIFwibWF0MngzPGYzMj5cIjogbG9vcE1hdHJpeCgyLCAzKSxcbiAgXCJtYXQ0eDM8ZjMyPlwiOiBsb29wTWF0cml4KDQsIDMpLFxuICBcIm1hdDJ4NDxmMzI+XCI6IGxvb3BNYXRyaXgoMiwgNCksXG4gIFwibWF0M3g0PGYzMj5cIjogbG9vcE1hdHJpeCgzLCA0KVxufTtcbmNvbnN0IHVib1N5bmNGdW5jdGlvbnNXR1NMID0ge1xuICAuLi51Ym9TeW5jRnVuY3Rpb25zU1RENDAsXG4gIFwibWF0MngyPGYzMj5cIjogYFxuICAgICAgICBkYXRhW29mZnNldF0gPSB2WzBdO1xuICAgICAgICBkYXRhW29mZnNldCArIDFdID0gdlsxXTtcbiAgICAgICAgZGF0YVtvZmZzZXQgKyAyXSA9IHZbMl07XG4gICAgICAgIGRhdGFbb2Zmc2V0ICsgM10gPSB2WzNdO1xuICAgIGBcbn07XG5cbmV4cG9ydCB7IHVib1N5bmNGdW5jdGlvbnNTVEQ0MCwgdWJvU3luY0Z1bmN0aW9uc1dHU0wgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVib1N5bmNGdW5jdGlvbnMubWpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCB1bmlmb3JtUGFyc2VycyA9IFtcbiAgLy8gdXBsb2FkaW5nIHBpeGkgbWF0cml4IG9iamVjdCB0byBtYXQzXG4gIHtcbiAgICB0eXBlOiBcIm1hdDN4MzxmMzI+XCIsXG4gICAgdGVzdDogKGRhdGEpID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gZGF0YS52YWx1ZTtcbiAgICAgIHJldHVybiB2YWx1ZS5hICE9PSB2b2lkIDA7XG4gICAgfSxcbiAgICB1Ym86IGBcbiAgICAgICAgICAgIHZhciBtYXRyaXggPSB1dltuYW1lXS50b0FycmF5KHRydWUpO1xuICAgICAgICAgICAgZGF0YVtvZmZzZXRdID0gbWF0cml4WzBdO1xuICAgICAgICAgICAgZGF0YVtvZmZzZXQgKyAxXSA9IG1hdHJpeFsxXTtcbiAgICAgICAgICAgIGRhdGFbb2Zmc2V0ICsgMl0gPSBtYXRyaXhbMl07XG4gICAgICAgICAgICBkYXRhW29mZnNldCArIDRdID0gbWF0cml4WzNdO1xuICAgICAgICAgICAgZGF0YVtvZmZzZXQgKyA1XSA9IG1hdHJpeFs0XTtcbiAgICAgICAgICAgIGRhdGFbb2Zmc2V0ICsgNl0gPSBtYXRyaXhbNV07XG4gICAgICAgICAgICBkYXRhW29mZnNldCArIDhdID0gbWF0cml4WzZdO1xuICAgICAgICAgICAgZGF0YVtvZmZzZXQgKyA5XSA9IG1hdHJpeFs3XTtcbiAgICAgICAgICAgIGRhdGFbb2Zmc2V0ICsgMTBdID0gbWF0cml4WzhdO1xuICAgICAgICBgLFxuICAgIHVuaWZvcm06IGBcbiAgICAgICAgICAgIGdsLnVuaWZvcm1NYXRyaXgzZnYodWRbbmFtZV0ubG9jYXRpb24sIGZhbHNlLCB1dltuYW1lXS50b0FycmF5KHRydWUpKTtcbiAgICAgICAgYFxuICB9LFxuICAvLyB1cGxvYWRpbmcgYSBwaXhpIHJlY3RhbmdsZSBhcyBhIHZlYzRcbiAge1xuICAgIHR5cGU6IFwidmVjNDxmMzI+XCIsXG4gICAgdGVzdDogKGRhdGEpID0+IGRhdGEudHlwZSA9PT0gXCJ2ZWM0PGYzMj5cIiAmJiBkYXRhLnNpemUgPT09IDEgJiYgZGF0YS52YWx1ZS53aWR0aCAhPT0gdm9pZCAwLFxuICAgIHVibzogYFxuICAgICAgICAgICAgdiA9IHV2W25hbWVdO1xuICAgICAgICAgICAgZGF0YVtvZmZzZXRdID0gdi54O1xuICAgICAgICAgICAgZGF0YVtvZmZzZXQgKyAxXSA9IHYueTtcbiAgICAgICAgICAgIGRhdGFbb2Zmc2V0ICsgMl0gPSB2LndpZHRoO1xuICAgICAgICAgICAgZGF0YVtvZmZzZXQgKyAzXSA9IHYuaGVpZ2h0O1xuICAgICAgICBgLFxuICAgIHVuaWZvcm06IGBcbiAgICAgICAgICAgIGN2ID0gdWRbbmFtZV0udmFsdWU7XG4gICAgICAgICAgICB2ID0gdXZbbmFtZV07XG4gICAgICAgICAgICBpZiAoY3ZbMF0gIT09IHYueCB8fCBjdlsxXSAhPT0gdi55IHx8IGN2WzJdICE9PSB2LndpZHRoIHx8IGN2WzNdICE9PSB2LmhlaWdodCkge1xuICAgICAgICAgICAgICAgIGN2WzBdID0gdi54O1xuICAgICAgICAgICAgICAgIGN2WzFdID0gdi55O1xuICAgICAgICAgICAgICAgIGN2WzJdID0gdi53aWR0aDtcbiAgICAgICAgICAgICAgICBjdlszXSA9IHYuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIGdsLnVuaWZvcm00Zih1ZFtuYW1lXS5sb2NhdGlvbiwgdi54LCB2LnksIHYud2lkdGgsIHYuaGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYFxuICB9LFxuICAvLyB1cGxvYWRpbmcgYSBwaXhpIHBvaW50IGFzIGEgdmVjMlxuICB7XG4gICAgdHlwZTogXCJ2ZWMyPGYzMj5cIixcbiAgICB0ZXN0OiAoZGF0YSkgPT4gZGF0YS50eXBlID09PSBcInZlYzI8ZjMyPlwiICYmIGRhdGEuc2l6ZSA9PT0gMSAmJiBkYXRhLnZhbHVlLnggIT09IHZvaWQgMCxcbiAgICB1Ym86IGBcbiAgICAgICAgICAgIHYgPSB1dltuYW1lXTtcbiAgICAgICAgICAgIGRhdGFbb2Zmc2V0XSA9IHYueDtcbiAgICAgICAgICAgIGRhdGFbb2Zmc2V0ICsgMV0gPSB2Lnk7XG4gICAgICAgIGAsXG4gICAgdW5pZm9ybTogYFxuICAgICAgICAgICAgY3YgPSB1ZFtuYW1lXS52YWx1ZTtcbiAgICAgICAgICAgIHYgPSB1dltuYW1lXTtcbiAgICAgICAgICAgIGlmIChjdlswXSAhPT0gdi54IHx8IGN2WzFdICE9PSB2LnkpIHtcbiAgICAgICAgICAgICAgICBjdlswXSA9IHYueDtcbiAgICAgICAgICAgICAgICBjdlsxXSA9IHYueTtcbiAgICAgICAgICAgICAgICBnbC51bmlmb3JtMmYodWRbbmFtZV0ubG9jYXRpb24sIHYueCwgdi55KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYFxuICB9LFxuICAvLyB1cGxvYWRpbmcgYSBwaXhpIGNvbG9yIGFzIGEgdmVjNFxuICB7XG4gICAgdHlwZTogXCJ2ZWM0PGYzMj5cIixcbiAgICB0ZXN0OiAoZGF0YSkgPT4gZGF0YS50eXBlID09PSBcInZlYzQ8ZjMyPlwiICYmIGRhdGEuc2l6ZSA9PT0gMSAmJiBkYXRhLnZhbHVlLnJlZCAhPT0gdm9pZCAwLFxuICAgIHVibzogYFxuICAgICAgICAgICAgdiA9IHV2W25hbWVdO1xuICAgICAgICAgICAgZGF0YVtvZmZzZXRdID0gdi5yZWQ7XG4gICAgICAgICAgICBkYXRhW29mZnNldCArIDFdID0gdi5ncmVlbjtcbiAgICAgICAgICAgIGRhdGFbb2Zmc2V0ICsgMl0gPSB2LmJsdWU7XG4gICAgICAgICAgICBkYXRhW29mZnNldCArIDNdID0gdi5hbHBoYTtcbiAgICAgICAgYCxcbiAgICB1bmlmb3JtOiBgXG4gICAgICAgICAgICBjdiA9IHVkW25hbWVdLnZhbHVlO1xuICAgICAgICAgICAgdiA9IHV2W25hbWVdO1xuICAgICAgICAgICAgaWYgKGN2WzBdICE9PSB2LnJlZCB8fCBjdlsxXSAhPT0gdi5ncmVlbiB8fCBjdlsyXSAhPT0gdi5ibHVlIHx8IGN2WzNdICE9PSB2LmFscGhhKSB7XG4gICAgICAgICAgICAgICAgY3ZbMF0gPSB2LnJlZDtcbiAgICAgICAgICAgICAgICBjdlsxXSA9IHYuZ3JlZW47XG4gICAgICAgICAgICAgICAgY3ZbMl0gPSB2LmJsdWU7XG4gICAgICAgICAgICAgICAgY3ZbM10gPSB2LmFscGhhO1xuICAgICAgICAgICAgICAgIGdsLnVuaWZvcm00Zih1ZFtuYW1lXS5sb2NhdGlvbiwgdi5yZWQsIHYuZ3JlZW4sIHYuYmx1ZSwgdi5hbHBoYSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIGBcbiAgfSxcbiAgLy8gdXBsb2FkaW5nIGEgcGl4aSBjb2xvciBhcyBhIHZlYzNcbiAge1xuICAgIHR5cGU6IFwidmVjMzxmMzI+XCIsXG4gICAgdGVzdDogKGRhdGEpID0+IGRhdGEudHlwZSA9PT0gXCJ2ZWMzPGYzMj5cIiAmJiBkYXRhLnNpemUgPT09IDEgJiYgZGF0YS52YWx1ZS5yZWQgIT09IHZvaWQgMCxcbiAgICB1Ym86IGBcbiAgICAgICAgICAgIHYgPSB1dltuYW1lXTtcbiAgICAgICAgICAgIGRhdGFbb2Zmc2V0XSA9IHYucmVkO1xuICAgICAgICAgICAgZGF0YVtvZmZzZXQgKyAxXSA9IHYuZ3JlZW47XG4gICAgICAgICAgICBkYXRhW29mZnNldCArIDJdID0gdi5ibHVlO1xuICAgICAgICBgLFxuICAgIHVuaWZvcm06IGBcbiAgICAgICAgICAgIGN2ID0gdWRbbmFtZV0udmFsdWU7XG4gICAgICAgICAgICB2ID0gdXZbbmFtZV07XG4gICAgICAgICAgICBpZiAoY3ZbMF0gIT09IHYucmVkIHx8IGN2WzFdICE9PSB2LmdyZWVuIHx8IGN2WzJdICE9PSB2LmJsdWUpIHtcbiAgICAgICAgICAgICAgICBjdlswXSA9IHYucmVkO1xuICAgICAgICAgICAgICAgIGN2WzFdID0gdi5ncmVlbjtcbiAgICAgICAgICAgICAgICBjdlsyXSA9IHYuYmx1ZTtcbiAgICAgICAgICAgICAgICBnbC51bmlmb3JtM2YodWRbbmFtZV0ubG9jYXRpb24sIHYucmVkLCB2LmdyZWVuLCB2LmJsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICBgXG4gIH1cbl07XG5cbmV4cG9ydCB7IHVuaWZvcm1QYXJzZXJzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11bmlmb3JtUGFyc2Vycy5tanMubWFwXG4iLCJpbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY2xhc3MgQ3VzdG9tUmVuZGVyUGlwZSB7XG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyKSB7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgfVxuICBhZGRSZW5kZXJhYmxlKGNvbnRhaW5lciwgaW5zdHJ1Y3Rpb25TZXQpIHtcbiAgICB0aGlzLl9yZW5kZXJlci5yZW5kZXJQaXBlcy5iYXRjaC5icmVhayhpbnN0cnVjdGlvblNldCk7XG4gICAgaW5zdHJ1Y3Rpb25TZXQuYWRkKGNvbnRhaW5lcik7XG4gIH1cbiAgZXhlY3V0ZShjb250YWluZXIpIHtcbiAgICBpZiAoIWNvbnRhaW5lci5pc1JlbmRlcmFibGUpXG4gICAgICByZXR1cm47XG4gICAgY29udGFpbmVyLnJlbmRlcih0aGlzLl9yZW5kZXJlcik7XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLl9yZW5kZXJlciA9IG51bGw7XG4gIH1cbn1cbkN1c3RvbVJlbmRlclBpcGUuZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHTFBpcGVzLFxuICAgIEV4dGVuc2lvblR5cGUuV2ViR1BVUGlwZXMsXG4gICAgRXh0ZW5zaW9uVHlwZS5DYW52YXNQaXBlc1xuICBdLFxuICBuYW1lOiBcImN1c3RvbVJlbmRlclwiXG59O1xuXG5leHBvcnQgeyBDdXN0b21SZW5kZXJQaXBlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DdXN0b21SZW5kZXJQaXBlLm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gZXhlY3V0ZUluc3RydWN0aW9ucyhyZW5kZXJHcm91cCwgcmVuZGVyZXIpIHtcbiAgY29uc3QgaW5zdHJ1Y3Rpb25TZXQgPSByZW5kZXJHcm91cC5pbnN0cnVjdGlvblNldDtcbiAgY29uc3QgaW5zdHJ1Y3Rpb25zID0gaW5zdHJ1Y3Rpb25TZXQuaW5zdHJ1Y3Rpb25zO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGluc3RydWN0aW9uU2V0Lmluc3RydWN0aW9uU2l6ZTsgaSsrKSB7XG4gICAgY29uc3QgaW5zdHJ1Y3Rpb24gPSBpbnN0cnVjdGlvbnNbaV07XG4gICAgcmVuZGVyZXJbaW5zdHJ1Y3Rpb24ucmVuZGVyUGlwZUlkXS5leGVjdXRlKGluc3RydWN0aW9uKTtcbiAgfVxufVxuXG5leHBvcnQgeyBleGVjdXRlSW5zdHJ1Y3Rpb25zIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leGVjdXRlSW5zdHJ1Y3Rpb25zLm1qcy5tYXBcbiIsImltcG9ydCB7IEV4dGVuc2lvblR5cGUgfSBmcm9tICcuLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcbmltcG9ydCB7IGV4ZWN1dGVJbnN0cnVjdGlvbnMgfSBmcm9tICcuL3V0aWxzL2V4ZWN1dGVJbnN0cnVjdGlvbnMubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBSZW5kZXJHcm91cFBpcGUge1xuICBjb25zdHJ1Y3RvcihyZW5kZXJlcikge1xuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG4gIH1cbiAgYWRkUmVuZGVyR3JvdXAocmVuZGVyR3JvdXAsIGluc3RydWN0aW9uU2V0KSB7XG4gICAgdGhpcy5fcmVuZGVyZXIucmVuZGVyUGlwZXMuYmF0Y2guYnJlYWsoaW5zdHJ1Y3Rpb25TZXQpO1xuICAgIGluc3RydWN0aW9uU2V0LmFkZChyZW5kZXJHcm91cCk7XG4gIH1cbiAgZXhlY3V0ZShyZW5kZXJHcm91cCkge1xuICAgIGlmICghcmVuZGVyR3JvdXAuaXNSZW5kZXJhYmxlKVxuICAgICAgcmV0dXJuO1xuICAgIHRoaXMuX3JlbmRlcmVyLmdsb2JhbFVuaWZvcm1zLnB1c2goe1xuICAgICAgd29ybGRUcmFuc2Zvcm1NYXRyaXg6IHJlbmRlckdyb3VwLndvcmxkVHJhbnNmb3JtLFxuICAgICAgd29ybGRDb2xvcjogcmVuZGVyR3JvdXAud29ybGRDb2xvckFscGhhXG4gICAgfSk7XG4gICAgZXhlY3V0ZUluc3RydWN0aW9ucyhyZW5kZXJHcm91cCwgdGhpcy5fcmVuZGVyZXIucmVuZGVyUGlwZXMpO1xuICAgIHRoaXMuX3JlbmRlcmVyLmdsb2JhbFVuaWZvcm1zLnBvcCgpO1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSBudWxsO1xuICB9XG59XG5SZW5kZXJHcm91cFBpcGUuZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHTFBpcGVzLFxuICAgIEV4dGVuc2lvblR5cGUuV2ViR1BVUGlwZXMsXG4gICAgRXh0ZW5zaW9uVHlwZS5DYW52YXNQaXBlc1xuICBdLFxuICBuYW1lOiBcInJlbmRlckdyb3VwXCJcbn07XG5cbmV4cG9ydCB7IFJlbmRlckdyb3VwUGlwZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmVuZGVyR3JvdXBQaXBlLm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gYnVpbGRJbnN0cnVjdGlvbnMocmVuZGVyR3JvdXAsIHJlbmRlclBpcGVzKSB7XG4gIGNvbnN0IHJvb3QgPSByZW5kZXJHcm91cC5yb290O1xuICBjb25zdCBpbnN0cnVjdGlvblNldCA9IHJlbmRlckdyb3VwLmluc3RydWN0aW9uU2V0O1xuICBpbnN0cnVjdGlvblNldC5yZXNldCgpO1xuICByZW5kZXJQaXBlcy5iYXRjaC5idWlsZFN0YXJ0KGluc3RydWN0aW9uU2V0KTtcbiAgcmVuZGVyUGlwZXMuYmxlbmRNb2RlLmJ1aWxkU3RhcnQoKTtcbiAgcmVuZGVyUGlwZXMuY29sb3JNYXNrLmJ1aWxkU3RhcnQoKTtcbiAgaWYgKHJvb3Quc29ydGFibGVDaGlsZHJlbikge1xuICAgIHJvb3Quc29ydENoaWxkcmVuKCk7XG4gIH1cbiAgY29sbGVjdEFsbFJlbmRlcmFibGVzQWR2YW5jZWQocm9vdCwgaW5zdHJ1Y3Rpb25TZXQsIHJlbmRlclBpcGVzLCB0cnVlKTtcbiAgcmVuZGVyUGlwZXMuYmF0Y2guYnVpbGRFbmQoaW5zdHJ1Y3Rpb25TZXQpO1xuICByZW5kZXJQaXBlcy5ibGVuZE1vZGUuYnVpbGRFbmQoaW5zdHJ1Y3Rpb25TZXQpO1xufVxuZnVuY3Rpb24gY29sbGVjdEFsbFJlbmRlcmFibGVzKGNvbnRhaW5lciwgaW5zdHJ1Y3Rpb25TZXQsIHJlbmRlcmVyUGlwZXMpIHtcbiAgaWYgKGNvbnRhaW5lci5nbG9iYWxEaXNwbGF5U3RhdHVzIDwgNyB8fCAhY29udGFpbmVyLmluY2x1ZGVJbkJ1aWxkKVxuICAgIHJldHVybjtcbiAgaWYgKGNvbnRhaW5lci5zb3J0YWJsZUNoaWxkcmVuKSB7XG4gICAgY29udGFpbmVyLnNvcnRDaGlsZHJlbigpO1xuICB9XG4gIGlmIChjb250YWluZXIuaXNTaW1wbGUpIHtcbiAgICBjb2xsZWN0QWxsUmVuZGVyYWJsZXNTaW1wbGUoY29udGFpbmVyLCBpbnN0cnVjdGlvblNldCwgcmVuZGVyZXJQaXBlcyk7XG4gIH0gZWxzZSB7XG4gICAgY29sbGVjdEFsbFJlbmRlcmFibGVzQWR2YW5jZWQoY29udGFpbmVyLCBpbnN0cnVjdGlvblNldCwgcmVuZGVyZXJQaXBlcywgZmFsc2UpO1xuICB9XG59XG5mdW5jdGlvbiBjb2xsZWN0QWxsUmVuZGVyYWJsZXNTaW1wbGUoY29udGFpbmVyLCBpbnN0cnVjdGlvblNldCwgcmVuZGVyUGlwZXMpIHtcbiAgaWYgKGNvbnRhaW5lci5yZW5kZXJQaXBlSWQpIHtcbiAgICByZW5kZXJQaXBlcy5ibGVuZE1vZGUuc2V0QmxlbmRNb2RlKGNvbnRhaW5lciwgY29udGFpbmVyLmdyb3VwQmxlbmRNb2RlLCBpbnN0cnVjdGlvblNldCk7XG4gICAgY29udGFpbmVyLmRpZFZpZXdVcGRhdGUgPSBmYWxzZTtcbiAgICBjb25zdCBycCA9IHJlbmRlclBpcGVzO1xuICAgIHJwW2NvbnRhaW5lci5yZW5kZXJQaXBlSWRdLmFkZFJlbmRlcmFibGUoY29udGFpbmVyLCBpbnN0cnVjdGlvblNldCk7XG4gIH1cbiAgaWYgKCFjb250YWluZXIucmVuZGVyR3JvdXApIHtcbiAgICBjb25zdCBjaGlsZHJlbiA9IGNvbnRhaW5lci5jaGlsZHJlbjtcbiAgICBjb25zdCBsZW5ndGggPSBjaGlsZHJlbi5sZW5ndGg7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgY29sbGVjdEFsbFJlbmRlcmFibGVzKGNoaWxkcmVuW2ldLCBpbnN0cnVjdGlvblNldCwgcmVuZGVyUGlwZXMpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gY29sbGVjdEFsbFJlbmRlcmFibGVzQWR2YW5jZWQoY29udGFpbmVyLCBpbnN0cnVjdGlvblNldCwgcmVuZGVyUGlwZXMsIGlzUm9vdCkge1xuICBpZiAoIWlzUm9vdCAmJiBjb250YWluZXIucmVuZGVyR3JvdXApIHtcbiAgICByZW5kZXJQaXBlcy5yZW5kZXJHcm91cC5hZGRSZW5kZXJHcm91cChjb250YWluZXIucmVuZGVyR3JvdXAsIGluc3RydWN0aW9uU2V0KTtcbiAgfSBlbHNlIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRhaW5lci5lZmZlY3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBlZmZlY3QgPSBjb250YWluZXIuZWZmZWN0c1tpXTtcbiAgICAgIGNvbnN0IHBpcGUgPSByZW5kZXJQaXBlc1tlZmZlY3QucGlwZV07XG4gICAgICBwaXBlLnB1c2goZWZmZWN0LCBjb250YWluZXIsIGluc3RydWN0aW9uU2V0KTtcbiAgICB9XG4gICAgY29uc3QgcmVuZGVyUGlwZUlkID0gY29udGFpbmVyLnJlbmRlclBpcGVJZDtcbiAgICBpZiAocmVuZGVyUGlwZUlkKSB7XG4gICAgICByZW5kZXJQaXBlcy5ibGVuZE1vZGUuc2V0QmxlbmRNb2RlKGNvbnRhaW5lciwgY29udGFpbmVyLmdyb3VwQmxlbmRNb2RlLCBpbnN0cnVjdGlvblNldCk7XG4gICAgICBjb250YWluZXIuZGlkVmlld1VwZGF0ZSA9IGZhbHNlO1xuICAgICAgY29uc3QgcGlwZSA9IHJlbmRlclBpcGVzW3JlbmRlclBpcGVJZF07XG4gICAgICBwaXBlLmFkZFJlbmRlcmFibGUoY29udGFpbmVyLCBpbnN0cnVjdGlvblNldCk7XG4gICAgfVxuICAgIGNvbnN0IGNoaWxkcmVuID0gY29udGFpbmVyLmNoaWxkcmVuO1xuICAgIGlmIChjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29sbGVjdEFsbFJlbmRlcmFibGVzKGNoaWxkcmVuW2ldLCBpbnN0cnVjdGlvblNldCwgcmVuZGVyUGlwZXMpO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGxldCBpID0gY29udGFpbmVyLmVmZmVjdHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGNvbnN0IGVmZmVjdCA9IGNvbnRhaW5lci5lZmZlY3RzW2ldO1xuICAgICAgY29uc3QgcGlwZSA9IHJlbmRlclBpcGVzW2VmZmVjdC5waXBlXTtcbiAgICAgIHBpcGUucG9wKGVmZmVjdCwgY29udGFpbmVyLCBpbnN0cnVjdGlvblNldCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB7IGJ1aWxkSW5zdHJ1Y3Rpb25zLCBjb2xsZWN0QWxsUmVuZGVyYWJsZXMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1aWxkSW5zdHJ1Y3Rpb25zLm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gY29sbGVjdFJlbmRlckdyb3VwcyhyZW5kZXJHcm91cCwgb3V0ID0gW10pIHtcbiAgb3V0LnB1c2gocmVuZGVyR3JvdXApO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHJlbmRlckdyb3VwLnJlbmRlckdyb3VwQ2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBjb2xsZWN0UmVuZGVyR3JvdXBzKHJlbmRlckdyb3VwLnJlbmRlckdyb3VwQ2hpbGRyZW5baV0sIG91dCk7XG4gIH1cbiAgcmV0dXJuIG91dDtcbn1cblxuZXhwb3J0IHsgY29sbGVjdFJlbmRlckdyb3VwcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29sbGVjdFJlbmRlckdyb3Vwcy5tanMubWFwXG4iLCJpbXBvcnQgeyBtaXhIZXhDb2xvcnMgfSBmcm9tICcuL21peEhleENvbG9ycy5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNvbnN0IFdISVRFX0JHUiA9IDE2Nzc3MjE1O1xuZnVuY3Rpb24gbWl4Q29sb3JzKGxvY2FsQkdSQ29sb3IsIHBhcmVudEJHUkNvbG9yKSB7XG4gIGlmIChsb2NhbEJHUkNvbG9yID09PSBXSElURV9CR1IgfHwgcGFyZW50QkdSQ29sb3IgPT09IFdISVRFX0JHUikge1xuICAgIHJldHVybiBsb2NhbEJHUkNvbG9yICsgcGFyZW50QkdSQ29sb3IgLSBXSElURV9CR1I7XG4gIH1cbiAgcmV0dXJuIG1peEhleENvbG9ycyhsb2NhbEJHUkNvbG9yLCBwYXJlbnRCR1JDb2xvciwgMC41KTtcbn1cbmZ1bmN0aW9uIG1peFN0YW5kYXJkQW5kMzJCaXRDb2xvcnMobG9jYWxDb2xvclJHQiwgbG9jYWxBbHBoYSwgcGFyZW50Q29sb3IpIHtcbiAgY29uc3QgcGFyZW50QWxwaGEgPSAocGFyZW50Q29sb3IgPj4gMjQgJiAyNTUpIC8gMjU1O1xuICBjb25zdCBnbG9iYWxBbHBoYSA9IGxvY2FsQWxwaGEgKiBwYXJlbnRBbHBoYSAqIDI1NTtcbiAgY29uc3QgbG9jYWxCR1JDb2xvciA9ICgobG9jYWxDb2xvclJHQiAmIDI1NSkgPDwgMTYpICsgKGxvY2FsQ29sb3JSR0IgJiA2NTI4MCkgKyAobG9jYWxDb2xvclJHQiA+PiAxNiAmIDI1NSk7XG4gIGNvbnN0IHBhcmVudEJHUkNvbG9yID0gcGFyZW50Q29sb3IgJiAxNjc3NzIxNTtcbiAgbGV0IHNoYXJlZEJHUkNvbG9yO1xuICBpZiAobG9jYWxCR1JDb2xvciA9PT0gV0hJVEVfQkdSIHx8IHBhcmVudEJHUkNvbG9yID09PSBXSElURV9CR1IpIHtcbiAgICBzaGFyZWRCR1JDb2xvciA9IGxvY2FsQkdSQ29sb3IgKyBwYXJlbnRCR1JDb2xvciAtIFdISVRFX0JHUjtcbiAgfSBlbHNlIHtcbiAgICBzaGFyZWRCR1JDb2xvciA9IG1peEhleENvbG9ycyhsb2NhbEJHUkNvbG9yLCBwYXJlbnRCR1JDb2xvciwgMC41KTtcbiAgfVxuICByZXR1cm4gc2hhcmVkQkdSQ29sb3IgKyAoZ2xvYmFsQWxwaGEgPDwgMjQpO1xufVxuXG5leHBvcnQgeyBtaXhDb2xvcnMsIG1peFN0YW5kYXJkQW5kMzJCaXRDb2xvcnMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1peENvbG9ycy5tanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIG1peEhleENvbG9ycyhjb2xvcjEsIGNvbG9yMiwgcmF0aW8pIHtcbiAgY29uc3QgcjEgPSBjb2xvcjEgPj4gMTYgJiAyNTU7XG4gIGNvbnN0IGcxID0gY29sb3IxID4+IDggJiAyNTU7XG4gIGNvbnN0IGIxID0gY29sb3IxICYgMjU1O1xuICBjb25zdCByMiA9IGNvbG9yMiA+PiAxNiAmIDI1NTtcbiAgY29uc3QgZzIgPSBjb2xvcjIgPj4gOCAmIDI1NTtcbiAgY29uc3QgYjIgPSBjb2xvcjIgJiAyNTU7XG4gIGNvbnN0IHIgPSByMSArIChyMiAtIHIxKSAqIHJhdGlvO1xuICBjb25zdCBnID0gZzEgKyAoZzIgLSBnMSkgKiByYXRpbztcbiAgY29uc3QgYiA9IGIxICsgKGIyIC0gYjEpICogcmF0aW87XG4gIHJldHVybiAociA8PCAxNikgKyAoZyA8PCA4KSArIGI7XG59XG5cbmV4cG9ydCB7IG1peEhleENvbG9ycyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWl4SGV4Q29sb3JzLm1qcy5tYXBcbiIsImltcG9ydCB7IENvbnRhaW5lciwgVVBEQVRFX0NPTE9SLCBVUERBVEVfQkxFTkQsIFVQREFURV9WSVNJQkxFIH0gZnJvbSAnLi4vQ29udGFpbmVyLm1qcyc7XG5pbXBvcnQgeyBtaXhDb2xvcnMgfSBmcm9tICcuL21peENvbG9ycy5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNvbnN0IHRlbXBDb250YWluZXIgPSBuZXcgQ29udGFpbmVyKCk7XG5mdW5jdGlvbiB1cGRhdGVSZW5kZXJHcm91cFRyYW5zZm9ybXMocmVuZGVyR3JvdXAsIHVwZGF0ZUNoaWxkUmVuZGVyR3JvdXBzID0gZmFsc2UpIHtcbiAgdXBkYXRlUmVuZGVyR3JvdXBUcmFuc2Zvcm0ocmVuZGVyR3JvdXApO1xuICBjb25zdCBjaGlsZHJlblRvVXBkYXRlID0gcmVuZGVyR3JvdXAuY2hpbGRyZW5Ub1VwZGF0ZTtcbiAgY29uc3QgdXBkYXRlVGljayA9IHJlbmRlckdyb3VwLnVwZGF0ZVRpY2srKztcbiAgZm9yIChjb25zdCBqIGluIGNoaWxkcmVuVG9VcGRhdGUpIHtcbiAgICBjb25zdCByZW5kZXJHcm91cERlcHRoID0gTnVtYmVyKGopO1xuICAgIGNvbnN0IGNoaWxkcmVuQXREZXB0aCA9IGNoaWxkcmVuVG9VcGRhdGVbal07XG4gICAgY29uc3QgbGlzdCA9IGNoaWxkcmVuQXREZXB0aC5saXN0O1xuICAgIGNvbnN0IGluZGV4ID0gY2hpbGRyZW5BdERlcHRoLmluZGV4O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5kZXg7IGkrKykge1xuICAgICAgY29uc3QgY2hpbGQgPSBsaXN0W2ldO1xuICAgICAgaWYgKGNoaWxkLnBhcmVudFJlbmRlckdyb3VwID09PSByZW5kZXJHcm91cCAmJiBjaGlsZC5yZWxhdGl2ZVJlbmRlckdyb3VwRGVwdGggPT09IHJlbmRlckdyb3VwRGVwdGgpIHtcbiAgICAgICAgdXBkYXRlVHJhbnNmb3JtQW5kQ2hpbGRyZW4oY2hpbGQsIHVwZGF0ZVRpY2ssIDApO1xuICAgICAgfVxuICAgIH1cbiAgICBjaGlsZHJlbkF0RGVwdGguaW5kZXggPSAwO1xuICB9XG4gIGlmICh1cGRhdGVDaGlsZFJlbmRlckdyb3Vwcykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVuZGVyR3JvdXAucmVuZGVyR3JvdXBDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdXBkYXRlUmVuZGVyR3JvdXBUcmFuc2Zvcm1zKHJlbmRlckdyb3VwLnJlbmRlckdyb3VwQ2hpbGRyZW5baV0sIHVwZGF0ZUNoaWxkUmVuZGVyR3JvdXBzKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHVwZGF0ZVJlbmRlckdyb3VwVHJhbnNmb3JtKHJlbmRlckdyb3VwKSB7XG4gIGNvbnN0IHJvb3QgPSByZW5kZXJHcm91cC5yb290O1xuICBsZXQgd29ybGRBbHBoYTtcbiAgaWYgKHJlbmRlckdyb3VwLnJlbmRlckdyb3VwUGFyZW50KSB7XG4gICAgY29uc3QgcmVuZGVyR3JvdXBQYXJlbnQgPSByZW5kZXJHcm91cC5yZW5kZXJHcm91cFBhcmVudDtcbiAgICByZW5kZXJHcm91cC53b3JsZFRyYW5zZm9ybS5hcHBlbmRGcm9tKFxuICAgICAgcm9vdC5yZWxhdGl2ZUdyb3VwVHJhbnNmb3JtLFxuICAgICAgcmVuZGVyR3JvdXBQYXJlbnQud29ybGRUcmFuc2Zvcm1cbiAgICApO1xuICAgIHJlbmRlckdyb3VwLndvcmxkQ29sb3IgPSBtaXhDb2xvcnMoXG4gICAgICByb290Lmdyb3VwQ29sb3IsXG4gICAgICByZW5kZXJHcm91cFBhcmVudC53b3JsZENvbG9yXG4gICAgKTtcbiAgICB3b3JsZEFscGhhID0gcm9vdC5ncm91cEFscGhhICogcmVuZGVyR3JvdXBQYXJlbnQud29ybGRBbHBoYTtcbiAgfSBlbHNlIHtcbiAgICByZW5kZXJHcm91cC53b3JsZFRyYW5zZm9ybS5jb3B5RnJvbShyb290LmxvY2FsVHJhbnNmb3JtKTtcbiAgICByZW5kZXJHcm91cC53b3JsZENvbG9yID0gcm9vdC5sb2NhbENvbG9yO1xuICAgIHdvcmxkQWxwaGEgPSByb290LmxvY2FsQWxwaGE7XG4gIH1cbiAgd29ybGRBbHBoYSA9IHdvcmxkQWxwaGEgPCAwID8gMCA6IHdvcmxkQWxwaGEgPiAxID8gMSA6IHdvcmxkQWxwaGE7XG4gIHJlbmRlckdyb3VwLndvcmxkQWxwaGEgPSB3b3JsZEFscGhhO1xuICByZW5kZXJHcm91cC53b3JsZENvbG9yQWxwaGEgPSByZW5kZXJHcm91cC53b3JsZENvbG9yICsgKCh3b3JsZEFscGhhICogMjU1IHwgMCkgPDwgMjQpO1xufVxuZnVuY3Rpb24gdXBkYXRlVHJhbnNmb3JtQW5kQ2hpbGRyZW4oY29udGFpbmVyLCB1cGRhdGVUaWNrLCB1cGRhdGVGbGFncykge1xuICBpZiAodXBkYXRlVGljayA9PT0gY29udGFpbmVyLnVwZGF0ZVRpY2spXG4gICAgcmV0dXJuO1xuICBjb250YWluZXIudXBkYXRlVGljayA9IHVwZGF0ZVRpY2s7XG4gIGNvbnRhaW5lci5kaWRDaGFuZ2UgPSBmYWxzZTtcbiAgY29uc3QgbG9jYWxUcmFuc2Zvcm0gPSBjb250YWluZXIubG9jYWxUcmFuc2Zvcm07XG4gIGNvbnRhaW5lci51cGRhdGVMb2NhbFRyYW5zZm9ybSgpO1xuICBjb25zdCBwYXJlbnQgPSBjb250YWluZXIucGFyZW50O1xuICBpZiAocGFyZW50ICYmICFwYXJlbnQucmVuZGVyR3JvdXApIHtcbiAgICB1cGRhdGVGbGFncyA9IHVwZGF0ZUZsYWdzIHwgY29udGFpbmVyLl91cGRhdGVGbGFncztcbiAgICBjb250YWluZXIucmVsYXRpdmVHcm91cFRyYW5zZm9ybS5hcHBlbmRGcm9tKFxuICAgICAgbG9jYWxUcmFuc2Zvcm0sXG4gICAgICBwYXJlbnQucmVsYXRpdmVHcm91cFRyYW5zZm9ybVxuICAgICk7XG4gICAgaWYgKHVwZGF0ZUZsYWdzKSB7XG4gICAgICB1cGRhdGVDb2xvckJsZW5kVmlzaWJpbGl0eShjb250YWluZXIsIHBhcmVudCwgdXBkYXRlRmxhZ3MpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB1cGRhdGVGbGFncyA9IGNvbnRhaW5lci5fdXBkYXRlRmxhZ3M7XG4gICAgY29udGFpbmVyLnJlbGF0aXZlR3JvdXBUcmFuc2Zvcm0uY29weUZyb20obG9jYWxUcmFuc2Zvcm0pO1xuICAgIGlmICh1cGRhdGVGbGFncykge1xuICAgICAgdXBkYXRlQ29sb3JCbGVuZFZpc2liaWxpdHkoY29udGFpbmVyLCB0ZW1wQ29udGFpbmVyLCB1cGRhdGVGbGFncyk7XG4gICAgfVxuICB9XG4gIGlmICghY29udGFpbmVyLnJlbmRlckdyb3VwKSB7XG4gICAgY29uc3QgY2hpbGRyZW4gPSBjb250YWluZXIuY2hpbGRyZW47XG4gICAgY29uc3QgbGVuZ3RoID0gY2hpbGRyZW4ubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHVwZGF0ZVRyYW5zZm9ybUFuZENoaWxkcmVuKGNoaWxkcmVuW2ldLCB1cGRhdGVUaWNrLCB1cGRhdGVGbGFncyk7XG4gICAgfVxuICAgIGNvbnN0IHJlbmRlckdyb3VwID0gY29udGFpbmVyLnBhcmVudFJlbmRlckdyb3VwO1xuICAgIGlmIChjb250YWluZXIucmVuZGVyUGlwZUlkICYmICFyZW5kZXJHcm91cC5zdHJ1Y3R1cmVEaWRDaGFuZ2UpIHtcbiAgICAgIHJlbmRlckdyb3VwLnVwZGF0ZVJlbmRlcmFibGUoY29udGFpbmVyKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHVwZGF0ZUNvbG9yQmxlbmRWaXNpYmlsaXR5KGNvbnRhaW5lciwgcGFyZW50LCB1cGRhdGVGbGFncykge1xuICBpZiAodXBkYXRlRmxhZ3MgJiBVUERBVEVfQ09MT1IpIHtcbiAgICBjb250YWluZXIuZ3JvdXBDb2xvciA9IG1peENvbG9ycyhcbiAgICAgIGNvbnRhaW5lci5sb2NhbENvbG9yLFxuICAgICAgcGFyZW50Lmdyb3VwQ29sb3JcbiAgICApO1xuICAgIGxldCBncm91cEFscGhhID0gY29udGFpbmVyLmxvY2FsQWxwaGEgKiBwYXJlbnQuZ3JvdXBBbHBoYTtcbiAgICBncm91cEFscGhhID0gZ3JvdXBBbHBoYSA8IDAgPyAwIDogZ3JvdXBBbHBoYSA+IDEgPyAxIDogZ3JvdXBBbHBoYTtcbiAgICBjb250YWluZXIuZ3JvdXBBbHBoYSA9IGdyb3VwQWxwaGE7XG4gICAgY29udGFpbmVyLmdyb3VwQ29sb3JBbHBoYSA9IGNvbnRhaW5lci5ncm91cENvbG9yICsgKChncm91cEFscGhhICogMjU1IHwgMCkgPDwgMjQpO1xuICB9XG4gIGlmICh1cGRhdGVGbGFncyAmIFVQREFURV9CTEVORCkge1xuICAgIGNvbnRhaW5lci5ncm91cEJsZW5kTW9kZSA9IGNvbnRhaW5lci5sb2NhbEJsZW5kTW9kZSA9PT0gXCJpbmhlcml0XCIgPyBwYXJlbnQuZ3JvdXBCbGVuZE1vZGUgOiBjb250YWluZXIubG9jYWxCbGVuZE1vZGU7XG4gIH1cbiAgaWYgKHVwZGF0ZUZsYWdzICYgVVBEQVRFX1ZJU0lCTEUpIHtcbiAgICBjb250YWluZXIuZ2xvYmFsRGlzcGxheVN0YXR1cyA9IGNvbnRhaW5lci5sb2NhbERpc3BsYXlTdGF0dXMgJiBwYXJlbnQuZ2xvYmFsRGlzcGxheVN0YXR1cztcbiAgfVxuICBjb250YWluZXIuX3VwZGF0ZUZsYWdzID0gMDtcbn1cblxuZXhwb3J0IHsgdXBkYXRlUmVuZGVyR3JvdXBUcmFuc2Zvcm0sIHVwZGF0ZVJlbmRlckdyb3VwVHJhbnNmb3JtcywgdXBkYXRlVHJhbnNmb3JtQW5kQ2hpbGRyZW4gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVwZGF0ZVJlbmRlckdyb3VwVHJhbnNmb3Jtcy5tanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIHZhbGlkYXRlUmVuZGVyYWJsZXMocmVuZGVyR3JvdXAsIHJlbmRlclBpcGVzKSB7XG4gIGNvbnN0IHsgbGlzdCwgaW5kZXggfSA9IHJlbmRlckdyb3VwLmNoaWxkcmVuUmVuZGVyYWJsZXNUb1VwZGF0ZTtcbiAgbGV0IHJlYnVpbGRSZXF1aXJlZCA9IGZhbHNlO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGluZGV4OyBpKyspIHtcbiAgICBjb25zdCBjb250YWluZXIgPSBsaXN0W2ldO1xuICAgIGNvbnN0IHJlbmRlcmFibGUgPSBjb250YWluZXI7XG4gICAgY29uc3QgcGlwZSA9IHJlbmRlclBpcGVzW3JlbmRlcmFibGUucmVuZGVyUGlwZUlkXTtcbiAgICByZWJ1aWxkUmVxdWlyZWQgPSBwaXBlLnZhbGlkYXRlUmVuZGVyYWJsZShjb250YWluZXIpO1xuICAgIGlmIChyZWJ1aWxkUmVxdWlyZWQpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZW5kZXJHcm91cC5zdHJ1Y3R1cmVEaWRDaGFuZ2UgPSByZWJ1aWxkUmVxdWlyZWQ7XG4gIHJldHVybiByZWJ1aWxkUmVxdWlyZWQ7XG59XG5cbmV4cG9ydCB7IHZhbGlkYXRlUmVuZGVyYWJsZXMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZhbGlkYXRlUmVuZGVyYWJsZXMubWpzLm1hcFxuIiwiaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgTWF0cml4IH0gZnJvbSAnLi4vLi4vbWF0aHMvbWF0cml4L01hdHJpeC5tanMnO1xuaW1wb3J0IHsgYnVpbGRJbnN0cnVjdGlvbnMgfSBmcm9tICcuL3V0aWxzL2J1aWxkSW5zdHJ1Y3Rpb25zLm1qcyc7XG5pbXBvcnQgeyBjb2xsZWN0UmVuZGVyR3JvdXBzIH0gZnJvbSAnLi91dGlscy9jb2xsZWN0UmVuZGVyR3JvdXBzLm1qcyc7XG5pbXBvcnQgeyBleGVjdXRlSW5zdHJ1Y3Rpb25zIH0gZnJvbSAnLi91dGlscy9leGVjdXRlSW5zdHJ1Y3Rpb25zLm1qcyc7XG5pbXBvcnQgeyB1cGRhdGVSZW5kZXJHcm91cFRyYW5zZm9ybXMgfSBmcm9tICcuL3V0aWxzL3VwZGF0ZVJlbmRlckdyb3VwVHJhbnNmb3Jtcy5tanMnO1xuaW1wb3J0IHsgdmFsaWRhdGVSZW5kZXJhYmxlcyB9IGZyb20gJy4vdXRpbHMvdmFsaWRhdGVSZW5kZXJhYmxlcy5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNvbnN0IHRlbXBNYXRyaXggPSBuZXcgTWF0cml4KCk7XG5jbGFzcyBSZW5kZXJHcm91cFN5c3RlbSB7XG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyKSB7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgfVxuICByZW5kZXIoeyBjb250YWluZXIsIHRyYW5zZm9ybSB9KSB7XG4gICAgY29udGFpbmVyLmlzUmVuZGVyR3JvdXAgPSB0cnVlO1xuICAgIGNvbnN0IHBhcmVudCA9IGNvbnRhaW5lci5wYXJlbnQ7XG4gICAgY29uc3QgcmVuZGVyR3JvdXBQYXJlbnQgPSBjb250YWluZXIucmVuZGVyR3JvdXAucmVuZGVyR3JvdXBQYXJlbnQ7XG4gICAgY29udGFpbmVyLnBhcmVudCA9IG51bGw7XG4gICAgY29udGFpbmVyLnJlbmRlckdyb3VwLnJlbmRlckdyb3VwUGFyZW50ID0gbnVsbDtcbiAgICBjb25zdCByZW5kZXJlciA9IHRoaXMuX3JlbmRlcmVyO1xuICAgIGNvbnN0IHJlbmRlckdyb3VwcyA9IGNvbGxlY3RSZW5kZXJHcm91cHMoY29udGFpbmVyLnJlbmRlckdyb3VwLCBbXSk7XG4gICAgbGV0IG9yaWdpbmFsTG9jYWxUcmFuc2Zvcm0gPSB0ZW1wTWF0cml4O1xuICAgIGlmICh0cmFuc2Zvcm0pIHtcbiAgICAgIG9yaWdpbmFsTG9jYWxUcmFuc2Zvcm0gPSBvcmlnaW5hbExvY2FsVHJhbnNmb3JtLmNvcHlGcm9tKGNvbnRhaW5lci5yZW5kZXJHcm91cC5sb2NhbFRyYW5zZm9ybSk7XG4gICAgICBjb250YWluZXIucmVuZGVyR3JvdXAubG9jYWxUcmFuc2Zvcm0uY29weUZyb20odHJhbnNmb3JtKTtcbiAgICB9XG4gICAgY29uc3QgcmVuZGVyUGlwZXMgPSByZW5kZXJlci5yZW5kZXJQaXBlcztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlbmRlckdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgcmVuZGVyR3JvdXAgPSByZW5kZXJHcm91cHNbaV07XG4gICAgICByZW5kZXJHcm91cC5ydW5PblJlbmRlcigpO1xuICAgICAgcmVuZGVyR3JvdXAuaW5zdHJ1Y3Rpb25TZXQucmVuZGVyUGlwZXMgPSByZW5kZXJQaXBlcztcbiAgICAgIGlmICghcmVuZGVyR3JvdXAuc3RydWN0dXJlRGlkQ2hhbmdlKSB7XG4gICAgICAgIHZhbGlkYXRlUmVuZGVyYWJsZXMocmVuZGVyR3JvdXAsIHJlbmRlclBpcGVzKTtcbiAgICAgIH1cbiAgICAgIHVwZGF0ZVJlbmRlckdyb3VwVHJhbnNmb3JtcyhyZW5kZXJHcm91cCk7XG4gICAgICBpZiAocmVuZGVyR3JvdXAuc3RydWN0dXJlRGlkQ2hhbmdlKSB7XG4gICAgICAgIHJlbmRlckdyb3VwLnN0cnVjdHVyZURpZENoYW5nZSA9IGZhbHNlO1xuICAgICAgICBidWlsZEluc3RydWN0aW9ucyhyZW5kZXJHcm91cCwgcmVuZGVyUGlwZXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXBkYXRlUmVuZGVyYWJsZXMocmVuZGVyR3JvdXApO1xuICAgICAgfVxuICAgICAgcmVuZGVyR3JvdXAuY2hpbGRyZW5SZW5kZXJhYmxlc1RvVXBkYXRlLmluZGV4ID0gMDtcbiAgICAgIHJlbmRlcmVyLnJlbmRlclBpcGVzLmJhdGNoLnVwbG9hZChyZW5kZXJHcm91cC5pbnN0cnVjdGlvblNldCk7XG4gICAgfVxuICAgIHJlbmRlcmVyLmdsb2JhbFVuaWZvcm1zLnN0YXJ0KHtcbiAgICAgIHdvcmxkVHJhbnNmb3JtTWF0cml4OiB0cmFuc2Zvcm0gPyBjb250YWluZXIucmVuZGVyR3JvdXAubG9jYWxUcmFuc2Zvcm0gOiBjb250YWluZXIucmVuZGVyR3JvdXAud29ybGRUcmFuc2Zvcm0sXG4gICAgICB3b3JsZENvbG9yOiBjb250YWluZXIucmVuZGVyR3JvdXAud29ybGRDb2xvckFscGhhXG4gICAgfSk7XG4gICAgZXhlY3V0ZUluc3RydWN0aW9ucyhjb250YWluZXIucmVuZGVyR3JvdXAsIHJlbmRlclBpcGVzKTtcbiAgICBpZiAocmVuZGVyUGlwZXMudW5pZm9ybUJhdGNoKSB7XG4gICAgICByZW5kZXJQaXBlcy51bmlmb3JtQmF0Y2gucmVuZGVyRW5kKCk7XG4gICAgfVxuICAgIGlmICh0cmFuc2Zvcm0pIHtcbiAgICAgIGNvbnRhaW5lci5yZW5kZXJHcm91cC5sb2NhbFRyYW5zZm9ybS5jb3B5RnJvbShvcmlnaW5hbExvY2FsVHJhbnNmb3JtKTtcbiAgICB9XG4gICAgY29udGFpbmVyLnBhcmVudCA9IHBhcmVudDtcbiAgICBjb250YWluZXIucmVuZGVyR3JvdXAucmVuZGVyR3JvdXBQYXJlbnQgPSByZW5kZXJHcm91cFBhcmVudDtcbiAgfVxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuX3JlbmRlcmVyID0gbnVsbDtcbiAgfVxufVxuLyoqIEBpZ25vcmUgKi9cblJlbmRlckdyb3VwU3lzdGVtLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW1xuICAgIEV4dGVuc2lvblR5cGUuV2ViR0xTeXN0ZW0sXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHUFVTeXN0ZW0sXG4gICAgRXh0ZW5zaW9uVHlwZS5DYW52YXNTeXN0ZW1cbiAgXSxcbiAgbmFtZTogXCJyZW5kZXJHcm91cFwiXG59O1xuZnVuY3Rpb24gdXBkYXRlUmVuZGVyYWJsZXMocmVuZGVyR3JvdXApIHtcbiAgY29uc3QgeyBsaXN0LCBpbmRleCB9ID0gcmVuZGVyR3JvdXAuY2hpbGRyZW5SZW5kZXJhYmxlc1RvVXBkYXRlO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGluZGV4OyBpKyspIHtcbiAgICBjb25zdCBjb250YWluZXIgPSBsaXN0W2ldO1xuICAgIGlmIChjb250YWluZXIuZGlkVmlld1VwZGF0ZSkge1xuICAgICAgcmVuZGVyR3JvdXAudXBkYXRlUmVuZGVyYWJsZShjb250YWluZXIpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgeyBSZW5kZXJHcm91cFN5c3RlbSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmVuZGVyR3JvdXBTeXN0ZW0ubWpzLm1hcFxuIiwiaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgQmlnUG9vbCB9IGZyb20gJy4uLy4uL3V0aWxzL3Bvb2wvUG9vbEdyb3VwLm1qcyc7XG5pbXBvcnQgeyBCYXRjaGFibGVTcHJpdGUgfSBmcm9tICcuL0JhdGNoYWJsZVNwcml0ZS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNsYXNzIFNwcml0ZVBpcGUge1xuICBjb25zdHJ1Y3RvcihyZW5kZXJlcikge1xuICAgIHRoaXMuX2dwdVNwcml0ZUhhc2ggPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xuICB9XG4gIGFkZFJlbmRlcmFibGUoc3ByaXRlLCBfaW5zdHJ1Y3Rpb25TZXQpIHtcbiAgICBjb25zdCBncHVTcHJpdGUgPSB0aGlzLl9nZXRHcHVTcHJpdGUoc3ByaXRlKTtcbiAgICBpZiAoc3ByaXRlLl9kaWRTcHJpdGVVcGRhdGUpXG4gICAgICB0aGlzLl91cGRhdGVCYXRjaGFibGVTcHJpdGUoc3ByaXRlLCBncHVTcHJpdGUpO1xuICAgIHRoaXMuX3JlbmRlcmVyLnJlbmRlclBpcGVzLmJhdGNoLmFkZFRvQmF0Y2goZ3B1U3ByaXRlKTtcbiAgfVxuICB1cGRhdGVSZW5kZXJhYmxlKHNwcml0ZSkge1xuICAgIGNvbnN0IGdwdVNwcml0ZSA9IHRoaXMuX2dwdVNwcml0ZUhhc2hbc3ByaXRlLnVpZF07XG4gICAgaWYgKHNwcml0ZS5fZGlkU3ByaXRlVXBkYXRlKVxuICAgICAgdGhpcy5fdXBkYXRlQmF0Y2hhYmxlU3ByaXRlKHNwcml0ZSwgZ3B1U3ByaXRlKTtcbiAgICBncHVTcHJpdGUuYmF0Y2hlci51cGRhdGVFbGVtZW50KGdwdVNwcml0ZSk7XG4gIH1cbiAgdmFsaWRhdGVSZW5kZXJhYmxlKHNwcml0ZSkge1xuICAgIGNvbnN0IHRleHR1cmUgPSBzcHJpdGUuX3RleHR1cmU7XG4gICAgY29uc3QgZ3B1U3ByaXRlID0gdGhpcy5fZ2V0R3B1U3ByaXRlKHNwcml0ZSk7XG4gICAgaWYgKGdwdVNwcml0ZS50ZXh0dXJlLl9zb3VyY2UgIT09IHRleHR1cmUuX3NvdXJjZSkge1xuICAgICAgcmV0dXJuICFncHVTcHJpdGUuYmF0Y2hlci5jaGVja0FuZFVwZGF0ZVRleHR1cmUoZ3B1U3ByaXRlLCB0ZXh0dXJlKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGRlc3Ryb3lSZW5kZXJhYmxlKHNwcml0ZSkge1xuICAgIGNvbnN0IGJhdGNoYWJsZVNwcml0ZSA9IHRoaXMuX2dwdVNwcml0ZUhhc2hbc3ByaXRlLnVpZF07XG4gICAgQmlnUG9vbC5yZXR1cm4oYmF0Y2hhYmxlU3ByaXRlKTtcbiAgICB0aGlzLl9ncHVTcHJpdGVIYXNoW3Nwcml0ZS51aWRdID0gbnVsbDtcbiAgfVxuICBfdXBkYXRlQmF0Y2hhYmxlU3ByaXRlKHNwcml0ZSwgYmF0Y2hhYmxlU3ByaXRlKSB7XG4gICAgc3ByaXRlLl9kaWRTcHJpdGVVcGRhdGUgPSBmYWxzZTtcbiAgICBiYXRjaGFibGVTcHJpdGUuYm91bmRzID0gc3ByaXRlLmJvdW5kcztcbiAgICBiYXRjaGFibGVTcHJpdGUudGV4dHVyZSA9IHNwcml0ZS5fdGV4dHVyZTtcbiAgfVxuICBfZ2V0R3B1U3ByaXRlKHNwcml0ZSkge1xuICAgIHJldHVybiB0aGlzLl9ncHVTcHJpdGVIYXNoW3Nwcml0ZS51aWRdIHx8IHRoaXMuX2luaXRHUFVTcHJpdGUoc3ByaXRlKTtcbiAgfVxuICBfaW5pdEdQVVNwcml0ZShzcHJpdGUpIHtcbiAgICBjb25zdCBiYXRjaGFibGVTcHJpdGUgPSBCaWdQb29sLmdldChCYXRjaGFibGVTcHJpdGUpO1xuICAgIGJhdGNoYWJsZVNwcml0ZS5yZW5kZXJhYmxlID0gc3ByaXRlO1xuICAgIGJhdGNoYWJsZVNwcml0ZS50ZXh0dXJlID0gc3ByaXRlLl90ZXh0dXJlO1xuICAgIGJhdGNoYWJsZVNwcml0ZS5ib3VuZHMgPSBzcHJpdGUuYm91bmRzO1xuICAgIGJhdGNoYWJsZVNwcml0ZS5yb3VuZFBpeGVscyA9IHRoaXMuX3JlbmRlcmVyLl9yb3VuZFBpeGVscyB8IHNwcml0ZS5fcm91bmRQaXhlbHM7XG4gICAgdGhpcy5fZ3B1U3ByaXRlSGFzaFtzcHJpdGUudWlkXSA9IGJhdGNoYWJsZVNwcml0ZTtcbiAgICBzcHJpdGUuX2RpZFNwcml0ZVVwZGF0ZSA9IGZhbHNlO1xuICAgIHNwcml0ZS5vbihcImRlc3Ryb3llZFwiLCAoKSA9PiB7XG4gICAgICB0aGlzLmRlc3Ryb3lSZW5kZXJhYmxlKHNwcml0ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGJhdGNoYWJsZVNwcml0ZTtcbiAgfVxuICBkZXN0cm95KCkge1xuICAgIGZvciAoY29uc3QgaSBpbiB0aGlzLl9ncHVTcHJpdGVIYXNoKSB7XG4gICAgICBCaWdQb29sLnJldHVybih0aGlzLl9ncHVTcHJpdGVIYXNoW2ldKTtcbiAgICB9XG4gICAgdGhpcy5fZ3B1U3ByaXRlSGFzaCA9IG51bGw7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSBudWxsO1xuICB9XG59XG4vKiogQGlnbm9yZSAqL1xuU3ByaXRlUGlwZS5leHRlbnNpb24gPSB7XG4gIHR5cGU6IFtcbiAgICBFeHRlbnNpb25UeXBlLldlYkdMUGlwZXMsXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHUFVQaXBlcyxcbiAgICBFeHRlbnNpb25UeXBlLkNhbnZhc1BpcGVzXG4gIF0sXG4gIG5hbWU6IFwic3ByaXRlXCJcbn07XG5cbmV4cG9ydCB7IFNwcml0ZVBpcGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNwcml0ZVBpcGUubWpzLm1hcFxuIiwiaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uLy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgU3RhdGUgfSBmcm9tICcuLi8uLi9yZW5kZXJlcnMvc2hhcmVkL3N0YXRlL1N0YXRlLm1qcyc7XG5pbXBvcnQgeyBCYXRjaEdlb21ldHJ5IH0gZnJvbSAnLi4vZ3B1L0JhdGNoR2VvbWV0cnkubWpzJztcbmltcG9ydCB7IEJhdGNoZXIgfSBmcm9tICcuL0JhdGNoZXIubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBCYXRjaGVyUGlwZSB7XG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyLCBhZGFwdG9yKSB7XG4gICAgdGhpcy5zdGF0ZSA9IFN0YXRlLmZvcjJkKCk7XG4gICAgdGhpcy5fYmF0Y2hlcyA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2dlb21ldHJpZXMgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgdGhpcy5fYWRhcHRvciA9IGFkYXB0b3I7XG4gICAgdGhpcy5fYWRhcHRvci5pbml0KHRoaXMpO1xuICB9XG4gIGJ1aWxkU3RhcnQoaW5zdHJ1Y3Rpb25TZXQpIHtcbiAgICBpZiAoIXRoaXMuX2JhdGNoZXNbaW5zdHJ1Y3Rpb25TZXQudWlkXSkge1xuICAgICAgY29uc3QgYmF0Y2hlciA9IG5ldyBCYXRjaGVyKCk7XG4gICAgICB0aGlzLl9iYXRjaGVzW2luc3RydWN0aW9uU2V0LnVpZF0gPSBiYXRjaGVyO1xuICAgICAgdGhpcy5fZ2VvbWV0cmllc1tiYXRjaGVyLnVpZF0gPSBuZXcgQmF0Y2hHZW9tZXRyeSgpO1xuICAgIH1cbiAgICB0aGlzLl9hY3RpdmVCYXRjaCA9IHRoaXMuX2JhdGNoZXNbaW5zdHJ1Y3Rpb25TZXQudWlkXTtcbiAgICB0aGlzLl9hY3RpdmVHZW9tZXRyeSA9IHRoaXMuX2dlb21ldHJpZXNbdGhpcy5fYWN0aXZlQmF0Y2gudWlkXTtcbiAgICB0aGlzLl9hY3RpdmVCYXRjaC5iZWdpbigpO1xuICB9XG4gIGFkZFRvQmF0Y2goYmF0Y2hhYmxlT2JqZWN0KSB7XG4gICAgdGhpcy5fYWN0aXZlQmF0Y2guYWRkKGJhdGNoYWJsZU9iamVjdCk7XG4gIH1cbiAgYnJlYWsoaW5zdHJ1Y3Rpb25TZXQpIHtcbiAgICB0aGlzLl9hY3RpdmVCYXRjaC5icmVhayhpbnN0cnVjdGlvblNldCk7XG4gIH1cbiAgYnVpbGRFbmQoaW5zdHJ1Y3Rpb25TZXQpIHtcbiAgICBjb25zdCBhY3RpdmVCYXRjaCA9IHRoaXMuX2FjdGl2ZUJhdGNoO1xuICAgIGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5fYWN0aXZlR2VvbWV0cnk7XG4gICAgYWN0aXZlQmF0Y2guZmluaXNoKGluc3RydWN0aW9uU2V0KTtcbiAgICBnZW9tZXRyeS5pbmRleEJ1ZmZlci5zZXREYXRhV2l0aFNpemUoYWN0aXZlQmF0Y2guaW5kZXhCdWZmZXIsIGFjdGl2ZUJhdGNoLmluZGV4U2l6ZSwgdHJ1ZSk7XG4gICAgZ2VvbWV0cnkuYnVmZmVyc1swXS5zZXREYXRhV2l0aFNpemUoYWN0aXZlQmF0Y2guYXR0cmlidXRlQnVmZmVyLmZsb2F0MzJWaWV3LCBhY3RpdmVCYXRjaC5hdHRyaWJ1dGVTaXplLCBmYWxzZSk7XG4gIH1cbiAgdXBsb2FkKGluc3RydWN0aW9uU2V0KSB7XG4gICAgY29uc3QgYmF0Y2hlciA9IHRoaXMuX2JhdGNoZXNbaW5zdHJ1Y3Rpb25TZXQudWlkXTtcbiAgICBjb25zdCBnZW9tZXRyeSA9IHRoaXMuX2dlb21ldHJpZXNbYmF0Y2hlci51aWRdO1xuICAgIGlmIChiYXRjaGVyLmRpcnR5KSB7XG4gICAgICBiYXRjaGVyLmRpcnR5ID0gZmFsc2U7XG4gICAgICBnZW9tZXRyeS5idWZmZXJzWzBdLnVwZGF0ZShiYXRjaGVyLmF0dHJpYnV0ZVNpemUgKiA0KTtcbiAgICB9XG4gIH1cbiAgZXhlY3V0ZShiYXRjaCkge1xuICAgIGlmIChiYXRjaC5hY3Rpb24gPT09IFwic3RhcnRCYXRjaFwiKSB7XG4gICAgICBjb25zdCBiYXRjaGVyID0gYmF0Y2guYmF0Y2hlcjtcbiAgICAgIGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5fZ2VvbWV0cmllc1tiYXRjaGVyLnVpZF07XG4gICAgICB0aGlzLl9hZGFwdG9yLnN0YXJ0KHRoaXMsIGdlb21ldHJ5KTtcbiAgICB9XG4gICAgdGhpcy5fYWRhcHRvci5leGVjdXRlKHRoaXMsIGJhdGNoKTtcbiAgfVxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuc3RhdGUgPSBudWxsO1xuICAgIHRoaXMucmVuZGVyZXIgPSBudWxsO1xuICAgIHRoaXMuX2FkYXB0b3IuZGVzdHJveSgpO1xuICAgIHRoaXMuX2FkYXB0b3IgPSBudWxsO1xuICAgIGZvciAoY29uc3QgaSBpbiB0aGlzLl9iYXRjaGVzKSB7XG4gICAgICB0aGlzLl9iYXRjaGVzW2ldLmRlc3Ryb3koKTtcbiAgICB9XG4gICAgdGhpcy5fYmF0Y2hlcyA9IG51bGw7XG4gICAgZm9yIChjb25zdCBpIGluIHRoaXMuX2dlb21ldHJpZXMpIHtcbiAgICAgIHRoaXMuX2dlb21ldHJpZXNbaV0uZGVzdHJveSgpO1xuICAgIH1cbiAgICB0aGlzLl9nZW9tZXRyaWVzID0gbnVsbDtcbiAgfVxufVxuLyoqIEBpZ25vcmUgKi9cbkJhdGNoZXJQaXBlLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW1xuICAgIEV4dGVuc2lvblR5cGUuV2ViR0xQaXBlcyxcbiAgICBFeHRlbnNpb25UeXBlLldlYkdQVVBpcGVzLFxuICAgIEV4dGVuc2lvblR5cGUuQ2FudmFzUGlwZXNcbiAgXSxcbiAgbmFtZTogXCJiYXRjaFwiXG59O1xuXG5leHBvcnQgeyBCYXRjaGVyUGlwZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QmF0Y2hlclBpcGUubWpzLm1hcFxuIiwiaW1wb3J0IHsgR2xQcm9ncmFtIH0gZnJvbSAnLi4vcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9zaGFkZXIvR2xQcm9ncmFtLm1qcyc7XG5pbXBvcnQgeyBHcHVQcm9ncmFtIH0gZnJvbSAnLi4vcmVuZGVyaW5nL3JlbmRlcmVycy9ncHUvc2hhZGVyL0dwdVByb2dyYW0ubWpzJztcbmltcG9ydCB7IFNoYWRlciB9IGZyb20gJy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3NoYWRlci9TaGFkZXIubWpzJztcbmltcG9ydCB7IFN0YXRlIH0gZnJvbSAnLi4vcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvc3RhdGUvU3RhdGUubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBfRmlsdGVyID0gY2xhc3MgX0ZpbHRlciBleHRlbmRzIFNoYWRlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25hbCBwYXJhbWV0ZXJzIG9mIHRoaXMgZmlsdGVyLlxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7IC4uLl9GaWx0ZXIuZGVmYXVsdE9wdGlvbnMsIC4uLm9wdGlvbnMgfTtcbiAgICBzdXBlcihvcHRpb25zKTtcbiAgICAvKiogSWYgZW5hYmxlZCBpcyB0cnVlIHRoZSBmaWx0ZXIgaXMgYXBwbGllZCwgaWYgZmFsc2UgaXQgd2lsbCBub3QuICovXG4gICAgdGhpcy5lbmFibGVkID0gdHJ1ZTtcbiAgICAvKipcbiAgICAgKiBUaGUgZ3B1IHN0YXRlIHRoZSBmaWx0ZXIgcmVxdWlyZXMgdG8gcmVuZGVyLlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICB0aGlzLl9zdGF0ZSA9IFN0YXRlLmZvcjJkKCk7XG4gICAgdGhpcy5wYWRkaW5nID0gb3B0aW9ucy5wYWRkaW5nO1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5hbnRpYWxpYXMgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICB0aGlzLmFudGlhbGlhcyA9IG9wdGlvbnMuYW50aWFsaWFzID8gXCJvblwiIDogXCJvZmZcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hbnRpYWxpYXMgPSBvcHRpb25zLmFudGlhbGlhcztcbiAgICB9XG4gICAgdGhpcy5yZXNvbHV0aW9uID0gb3B0aW9ucy5yZXNvbHV0aW9uO1xuICAgIHRoaXMuYmxlbmRSZXF1aXJlZCA9IG9wdGlvbnMuYmxlbmRSZXF1aXJlZDtcbiAgICB0aGlzLmFkZFJlc291cmNlKFwidVRleHR1cmVcIiwgMCwgMSk7XG4gIH1cbiAgLyoqXG4gICAqIEFwcGxpZXMgdGhlIGZpbHRlclxuICAgKiBAcGFyYW0gZmlsdGVyTWFuYWdlciAtIFRoZSByZW5kZXJlciB0byByZXRyaWV2ZSB0aGUgZmlsdGVyIGZyb21cbiAgICogQHBhcmFtIGlucHV0IC0gVGhlIGlucHV0IHJlbmRlciB0YXJnZXQuXG4gICAqIEBwYXJhbSBvdXRwdXQgLSBUaGUgdGFyZ2V0IHRvIG91dHB1dCB0by5cbiAgICogQHBhcmFtIGNsZWFyTW9kZSAtIFNob3VsZCB0aGUgb3V0cHV0IGJlIGNsZWFyZWQgYmVmb3JlIHJlbmRlcmluZyB0byBpdFxuICAgKi9cbiAgYXBwbHkoZmlsdGVyTWFuYWdlciwgaW5wdXQsIG91dHB1dCwgY2xlYXJNb2RlKSB7XG4gICAgZmlsdGVyTWFuYWdlci5hcHBseUZpbHRlcih0aGlzLCBpbnB1dCwgb3V0cHV0LCBjbGVhck1vZGUpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIGJsZW5kIG1vZGUgb2YgdGhlIGZpbHRlci5cbiAgICogQGRlZmF1bHQgXCJub3JtYWxcIlxuICAgKi9cbiAgZ2V0IGJsZW5kTW9kZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhdGUuYmxlbmRNb2RlO1xuICB9XG4gIC8qKiBTZXRzIHRoZSBibGVuZCBtb2RlIG9mIHRoZSBmaWx0ZXIuICovXG4gIHNldCBibGVuZE1vZGUodmFsdWUpIHtcbiAgICB0aGlzLl9zdGF0ZS5ibGVuZE1vZGUgPSB2YWx1ZTtcbiAgfVxuICAvKipcbiAgICogQSBzaG9ydCBoYW5kIGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIGZpbHRlciBiYXNlZCBvZiBhIHZlcnRleCBhbmQgZnJhZ21lbnQgc2hhZGVyIHNyYy5cbiAgICogQHBhcmFtIG9wdGlvbnNcbiAgICogQHJldHVybnMgQSBzaGlueSBuZXcgUGl4aUpTIGZpbHRlciFcbiAgICovXG4gIHN0YXRpYyBmcm9tKG9wdGlvbnMpIHtcbiAgICBjb25zdCB7IGdwdSwgZ2wsIC4uLnJlc3QgfSA9IG9wdGlvbnM7XG4gICAgbGV0IGdwdVByb2dyYW07XG4gICAgbGV0IGdsUHJvZ3JhbTtcbiAgICBpZiAoZ3B1KSB7XG4gICAgICBncHVQcm9ncmFtID0gR3B1UHJvZ3JhbS5mcm9tKGdwdSk7XG4gICAgfVxuICAgIGlmIChnbCkge1xuICAgICAgZ2xQcm9ncmFtID0gR2xQcm9ncmFtLmZyb20oZ2wpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IF9GaWx0ZXIoe1xuICAgICAgZ3B1UHJvZ3JhbSxcbiAgICAgIGdsUHJvZ3JhbSxcbiAgICAgIC4uLnJlc3RcbiAgICB9KTtcbiAgfVxufTtcbi8qKlxuICogVGhlIGRlZmF1bHQgZmlsdGVyIHNldHRpbmdzXG4gKiBAc3RhdGljXG4gKi9cbl9GaWx0ZXIuZGVmYXVsdE9wdGlvbnMgPSB7XG4gIGJsZW5kTW9kZTogXCJub3JtYWxcIixcbiAgcmVzb2x1dGlvbjogMSxcbiAgcGFkZGluZzogMCxcbiAgYW50aWFsaWFzOiBcIm9mZlwiLFxuICBibGVuZFJlcXVpcmVkOiBmYWxzZVxufTtcbmxldCBGaWx0ZXIgPSBfRmlsdGVyO1xuXG5leHBvcnQgeyBGaWx0ZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUZpbHRlci5tanMubWFwXG4iLCJ2YXIgZnJhZ21lbnQgPSBcImluIHZlYzIgdk1hc2tDb29yZDtcXG5pbiB2ZWMyIHZUZXh0dXJlQ29vcmQ7XFxuXFxudW5pZm9ybSBzYW1wbGVyMkQgdVRleHR1cmU7XFxudW5pZm9ybSBzYW1wbGVyMkQgdU1hc2tUZXh0dXJlO1xcblxcbnVuaWZvcm0gZmxvYXQgdUFscGhhO1xcbnVuaWZvcm0gdmVjNCB1TWFza0NsYW1wO1xcblxcbm91dCB2ZWM0IGZpbmFsQ29sb3I7XFxuXFxudm9pZCBtYWluKHZvaWQpXFxue1xcbiAgICBmbG9hdCBjbGlwID0gc3RlcCgzLjUsXFxuICAgICAgICBzdGVwKHVNYXNrQ2xhbXAueCwgdk1hc2tDb29yZC54KSArXFxuICAgICAgICBzdGVwKHVNYXNrQ2xhbXAueSwgdk1hc2tDb29yZC55KSArXFxuICAgICAgICBzdGVwKHZNYXNrQ29vcmQueCwgdU1hc2tDbGFtcC56KSArXFxuICAgICAgICBzdGVwKHZNYXNrQ29vcmQueSwgdU1hc2tDbGFtcC53KSk7XFxuXFxuICAgIC8vIFRPRE8gbG9vayBpbnRvIHdoeSB0aGlzIGlzIG5lZWRlZFxcbiAgICBmbG9hdCBucG1BbHBoYSA9IHVBbHBoYTsgXFxuICAgIHZlYzQgb3JpZ2luYWwgPSB0ZXh0dXJlKHVUZXh0dXJlLCB2VGV4dHVyZUNvb3JkKTtcXG4gICAgdmVjNCBtYXNreSA9IHRleHR1cmUodU1hc2tUZXh0dXJlLCB2TWFza0Nvb3JkKTtcXG4gICAgZmxvYXQgYWxwaGFNdWwgPSAxLjAgLSBucG1BbHBoYSAqICgxLjAgLSBtYXNreS5hKTtcXG5cXG4gICAgb3JpZ2luYWwgKj0gKGFscGhhTXVsICogbWFza3kuciAqIHVBbHBoYSAqIGNsaXApO1xcblxcbiAgICBmaW5hbENvbG9yID0gb3JpZ2luYWw7XFxufVxcblwiO1xuXG5leHBvcnQgeyBmcmFnbWVudCBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXNrLmZyYWcubWpzLm1hcFxuIiwidmFyIHNvdXJjZSA9IFwic3RydWN0IEdsb2JhbEZpbHRlclVuaWZvcm1zIHtcXG4gIHVJbnB1dFNpemU6dmVjNDxmMzI+LFxcbiAgdUlucHV0UGl4ZWw6dmVjNDxmMzI+LFxcbiAgdUlucHV0Q2xhbXA6dmVjNDxmMzI+LFxcbiAgdU91dHB1dEZyYW1lOnZlYzQ8ZjMyPixcXG4gIHVHbG9iYWxGcmFtZTp2ZWM0PGYzMj4sXFxuICB1T3V0cHV0VGV4dHVyZTp2ZWM0PGYzMj4sICBcXG59O1xcblxcbnN0cnVjdCBNYXNrVW5pZm9ybXMge1xcbiAgdUZpbHRlck1hdHJpeDptYXQzeDM8ZjMyPixcXG4gIHVNYXNrQ2xhbXA6dmVjNDxmMzI+LFxcbiAgdUFscGhhOmYzMixcXG59O1xcblxcblxcbkBncm91cCgwKSBAYmluZGluZygwKSB2YXI8dW5pZm9ybT4gZ2Z1OiBHbG9iYWxGaWx0ZXJVbmlmb3JtcztcXG5AZ3JvdXAoMCkgQGJpbmRpbmcoMSkgdmFyIHVUZXh0dXJlOiB0ZXh0dXJlXzJkPGYzMj47XFxuQGdyb3VwKDApIEBiaW5kaW5nKDIpIHZhciB1U2FtcGxlciA6IHNhbXBsZXI7XFxuXFxuQGdyb3VwKDEpIEBiaW5kaW5nKDApIHZhcjx1bmlmb3JtPiBmaWx0ZXJVbmlmb3JtcyA6IE1hc2tVbmlmb3JtcztcXG5AZ3JvdXAoMSkgQGJpbmRpbmcoMSkgdmFyIHVNYXNrVGV4dHVyZTogdGV4dHVyZV8yZDxmMzI+O1xcblxcbnN0cnVjdCBWU091dHB1dCB7XFxuICAgIEBidWlsdGluKHBvc2l0aW9uKSBwb3NpdGlvbjogdmVjNDxmMzI+LFxcbiAgICBAbG9jYXRpb24oMCkgdXYgOiB2ZWMyPGYzMj4sXFxuICAgIEBsb2NhdGlvbigxKSBmaWx0ZXJVdiA6IHZlYzI8ZjMyPixcXG4gIH07XFxuXFxuZm4gZmlsdGVyVmVydGV4UG9zaXRpb24oYVBvc2l0aW9uOnZlYzI8ZjMyPikgLT4gdmVjNDxmMzI+XFxue1xcbiAgICB2YXIgcG9zaXRpb24gPSBhUG9zaXRpb24gKiBnZnUudU91dHB1dEZyYW1lLnp3ICsgZ2Z1LnVPdXRwdXRGcmFtZS54eTtcXG5cXG4gICAgcG9zaXRpb24ueCA9IHBvc2l0aW9uLnggKiAoMi4wIC8gZ2Z1LnVPdXRwdXRUZXh0dXJlLngpIC0gMS4wO1xcbiAgICBwb3NpdGlvbi55ID0gcG9zaXRpb24ueSAqICgyLjAqZ2Z1LnVPdXRwdXRUZXh0dXJlLnogLyBnZnUudU91dHB1dFRleHR1cmUueSkgLSBnZnUudU91dHB1dFRleHR1cmUuejtcXG5cXG4gICAgcmV0dXJuIHZlYzQocG9zaXRpb24sIDAuMCwgMS4wKTtcXG59XFxuXFxuZm4gZmlsdGVyVGV4dHVyZUNvb3JkKCBhUG9zaXRpb246dmVjMjxmMzI+ICkgLT4gdmVjMjxmMzI+XFxue1xcbiAgICByZXR1cm4gYVBvc2l0aW9uICogKGdmdS51T3V0cHV0RnJhbWUuencgKiBnZnUudUlucHV0U2l6ZS56dyk7XFxufVxcblxcbmZuIGdsb2JhbFRleHR1cmVDb29yZCggYVBvc2l0aW9uOnZlYzI8ZjMyPiApIC0+IHZlYzI8ZjMyPlxcbntcXG4gIHJldHVybiAgKGFQb3NpdGlvbi54eSAvIGdmdS51R2xvYmFsRnJhbWUuencpICsgKGdmdS51R2xvYmFsRnJhbWUueHkgLyBnZnUudUdsb2JhbEZyYW1lLnp3KTsgIFxcbn1cXG5cXG5mbiBnZXRGaWx0ZXJDb29yZChhUG9zaXRpb246dmVjMjxmMzI+ICkgLT4gdmVjMjxmMzI+XFxue1xcbiAgcmV0dXJuICggZmlsdGVyVW5pZm9ybXMudUZpbHRlck1hdHJpeCAqIHZlYzMoIGZpbHRlclRleHR1cmVDb29yZChhUG9zaXRpb24pLCAxLjApICApLnh5O1xcbn1cXG5cXG5mbiBnZXRTaXplKCkgLT4gdmVjMjxmMzI+XFxue1xcblxcbiAgXFxuICByZXR1cm4gZ2Z1LnVHbG9iYWxGcmFtZS56dztcXG59XFxuICBcXG5AdmVydGV4XFxuZm4gbWFpblZlcnRleChcXG4gIEBsb2NhdGlvbigwKSBhUG9zaXRpb24gOiB2ZWMyPGYzMj4sIFxcbikgLT4gVlNPdXRwdXQge1xcbiAgcmV0dXJuIFZTT3V0cHV0KFxcbiAgIGZpbHRlclZlcnRleFBvc2l0aW9uKGFQb3NpdGlvbiksXFxuICAgZmlsdGVyVGV4dHVyZUNvb3JkKGFQb3NpdGlvbiksXFxuICAgZ2V0RmlsdGVyQ29vcmQoYVBvc2l0aW9uKVxcbiAgKTtcXG59XFxuXFxuQGZyYWdtZW50XFxuZm4gbWFpbkZyYWdtZW50KFxcbiAgQGxvY2F0aW9uKDApIHV2OiB2ZWMyPGYzMj4sXFxuICBAbG9jYXRpb24oMSkgZmlsdGVyVXY6IHZlYzI8ZjMyPixcXG4gIEBidWlsdGluKHBvc2l0aW9uKSBwb3NpdGlvbjogdmVjNDxmMzI+XFxuKSAtPiBAbG9jYXRpb24oMCkgdmVjNDxmMzI+IHtcXG5cXG4gICAgdmFyIG1hc2tDbGFtcCA9IGZpbHRlclVuaWZvcm1zLnVNYXNrQ2xhbXA7XFxuXFxuICAgICB2YXIgY2xpcCA9IHN0ZXAoMy41LFxcbiAgICAgICAgc3RlcChtYXNrQ2xhbXAueCwgZmlsdGVyVXYueCkgK1xcbiAgICAgICAgc3RlcChtYXNrQ2xhbXAueSwgZmlsdGVyVXYueSkgK1xcbiAgICAgICAgc3RlcChmaWx0ZXJVdi54LCBtYXNrQ2xhbXAueikgK1xcbiAgICAgICAgc3RlcChmaWx0ZXJVdi55LCBtYXNrQ2xhbXAudykpO1xcblxcbiAgICB2YXIgbWFzayA9IHRleHR1cmVTYW1wbGUodU1hc2tUZXh0dXJlLCB1U2FtcGxlciwgZmlsdGVyVXYpO1xcbiAgICB2YXIgc291cmNlID0gdGV4dHVyZVNhbXBsZSh1VGV4dHVyZSwgdVNhbXBsZXIsIHV2KTtcXG4gICAgXFxuICAgIHZhciBucG1BbHBoYSA9IDAuMDtcXG5cXG4gICAgdmFyIGFscGhhTXVsID0gMS4wIC0gbnBtQWxwaGEgKiAoMS4wIC0gbWFzay5hKTtcXG5cXG4gICAgdmFyIGEgPSAoYWxwaGFNdWwgKiBtYXNrLnIpICogY2xpcDtcXG5cXG4gICAgcmV0dXJuIHZlYzQoc291cmNlLnJnYiwgc291cmNlLmEpICogYTtcXG59XCI7XG5cbmV4cG9ydCB7IHNvdXJjZSBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXNrLndnc2wubWpzLm1hcFxuIiwiaW1wb3J0IHsgTWF0cml4IH0gZnJvbSAnLi4vLi4vbWF0aHMvbWF0cml4L01hdHJpeC5tanMnO1xuaW1wb3J0IHsgR2xQcm9ncmFtIH0gZnJvbSAnLi4vLi4vcmVuZGVyaW5nL3JlbmRlcmVycy9nbC9zaGFkZXIvR2xQcm9ncmFtLm1qcyc7XG5pbXBvcnQgeyBHcHVQcm9ncmFtIH0gZnJvbSAnLi4vLi4vcmVuZGVyaW5nL3JlbmRlcmVycy9ncHUvc2hhZGVyL0dwdVByb2dyYW0ubWpzJztcbmltcG9ydCB7IFVuaWZvcm1Hcm91cCB9IGZyb20gJy4uLy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3NoYWRlci9Vbmlmb3JtR3JvdXAubWpzJztcbmltcG9ydCB7IFRleHR1cmVNYXRyaXggfSBmcm9tICcuLi8uLi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC90ZXh0dXJlL1RleHR1cmVNYXRyaXgubWpzJztcbmltcG9ydCB7IEZpbHRlciB9IGZyb20gJy4uL0ZpbHRlci5tanMnO1xuaW1wb3J0IGZyYWdtZW50IGZyb20gJy4vbWFzay5mcmFnLm1qcyc7XG5pbXBvcnQgdmVydGV4IGZyb20gJy4vbWFzay52ZXJ0Lm1qcyc7XG5pbXBvcnQgc291cmNlIGZyb20gJy4vbWFzay53Z3NsLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY2xhc3MgTWFza0ZpbHRlciBleHRlbmRzIEZpbHRlciB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBjb25zdCB7IHNwcml0ZSwgLi4ucmVzdCB9ID0gb3B0aW9ucztcbiAgICBjb25zdCB0ZXh0dXJlTWF0cml4ID0gbmV3IFRleHR1cmVNYXRyaXgoc3ByaXRlLnRleHR1cmUpO1xuICAgIGNvbnN0IGZpbHRlclVuaWZvcm1zID0gbmV3IFVuaWZvcm1Hcm91cCh7XG4gICAgICB1RmlsdGVyTWF0cml4OiB7IHZhbHVlOiBuZXcgTWF0cml4KCksIHR5cGU6IFwibWF0M3gzPGYzMj5cIiB9LFxuICAgICAgdU1hc2tDbGFtcDogeyB2YWx1ZTogdGV4dHVyZU1hdHJpeC51Q2xhbXBGcmFtZSwgdHlwZTogXCJ2ZWM0PGYzMj5cIiB9LFxuICAgICAgdUFscGhhOiB7IHZhbHVlOiAxLCB0eXBlOiBcImYzMlwiIH1cbiAgICB9KTtcbiAgICBjb25zdCBncHVQcm9ncmFtID0gR3B1UHJvZ3JhbS5mcm9tKHtcbiAgICAgIHZlcnRleDoge1xuICAgICAgICBzb3VyY2UsXG4gICAgICAgIGVudHJ5UG9pbnQ6IFwibWFpblZlcnRleFwiXG4gICAgICB9LFxuICAgICAgZnJhZ21lbnQ6IHtcbiAgICAgICAgc291cmNlLFxuICAgICAgICBlbnRyeVBvaW50OiBcIm1haW5GcmFnbWVudFwiXG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgZ2xQcm9ncmFtID0gR2xQcm9ncmFtLmZyb20oe1xuICAgICAgdmVydGV4LFxuICAgICAgZnJhZ21lbnQsXG4gICAgICBuYW1lOiBcIm1hc2stZmlsdGVyXCJcbiAgICB9KTtcbiAgICBzdXBlcih7XG4gICAgICAuLi5yZXN0LFxuICAgICAgZ3B1UHJvZ3JhbSxcbiAgICAgIGdsUHJvZ3JhbSxcbiAgICAgIHJlc291cmNlczoge1xuICAgICAgICBmaWx0ZXJVbmlmb3JtcyxcbiAgICAgICAgdU1hc2tUZXh0dXJlOiBzcHJpdGUudGV4dHVyZS5zb3VyY2VcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLnNwcml0ZSA9IHNwcml0ZTtcbiAgICB0aGlzLl90ZXh0dXJlTWF0cml4ID0gdGV4dHVyZU1hdHJpeDtcbiAgfVxuICBhcHBseShmaWx0ZXJNYW5hZ2VyLCBpbnB1dCwgb3V0cHV0LCBjbGVhck1vZGUpIHtcbiAgICB0aGlzLl90ZXh0dXJlTWF0cml4LnRleHR1cmUgPSB0aGlzLnNwcml0ZS50ZXh0dXJlO1xuICAgIGZpbHRlck1hbmFnZXIuY2FsY3VsYXRlU3ByaXRlTWF0cml4KFxuICAgICAgdGhpcy5yZXNvdXJjZXMuZmlsdGVyVW5pZm9ybXMudW5pZm9ybXMudUZpbHRlck1hdHJpeCxcbiAgICAgIHRoaXMuc3ByaXRlXG4gICAgKS5wcmVwZW5kKHRoaXMuX3RleHR1cmVNYXRyaXgubWFwQ29vcmQpO1xuICAgIHRoaXMucmVzb3VyY2VzLnVNYXNrVGV4dHVyZSA9IHRoaXMuc3ByaXRlLnRleHR1cmUuc291cmNlO1xuICAgIGZpbHRlck1hbmFnZXIuYXBwbHlGaWx0ZXIodGhpcywgaW5wdXQsIG91dHB1dCwgY2xlYXJNb2RlKTtcbiAgfVxufVxuXG5leHBvcnQgeyBNYXNrRmlsdGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1NYXNrRmlsdGVyLm1qcy5tYXBcbiIsInZhciB2ZXJ0ZXggPSBcImluIHZlYzIgYVBvc2l0aW9uO1xcblxcbm91dCB2ZWMyIHZUZXh0dXJlQ29vcmQ7XFxub3V0IHZlYzIgdk1hc2tDb29yZDtcXG5cXG5cXG51bmlmb3JtIHZlYzQgdUlucHV0U2l6ZTtcXG51bmlmb3JtIHZlYzQgdU91dHB1dEZyYW1lO1xcbnVuaWZvcm0gdmVjNCB1T3V0cHV0VGV4dHVyZTtcXG51bmlmb3JtIG1hdDMgdUZpbHRlck1hdHJpeDtcXG5cXG52ZWM0IGZpbHRlclZlcnRleFBvc2l0aW9uKCAgdmVjMiBhUG9zaXRpb24gKVxcbntcXG4gICAgdmVjMiBwb3NpdGlvbiA9IGFQb3NpdGlvbiAqIHVPdXRwdXRGcmFtZS56dyArIHVPdXRwdXRGcmFtZS54eTtcXG4gICAgICAgXFxuICAgIHBvc2l0aW9uLnggPSBwb3NpdGlvbi54ICogKDIuMCAvIHVPdXRwdXRUZXh0dXJlLngpIC0gMS4wO1xcbiAgICBwb3NpdGlvbi55ID0gcG9zaXRpb24ueSAqICgyLjAqdU91dHB1dFRleHR1cmUueiAvIHVPdXRwdXRUZXh0dXJlLnkpIC0gdU91dHB1dFRleHR1cmUuejtcXG5cXG4gICAgcmV0dXJuIHZlYzQocG9zaXRpb24sIDAuMCwgMS4wKTtcXG59XFxuXFxudmVjMiBmaWx0ZXJUZXh0dXJlQ29vcmQoICB2ZWMyIGFQb3NpdGlvbiApXFxue1xcbiAgICByZXR1cm4gYVBvc2l0aW9uICogKHVPdXRwdXRGcmFtZS56dyAqIHVJbnB1dFNpemUuencpO1xcbn1cXG5cXG52ZWMyIGdldEZpbHRlckNvb3JkKCB2ZWMyIGFQb3NpdGlvbiApXFxue1xcbiAgICByZXR1cm4gICggdUZpbHRlck1hdHJpeCAqIHZlYzMoIGZpbHRlclRleHR1cmVDb29yZChhUG9zaXRpb24pLCAxLjApICApLnh5O1xcbn0gICBcXG5cXG52b2lkIG1haW4odm9pZClcXG57XFxuICAgIGdsX1Bvc2l0aW9uID0gZmlsdGVyVmVydGV4UG9zaXRpb24oYVBvc2l0aW9uKTtcXG4gICAgdlRleHR1cmVDb29yZCA9IGZpbHRlclRleHR1cmVDb29yZChhUG9zaXRpb24pO1xcbiAgICB2TWFza0Nvb3JkID0gZ2V0RmlsdGVyQ29vcmQoYVBvc2l0aW9uKTtcXG59XFxuXCI7XG5cbmV4cG9ydCB7IHZlcnRleCBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXNrLnZlcnQubWpzLm1hcFxuIiwiaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uLy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgRmlsdGVyRWZmZWN0IH0gZnJvbSAnLi4vLi4vLi4vZmlsdGVycy9GaWx0ZXJFZmZlY3QubWpzJztcbmltcG9ydCB7IE1hc2tGaWx0ZXIgfSBmcm9tICcuLi8uLi8uLi9maWx0ZXJzL21hc2svTWFza0ZpbHRlci5tanMnO1xuaW1wb3J0IHsgQm91bmRzIH0gZnJvbSAnLi4vLi4vLi4vc2NlbmUvY29udGFpbmVyL2JvdW5kcy9Cb3VuZHMubWpzJztcbmltcG9ydCB7IGdldEdsb2JhbEJvdW5kcyB9IGZyb20gJy4uLy4uLy4uL3NjZW5lL2NvbnRhaW5lci9ib3VuZHMvZ2V0R2xvYmFsQm91bmRzLm1qcyc7XG5pbXBvcnQgeyBjb2xsZWN0QWxsUmVuZGVyYWJsZXMgfSBmcm9tICcuLi8uLi8uLi9zY2VuZS9jb250YWluZXIvdXRpbHMvYnVpbGRJbnN0cnVjdGlvbnMubWpzJztcbmltcG9ydCB7IFNwcml0ZSB9IGZyb20gJy4uLy4uLy4uL3NjZW5lL3Nwcml0ZS9TcHJpdGUubWpzJztcbmltcG9ydCB7IEJpZ1Bvb2wgfSBmcm9tICcuLi8uLi8uLi91dGlscy9wb29sL1Bvb2xHcm91cC5tanMnO1xuaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gJy4uLy4uL3JlbmRlcmVycy9zaGFyZWQvdGV4dHVyZS9UZXh0dXJlLm1qcyc7XG5pbXBvcnQgeyBUZXh0dXJlUG9vbCB9IGZyb20gJy4uLy4uL3JlbmRlcmVycy9zaGFyZWQvdGV4dHVyZS9UZXh0dXJlUG9vbC5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNvbnN0IHRlbXBCb3VuZHMgPSBuZXcgQm91bmRzKCk7XG5jbGFzcyBBbHBoYU1hc2tFZmZlY3QgZXh0ZW5kcyBGaWx0ZXJFZmZlY3Qge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuZmlsdGVycyA9IFtuZXcgTWFza0ZpbHRlcih7XG4gICAgICBzcHJpdGU6IG5ldyBTcHJpdGUoVGV4dHVyZS5FTVBUWSlcbiAgICB9KV07XG4gIH1cbiAgZ2V0IHNwcml0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5maWx0ZXJzWzBdLnNwcml0ZTtcbiAgfVxuICBzZXQgc3ByaXRlKHZhbHVlKSB7XG4gICAgdGhpcy5maWx0ZXJzWzBdLnNwcml0ZSA9IHZhbHVlO1xuICB9XG59XG5jbGFzcyBBbHBoYU1hc2tQaXBlIHtcbiAgY29uc3RydWN0b3IocmVuZGVyZXIpIHtcbiAgICB0aGlzLl9hY3RpdmVNYXNrU3RhZ2UgPSBbXTtcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xuICB9XG4gIHB1c2gobWFzaywgbWFza2VkQ29udGFpbmVyLCBpbnN0cnVjdGlvblNldCkge1xuICAgIGNvbnN0IHJlbmRlcmVyID0gdGhpcy5fcmVuZGVyZXI7XG4gICAgcmVuZGVyZXIucmVuZGVyUGlwZXMuYmF0Y2guYnJlYWsoaW5zdHJ1Y3Rpb25TZXQpO1xuICAgIGluc3RydWN0aW9uU2V0LmFkZCh7XG4gICAgICByZW5kZXJQaXBlSWQ6IFwiYWxwaGFNYXNrXCIsXG4gICAgICBhY3Rpb246IFwicHVzaE1hc2tCZWdpblwiLFxuICAgICAgbWFzayxcbiAgICAgIGNhbkJ1bmRsZTogZmFsc2UsXG4gICAgICBtYXNrZWRDb250YWluZXJcbiAgICB9KTtcbiAgICBpZiAobWFzay5yZW5kZXJNYXNrVG9UZXh0dXJlKSB7XG4gICAgICBjb25zdCBtYXNrQ29udGFpbmVyID0gbWFzay5tYXNrO1xuICAgICAgbWFza0NvbnRhaW5lci5pbmNsdWRlSW5CdWlsZCA9IHRydWU7XG4gICAgICBjb2xsZWN0QWxsUmVuZGVyYWJsZXMoXG4gICAgICAgIG1hc2tDb250YWluZXIsXG4gICAgICAgIGluc3RydWN0aW9uU2V0LFxuICAgICAgICByZW5kZXJlci5yZW5kZXJQaXBlc1xuICAgICAgKTtcbiAgICAgIG1hc2tDb250YWluZXIuaW5jbHVkZUluQnVpbGQgPSBmYWxzZTtcbiAgICB9XG4gICAgcmVuZGVyZXIucmVuZGVyUGlwZXMuYmF0Y2guYnJlYWsoaW5zdHJ1Y3Rpb25TZXQpO1xuICAgIGluc3RydWN0aW9uU2V0LmFkZCh7XG4gICAgICByZW5kZXJQaXBlSWQ6IFwiYWxwaGFNYXNrXCIsXG4gICAgICBhY3Rpb246IFwicHVzaE1hc2tFbmRcIixcbiAgICAgIG1hc2ssXG4gICAgICBtYXNrZWRDb250YWluZXIsXG4gICAgICBjYW5CdW5kbGU6IGZhbHNlXG4gICAgfSk7XG4gIH1cbiAgcG9wKG1hc2ssIF9tYXNrZWRDb250YWluZXIsIGluc3RydWN0aW9uU2V0KSB7XG4gICAgY29uc3QgcmVuZGVyZXIgPSB0aGlzLl9yZW5kZXJlcjtcbiAgICByZW5kZXJlci5yZW5kZXJQaXBlcy5iYXRjaC5icmVhayhpbnN0cnVjdGlvblNldCk7XG4gICAgaW5zdHJ1Y3Rpb25TZXQuYWRkKHtcbiAgICAgIHJlbmRlclBpcGVJZDogXCJhbHBoYU1hc2tcIixcbiAgICAgIGFjdGlvbjogXCJwb3BNYXNrRW5kXCIsXG4gICAgICBtYXNrLFxuICAgICAgY2FuQnVuZGxlOiBmYWxzZVxuICAgIH0pO1xuICB9XG4gIGV4ZWN1dGUoaW5zdHJ1Y3Rpb24pIHtcbiAgICBjb25zdCByZW5kZXJlciA9IHRoaXMuX3JlbmRlcmVyO1xuICAgIGNvbnN0IHJlbmRlck1hc2sgPSBpbnN0cnVjdGlvbi5tYXNrLnJlbmRlck1hc2tUb1RleHR1cmU7XG4gICAgaWYgKGluc3RydWN0aW9uLmFjdGlvbiA9PT0gXCJwdXNoTWFza0JlZ2luXCIpIHtcbiAgICAgIGNvbnN0IGZpbHRlckVmZmVjdCA9IEJpZ1Bvb2wuZ2V0KEFscGhhTWFza0VmZmVjdCk7XG4gICAgICBpZiAocmVuZGVyTWFzaykge1xuICAgICAgICBpbnN0cnVjdGlvbi5tYXNrLm1hc2subWVhc3VyYWJsZSA9IHRydWU7XG4gICAgICAgIGNvbnN0IGJvdW5kcyA9IGdldEdsb2JhbEJvdW5kcyhpbnN0cnVjdGlvbi5tYXNrLm1hc2ssIHRydWUsIHRlbXBCb3VuZHMpO1xuICAgICAgICBpbnN0cnVjdGlvbi5tYXNrLm1hc2subWVhc3VyYWJsZSA9IGZhbHNlO1xuICAgICAgICBib3VuZHMuY2VpbCgpO1xuICAgICAgICBjb25zdCBmaWx0ZXJUZXh0dXJlID0gVGV4dHVyZVBvb2wuZ2V0T3B0aW1hbFRleHR1cmUoXG4gICAgICAgICAgYm91bmRzLndpZHRoLFxuICAgICAgICAgIGJvdW5kcy5oZWlnaHQsXG4gICAgICAgICAgMSxcbiAgICAgICAgICBmYWxzZVxuICAgICAgICApO1xuICAgICAgICByZW5kZXJlci5yZW5kZXJUYXJnZXQucHVzaChmaWx0ZXJUZXh0dXJlLCB0cnVlKTtcbiAgICAgICAgcmVuZGVyZXIuZ2xvYmFsVW5pZm9ybXMucHVzaCh7XG4gICAgICAgICAgb2Zmc2V0OiBib3VuZHMsXG4gICAgICAgICAgd29ybGRDb2xvcjogNDI5NDk2NzI5NVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgc3ByaXRlID0gZmlsdGVyRWZmZWN0LnNwcml0ZTtcbiAgICAgICAgc3ByaXRlLnRleHR1cmUgPSBmaWx0ZXJUZXh0dXJlO1xuICAgICAgICBzcHJpdGUud29ybGRUcmFuc2Zvcm0udHggPSBib3VuZHMubWluWDtcbiAgICAgICAgc3ByaXRlLndvcmxkVHJhbnNmb3JtLnR5ID0gYm91bmRzLm1pblk7XG4gICAgICAgIHRoaXMuX2FjdGl2ZU1hc2tTdGFnZS5wdXNoKHtcbiAgICAgICAgICBmaWx0ZXJFZmZlY3QsXG4gICAgICAgICAgbWFza2VkQ29udGFpbmVyOiBpbnN0cnVjdGlvbi5tYXNrZWRDb250YWluZXIsXG4gICAgICAgICAgZmlsdGVyVGV4dHVyZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpbHRlckVmZmVjdC5zcHJpdGUgPSBpbnN0cnVjdGlvbi5tYXNrLm1hc2s7XG4gICAgICAgIHRoaXMuX2FjdGl2ZU1hc2tTdGFnZS5wdXNoKHtcbiAgICAgICAgICBmaWx0ZXJFZmZlY3QsXG4gICAgICAgICAgbWFza2VkQ29udGFpbmVyOiBpbnN0cnVjdGlvbi5tYXNrZWRDb250YWluZXJcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpbnN0cnVjdGlvbi5hY3Rpb24gPT09IFwicHVzaE1hc2tFbmRcIikge1xuICAgICAgY29uc3QgbWFza0RhdGEgPSB0aGlzLl9hY3RpdmVNYXNrU3RhZ2VbdGhpcy5fYWN0aXZlTWFza1N0YWdlLmxlbmd0aCAtIDFdO1xuICAgICAgaWYgKHJlbmRlck1hc2spIHtcbiAgICAgICAgcmVuZGVyZXIucmVuZGVyVGFyZ2V0LnBvcCgpO1xuICAgICAgICByZW5kZXJlci5nbG9iYWxVbmlmb3Jtcy5wb3AoKTtcbiAgICAgIH1cbiAgICAgIHJlbmRlcmVyLmZpbHRlci5wdXNoKHtcbiAgICAgICAgcmVuZGVyUGlwZUlkOiBcImZpbHRlclwiLFxuICAgICAgICBhY3Rpb246IFwicHVzaEZpbHRlclwiLFxuICAgICAgICBjb250YWluZXI6IG1hc2tEYXRhLm1hc2tlZENvbnRhaW5lcixcbiAgICAgICAgZmlsdGVyRWZmZWN0OiBtYXNrRGF0YS5maWx0ZXJFZmZlY3QsXG4gICAgICAgIGNhbkJ1bmRsZTogZmFsc2VcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoaW5zdHJ1Y3Rpb24uYWN0aW9uID09PSBcInBvcE1hc2tFbmRcIikge1xuICAgICAgcmVuZGVyZXIuZmlsdGVyLnBvcCgpO1xuICAgICAgY29uc3QgbWFza0RhdGEgPSB0aGlzLl9hY3RpdmVNYXNrU3RhZ2UucG9wKCk7XG4gICAgICBpZiAocmVuZGVyTWFzaykge1xuICAgICAgICBUZXh0dXJlUG9vbC5yZXR1cm5UZXh0dXJlKG1hc2tEYXRhLmZpbHRlclRleHR1cmUpO1xuICAgICAgfVxuICAgICAgQmlnUG9vbC5yZXR1cm4obWFza0RhdGEuZmlsdGVyRWZmZWN0KTtcbiAgICB9XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLl9yZW5kZXJlciA9IG51bGw7XG4gICAgdGhpcy5fYWN0aXZlTWFza1N0YWdlID0gbnVsbDtcbiAgfVxufVxuLyoqIEBpZ25vcmUgKi9cbkFscGhhTWFza1BpcGUuZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHTFBpcGVzLFxuICAgIEV4dGVuc2lvblR5cGUuV2ViR1BVUGlwZXMsXG4gICAgRXh0ZW5zaW9uVHlwZS5DYW52YXNQaXBlc1xuICBdLFxuICBuYW1lOiBcImFscGhhTWFza1wiXG59O1xuXG5leHBvcnQgeyBBbHBoYU1hc2tQaXBlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BbHBoYU1hc2tQaXBlLm1qcy5tYXBcbiIsImltcG9ydCB7IEV4dGVuc2lvblR5cGUgfSBmcm9tICcuLi8uLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBDb2xvck1hc2tQaXBlIHtcbiAgY29uc3RydWN0b3IocmVuZGVyZXIpIHtcbiAgICB0aGlzLl9jb2xvclN0YWNrID0gW107XG4gICAgdGhpcy5fY29sb3JTdGFja0luZGV4ID0gMDtcbiAgICB0aGlzLl9jdXJyZW50Q29sb3IgPSAwO1xuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG4gIH1cbiAgYnVpbGRTdGFydCgpIHtcbiAgICB0aGlzLl9jb2xvclN0YWNrWzBdID0gMTU7XG4gICAgdGhpcy5fY29sb3JTdGFja0luZGV4ID0gMTtcbiAgICB0aGlzLl9jdXJyZW50Q29sb3IgPSAxNTtcbiAgfVxuICBwdXNoKG1hc2ssIF9jb250YWluZXIsIGluc3RydWN0aW9uU2V0KSB7XG4gICAgY29uc3QgcmVuZGVyZXIgPSB0aGlzLl9yZW5kZXJlcjtcbiAgICByZW5kZXJlci5yZW5kZXJQaXBlcy5iYXRjaC5icmVhayhpbnN0cnVjdGlvblNldCk7XG4gICAgY29uc3QgY29sb3JTdGFjayA9IHRoaXMuX2NvbG9yU3RhY2s7XG4gICAgY29sb3JTdGFja1t0aGlzLl9jb2xvclN0YWNrSW5kZXhdID0gY29sb3JTdGFja1t0aGlzLl9jb2xvclN0YWNrSW5kZXggLSAxXSAmIG1hc2subWFzaztcbiAgICBjb25zdCBjdXJyZW50Q29sb3IgPSB0aGlzLl9jb2xvclN0YWNrW3RoaXMuX2NvbG9yU3RhY2tJbmRleF07XG4gICAgaWYgKGN1cnJlbnRDb2xvciAhPT0gdGhpcy5fY3VycmVudENvbG9yKSB7XG4gICAgICB0aGlzLl9jdXJyZW50Q29sb3IgPSBjdXJyZW50Q29sb3I7XG4gICAgICBpbnN0cnVjdGlvblNldC5hZGQoe1xuICAgICAgICByZW5kZXJQaXBlSWQ6IFwiY29sb3JNYXNrXCIsXG4gICAgICAgIGNvbG9yTWFzazogY3VycmVudENvbG9yLFxuICAgICAgICBjYW5CdW5kbGU6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5fY29sb3JTdGFja0luZGV4Kys7XG4gIH1cbiAgcG9wKF9tYXNrLCBfY29udGFpbmVyLCBpbnN0cnVjdGlvblNldCkge1xuICAgIGNvbnN0IHJlbmRlcmVyID0gdGhpcy5fcmVuZGVyZXI7XG4gICAgcmVuZGVyZXIucmVuZGVyUGlwZXMuYmF0Y2guYnJlYWsoaW5zdHJ1Y3Rpb25TZXQpO1xuICAgIGNvbnN0IGNvbG9yU3RhY2sgPSB0aGlzLl9jb2xvclN0YWNrO1xuICAgIHRoaXMuX2NvbG9yU3RhY2tJbmRleC0tO1xuICAgIGNvbnN0IGN1cnJlbnRDb2xvciA9IGNvbG9yU3RhY2tbdGhpcy5fY29sb3JTdGFja0luZGV4IC0gMV07XG4gICAgaWYgKGN1cnJlbnRDb2xvciAhPT0gdGhpcy5fY3VycmVudENvbG9yKSB7XG4gICAgICB0aGlzLl9jdXJyZW50Q29sb3IgPSBjdXJyZW50Q29sb3I7XG4gICAgICBpbnN0cnVjdGlvblNldC5hZGQoe1xuICAgICAgICByZW5kZXJQaXBlSWQ6IFwiY29sb3JNYXNrXCIsXG4gICAgICAgIGNvbG9yTWFzazogY3VycmVudENvbG9yLFxuICAgICAgICBjYW5CdW5kbGU6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgZXhlY3V0ZShpbnN0cnVjdGlvbikge1xuICAgIGNvbnN0IHJlbmRlcmVyID0gdGhpcy5fcmVuZGVyZXI7XG4gICAgcmVuZGVyZXIuY29sb3JNYXNrLnNldE1hc2soaW5zdHJ1Y3Rpb24uY29sb3JNYXNrKTtcbiAgfVxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuX2NvbG9yU3RhY2sgPSBudWxsO1xuICB9XG59XG4vKiogQGlnbm9yZSAqL1xuQ29sb3JNYXNrUGlwZS5leHRlbnNpb24gPSB7XG4gIHR5cGU6IFtcbiAgICBFeHRlbnNpb25UeXBlLldlYkdMUGlwZXMsXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHUFVQaXBlcyxcbiAgICBFeHRlbnNpb25UeXBlLkNhbnZhc1BpcGVzXG4gIF0sXG4gIG5hbWU6IFwiY29sb3JNYXNrXCJcbn07XG5cbmV4cG9ydCB7IENvbG9yTWFza1BpcGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbG9yTWFza1BpcGUubWpzLm1hcFxuIiwiaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uLy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgY29sbGVjdEFsbFJlbmRlcmFibGVzIH0gZnJvbSAnLi4vLi4vLi4vc2NlbmUvY29udGFpbmVyL3V0aWxzL2J1aWxkSW5zdHJ1Y3Rpb25zLm1qcyc7XG5pbXBvcnQgeyBDTEVBUiB9IGZyb20gJy4uLy4uL3JlbmRlcmVycy9nbC9jb25zdC5tanMnO1xuaW1wb3J0IHsgU1RFTkNJTF9NT0RFUyB9IGZyb20gJy4uLy4uL3JlbmRlcmVycy9zaGFyZWQvc3RhdGUvY29uc3QubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBTdGVuY2lsTWFza1BpcGUge1xuICBjb25zdHJ1Y3RvcihyZW5kZXJlcikge1xuICAgIC8vIHVzZWQgd2hlbiBidWlsZGluZyBhbmQgYWxzbyB3aGVuIGV4ZWN1dGluZy4uXG4gICAgdGhpcy5fbWFza1N0YWNrSGFzaCA9IHt9O1xuICAgIHRoaXMuX21hc2tIYXNoID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgfVxuICBwdXNoKG1hc2ssIF9jb250YWluZXIsIGluc3RydWN0aW9uU2V0KSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGVmZmVjdCA9IG1hc2s7XG4gICAgY29uc3QgcmVuZGVyZXIgPSB0aGlzLl9yZW5kZXJlcjtcbiAgICByZW5kZXJlci5yZW5kZXJQaXBlcy5iYXRjaC5icmVhayhpbnN0cnVjdGlvblNldCk7XG4gICAgcmVuZGVyZXIucmVuZGVyUGlwZXMuYmxlbmRNb2RlLnNldEJsZW5kTW9kZShlZmZlY3QubWFzaywgXCJub25lXCIsIGluc3RydWN0aW9uU2V0KTtcbiAgICBpbnN0cnVjdGlvblNldC5hZGQoe1xuICAgICAgcmVuZGVyUGlwZUlkOiBcInN0ZW5jaWxNYXNrXCIsXG4gICAgICBhY3Rpb246IFwicHVzaE1hc2tCZWdpblwiLFxuICAgICAgbWFzayxcbiAgICAgIGNhbkJ1bmRsZTogZmFsc2VcbiAgICB9KTtcbiAgICBjb25zdCBtYXNrQ29udGFpbmVyID0gZWZmZWN0Lm1hc2s7XG4gICAgbWFza0NvbnRhaW5lci5pbmNsdWRlSW5CdWlsZCA9IHRydWU7XG4gICAgaWYgKCF0aGlzLl9tYXNrSGFzaC5oYXMoZWZmZWN0KSkge1xuICAgICAgdGhpcy5fbWFza0hhc2guc2V0KGVmZmVjdCwge1xuICAgICAgICBpbnN0cnVjdGlvbnNTdGFydDogMCxcbiAgICAgICAgaW5zdHJ1Y3Rpb25zTGVuZ3RoOiAwXG4gICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgbWFza0RhdGEgPSB0aGlzLl9tYXNrSGFzaC5nZXQoZWZmZWN0KTtcbiAgICBtYXNrRGF0YS5pbnN0cnVjdGlvbnNTdGFydCA9IGluc3RydWN0aW9uU2V0Lmluc3RydWN0aW9uU2l6ZTtcbiAgICBjb2xsZWN0QWxsUmVuZGVyYWJsZXMoXG4gICAgICBtYXNrQ29udGFpbmVyLFxuICAgICAgaW5zdHJ1Y3Rpb25TZXQsXG4gICAgICByZW5kZXJlci5yZW5kZXJQaXBlc1xuICAgICk7XG4gICAgbWFza0NvbnRhaW5lci5pbmNsdWRlSW5CdWlsZCA9IGZhbHNlO1xuICAgIHJlbmRlcmVyLnJlbmRlclBpcGVzLmJhdGNoLmJyZWFrKGluc3RydWN0aW9uU2V0KTtcbiAgICBpbnN0cnVjdGlvblNldC5hZGQoe1xuICAgICAgcmVuZGVyUGlwZUlkOiBcInN0ZW5jaWxNYXNrXCIsXG4gICAgICBhY3Rpb246IFwicHVzaE1hc2tFbmRcIixcbiAgICAgIG1hc2ssXG4gICAgICBjYW5CdW5kbGU6IGZhbHNlXG4gICAgfSk7XG4gICAgY29uc3QgaW5zdHJ1Y3Rpb25zTGVuZ3RoID0gaW5zdHJ1Y3Rpb25TZXQuaW5zdHJ1Y3Rpb25TaXplIC0gbWFza0RhdGEuaW5zdHJ1Y3Rpb25zU3RhcnQgLSAxO1xuICAgIG1hc2tEYXRhLmluc3RydWN0aW9uc0xlbmd0aCA9IGluc3RydWN0aW9uc0xlbmd0aDtcbiAgICBjb25zdCByZW5kZXJUYXJnZXRVaWQgPSByZW5kZXJlci5yZW5kZXJUYXJnZXQucmVuZGVyVGFyZ2V0LnVpZDtcbiAgICAoX2EgPSB0aGlzLl9tYXNrU3RhY2tIYXNoKVtyZW5kZXJUYXJnZXRVaWRdID8/IChfYVtyZW5kZXJUYXJnZXRVaWRdID0gMCk7XG4gIH1cbiAgcG9wKG1hc2ssIF9jb250YWluZXIsIGluc3RydWN0aW9uU2V0KSB7XG4gICAgY29uc3QgZWZmZWN0ID0gbWFzaztcbiAgICBjb25zdCByZW5kZXJlciA9IHRoaXMuX3JlbmRlcmVyO1xuICAgIHJlbmRlcmVyLnJlbmRlclBpcGVzLmJhdGNoLmJyZWFrKGluc3RydWN0aW9uU2V0KTtcbiAgICByZW5kZXJlci5yZW5kZXJQaXBlcy5ibGVuZE1vZGUuc2V0QmxlbmRNb2RlKGVmZmVjdC5tYXNrLCBcIm5vbmVcIiwgaW5zdHJ1Y3Rpb25TZXQpO1xuICAgIGluc3RydWN0aW9uU2V0LmFkZCh7XG4gICAgICByZW5kZXJQaXBlSWQ6IFwic3RlbmNpbE1hc2tcIixcbiAgICAgIGFjdGlvbjogXCJwb3BNYXNrQmVnaW5cIixcbiAgICAgIGNhbkJ1bmRsZTogZmFsc2VcbiAgICB9KTtcbiAgICBjb25zdCBtYXNrRGF0YSA9IHRoaXMuX21hc2tIYXNoLmdldChtYXNrKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1hc2tEYXRhLmluc3RydWN0aW9uc0xlbmd0aDsgaSsrKSB7XG4gICAgICBpbnN0cnVjdGlvblNldC5pbnN0cnVjdGlvbnNbaW5zdHJ1Y3Rpb25TZXQuaW5zdHJ1Y3Rpb25TaXplKytdID0gaW5zdHJ1Y3Rpb25TZXQuaW5zdHJ1Y3Rpb25zW21hc2tEYXRhLmluc3RydWN0aW9uc1N0YXJ0KytdO1xuICAgIH1cbiAgICBpbnN0cnVjdGlvblNldC5hZGQoe1xuICAgICAgcmVuZGVyUGlwZUlkOiBcInN0ZW5jaWxNYXNrXCIsXG4gICAgICBhY3Rpb246IFwicG9wTWFza0VuZFwiLFxuICAgICAgY2FuQnVuZGxlOiBmYWxzZVxuICAgIH0pO1xuICB9XG4gIGV4ZWN1dGUoaW5zdHJ1Y3Rpb24pIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgcmVuZGVyZXIgPSB0aGlzLl9yZW5kZXJlcjtcbiAgICBjb25zdCByZW5kZXJUYXJnZXRVaWQgPSByZW5kZXJlci5yZW5kZXJUYXJnZXQucmVuZGVyVGFyZ2V0LnVpZDtcbiAgICBsZXQgbWFza1N0YWNrSW5kZXggPSAoX2EgPSB0aGlzLl9tYXNrU3RhY2tIYXNoKVtyZW5kZXJUYXJnZXRVaWRdID8/IChfYVtyZW5kZXJUYXJnZXRVaWRdID0gMCk7XG4gICAgaWYgKGluc3RydWN0aW9uLmFjdGlvbiA9PT0gXCJwdXNoTWFza0JlZ2luXCIpIHtcbiAgICAgIHJlbmRlcmVyLnJlbmRlclRhcmdldC5lbnN1cmVEZXB0aFN0ZW5jaWwoKTtcbiAgICAgIHJlbmRlcmVyLnN0ZW5jaWwuc2V0U3RlbmNpbE1vZGUoU1RFTkNJTF9NT0RFUy5SRU5ERVJJTkdfTUFTS19BREQsIG1hc2tTdGFja0luZGV4KTtcbiAgICAgIG1hc2tTdGFja0luZGV4Kys7XG4gICAgICByZW5kZXJlci5jb2xvck1hc2suc2V0TWFzaygwKTtcbiAgICB9IGVsc2UgaWYgKGluc3RydWN0aW9uLmFjdGlvbiA9PT0gXCJwdXNoTWFza0VuZFwiKSB7XG4gICAgICByZW5kZXJlci5zdGVuY2lsLnNldFN0ZW5jaWxNb2RlKFNURU5DSUxfTU9ERVMuTUFTS19BQ1RJVkUsIG1hc2tTdGFja0luZGV4KTtcbiAgICAgIHJlbmRlcmVyLmNvbG9yTWFzay5zZXRNYXNrKDE1KTtcbiAgICB9IGVsc2UgaWYgKGluc3RydWN0aW9uLmFjdGlvbiA9PT0gXCJwb3BNYXNrQmVnaW5cIikge1xuICAgICAgcmVuZGVyZXIuY29sb3JNYXNrLnNldE1hc2soMCk7XG4gICAgICBpZiAobWFza1N0YWNrSW5kZXggIT09IDApIHtcbiAgICAgICAgcmVuZGVyZXIuc3RlbmNpbC5zZXRTdGVuY2lsTW9kZShTVEVOQ0lMX01PREVTLlJFTkRFUklOR19NQVNLX1JFTU9WRSwgbWFza1N0YWNrSW5kZXgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVuZGVyZXIucmVuZGVyVGFyZ2V0LmNsZWFyKG51bGwsIENMRUFSLlNURU5DSUwpO1xuICAgICAgICByZW5kZXJlci5zdGVuY2lsLnNldFN0ZW5jaWxNb2RlKFNURU5DSUxfTU9ERVMuRElTQUJMRUQsIG1hc2tTdGFja0luZGV4KTtcbiAgICAgIH1cbiAgICAgIG1hc2tTdGFja0luZGV4LS07XG4gICAgfSBlbHNlIGlmIChpbnN0cnVjdGlvbi5hY3Rpb24gPT09IFwicG9wTWFza0VuZFwiKSB7XG4gICAgICByZW5kZXJlci5zdGVuY2lsLnNldFN0ZW5jaWxNb2RlKFNURU5DSUxfTU9ERVMuTUFTS19BQ1RJVkUsIG1hc2tTdGFja0luZGV4KTtcbiAgICAgIHJlbmRlcmVyLmNvbG9yTWFzay5zZXRNYXNrKDE1KTtcbiAgICB9XG4gICAgdGhpcy5fbWFza1N0YWNrSGFzaFtyZW5kZXJUYXJnZXRVaWRdID0gbWFza1N0YWNrSW5kZXg7XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLl9yZW5kZXJlciA9IG51bGw7XG4gICAgdGhpcy5fbWFza1N0YWNrSGFzaCA9IG51bGw7XG4gICAgdGhpcy5fbWFza0hhc2ggPSBudWxsO1xuICB9XG59XG5TdGVuY2lsTWFza1BpcGUuZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHTFBpcGVzLFxuICAgIEV4dGVuc2lvblR5cGUuV2ViR1BVUGlwZXMsXG4gICAgRXh0ZW5zaW9uVHlwZS5DYW52YXNQaXBlc1xuICBdLFxuICBuYW1lOiBcInN0ZW5jaWxNYXNrXCJcbn07XG5cbmV4cG9ydCB7IFN0ZW5jaWxNYXNrUGlwZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3RlbmNpbE1hc2tQaXBlLm1qcy5tYXBcbiIsImltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vLi4vLi4vLi4vY29sb3IvQ29sb3IubWpzJztcbmltcG9ydCB7IEV4dGVuc2lvblR5cGUgfSBmcm9tICcuLi8uLi8uLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBfQmFja2dyb3VuZFN5c3RlbSA9IGNsYXNzIF9CYWNrZ3JvdW5kU3lzdGVtIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jbGVhckJlZm9yZVJlbmRlciA9IHRydWU7XG4gICAgdGhpcy5fYmFja2dyb3VuZENvbG9yID0gbmV3IENvbG9yKDApO1xuICAgIHRoaXMuY29sb3IgPSB0aGlzLl9iYWNrZ3JvdW5kQ29sb3I7XG4gICAgdGhpcy5hbHBoYSA9IDE7XG4gIH1cbiAgLyoqXG4gICAqIGluaXRpYXRlcyB0aGUgYmFja2dyb3VuZCBzeXN0ZW1cbiAgICogQHBhcmFtIG9wdGlvbnMgLSB0aGUgb3B0aW9ucyBmb3IgdGhlIGJhY2tncm91bmQgY29sb3JzXG4gICAqL1xuICBpbml0KG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0geyAuLi5fQmFja2dyb3VuZFN5c3RlbS5kZWZhdWx0T3B0aW9ucywgLi4ub3B0aW9ucyB9O1xuICAgIHRoaXMuY2xlYXJCZWZvcmVSZW5kZXIgPSBvcHRpb25zLmNsZWFyQmVmb3JlUmVuZGVyO1xuICAgIHRoaXMuY29sb3IgPSBvcHRpb25zLmJhY2tncm91bmQgfHwgb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IgfHwgdGhpcy5fYmFja2dyb3VuZENvbG9yO1xuICAgIHRoaXMuYWxwaGEgPSBvcHRpb25zLmJhY2tncm91bmRBbHBoYTtcbiAgICB0aGlzLl9iYWNrZ3JvdW5kQ29sb3Iuc2V0QWxwaGEob3B0aW9ucy5iYWNrZ3JvdW5kQWxwaGEpO1xuICB9XG4gIC8qKiBUaGUgYmFja2dyb3VuZCBjb2xvciB0byBmaWxsIGlmIG5vdCB0cmFuc3BhcmVudCAqL1xuICBnZXQgY29sb3IoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2JhY2tncm91bmRDb2xvcjtcbiAgfVxuICBzZXQgY29sb3IodmFsdWUpIHtcbiAgICB0aGlzLl9iYWNrZ3JvdW5kQ29sb3Iuc2V0VmFsdWUodmFsdWUpO1xuICB9XG4gIC8qKiBUaGUgYmFja2dyb3VuZCBjb2xvciBhbHBoYS4gU2V0dGluZyB0aGlzIHRvIDAgd2lsbCBtYWtlIHRoZSBjYW52YXMgdHJhbnNwYXJlbnQuICovXG4gIGdldCBhbHBoYSgpIHtcbiAgICByZXR1cm4gdGhpcy5fYmFja2dyb3VuZENvbG9yLmFscGhhO1xuICB9XG4gIHNldCBhbHBoYSh2YWx1ZSkge1xuICAgIHRoaXMuX2JhY2tncm91bmRDb2xvci5zZXRBbHBoYSh2YWx1ZSk7XG4gIH1cbiAgLyoqIFRoZSBiYWNrZ3JvdW5kIGNvbG9yIGFzIGFuIFtSLCBHLCBCLCBBXSBhcnJheS4gKi9cbiAgZ2V0IGNvbG9yUmdiYSgpIHtcbiAgICByZXR1cm4gdGhpcy5fYmFja2dyb3VuZENvbG9yLnRvQXJyYXkoKTtcbiAgfVxuICAvKipcbiAgICogZGVzdHJveXMgdGhlIGJhY2tncm91bmQgc3lzdGVtXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAaWdub3JlXG4gICAqL1xuICBkZXN0cm95KCkge1xuICB9XG59O1xuLyoqIEBpZ25vcmUgKi9cbl9CYWNrZ3JvdW5kU3lzdGVtLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW1xuICAgIEV4dGVuc2lvblR5cGUuV2ViR0xTeXN0ZW0sXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHUFVTeXN0ZW0sXG4gICAgRXh0ZW5zaW9uVHlwZS5DYW52YXNTeXN0ZW1cbiAgXSxcbiAgbmFtZTogXCJiYWNrZ3JvdW5kXCIsXG4gIHByaW9yaXR5OiAwXG59O1xuLyoqIGRlZmF1bHQgb3B0aW9ucyB1c2VkIGJ5IHRoZSBzeXN0ZW0gKi9cbl9CYWNrZ3JvdW5kU3lzdGVtLmRlZmF1bHRPcHRpb25zID0ge1xuICAvKipcbiAgICoge0BsaW5rIFdlYkdMT3B0aW9ucy5iYWNrZ3JvdW5kQWxwaGF9XG4gICAqIEBkZWZhdWx0IDFcbiAgICovXG4gIGJhY2tncm91bmRBbHBoYTogMSxcbiAgLyoqXG4gICAqIHtAbGluayBXZWJHTE9wdGlvbnMuYmFja2dyb3VuZENvbG9yfVxuICAgKiBAZGVmYXVsdCAweDAwMDAwMFxuICAgKi9cbiAgYmFja2dyb3VuZENvbG9yOiAwLFxuICAvKipcbiAgICoge0BsaW5rIFdlYkdMT3B0aW9ucy5jbGVhckJlZm9yZVJlbmRlcn1cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgY2xlYXJCZWZvcmVSZW5kZXI6IHRydWVcbn07XG5sZXQgQmFja2dyb3VuZFN5c3RlbSA9IF9CYWNrZ3JvdW5kU3lzdGVtO1xuXG5leHBvcnQgeyBCYWNrZ3JvdW5kU3lzdGVtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1CYWNrZ3JvdW5kU3lzdGVtLm1qcy5tYXBcbiIsImltcG9ydCB7IGV4dGVuc2lvbnMsIEV4dGVuc2lvblR5cGUgfSBmcm9tICcuLi8uLi8uLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcbmltcG9ydCB7IEZpbHRlckVmZmVjdCB9IGZyb20gJy4uLy4uLy4uLy4uL2ZpbHRlcnMvRmlsdGVyRWZmZWN0Lm1qcyc7XG5pbXBvcnQgeyB3YXJuIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvbG9nZ2luZy93YXJuLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY29uc3QgQkxFTkRfTU9ERV9GSUxURVJTID0ge307XG5leHRlbnNpb25zLmhhbmRsZShFeHRlbnNpb25UeXBlLkJsZW5kTW9kZSwgKHZhbHVlKSA9PiB7XG4gIGlmICghdmFsdWUubmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkJsZW5kTW9kZSBleHRlbnNpb24gbXVzdCBoYXZlIGEgbmFtZSBwcm9wZXJ0eVwiKTtcbiAgfVxuICBCTEVORF9NT0RFX0ZJTFRFUlNbdmFsdWUubmFtZV0gPSB2YWx1ZS5yZWY7XG59LCAodmFsdWUpID0+IHtcbiAgZGVsZXRlIEJMRU5EX01PREVfRklMVEVSU1t2YWx1ZS5uYW1lXTtcbn0pO1xuY2xhc3MgQmxlbmRNb2RlUGlwZSB7XG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyKSB7XG4gICAgdGhpcy5faXNBZHZhbmNlZCA9IGZhbHNlO1xuICAgIHRoaXMuX2ZpbHRlckhhc2ggPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xuICB9XG4gIC8qKlxuICAgKiBUaGlzIGVuc3VyZXMgdGhhdCBhIGJsZW5kTW9kZSBzd2l0Y2ggaXMgYWRkZWQgdG8gdGhlIGluc3RydWN0aW9uIHNldCBpZiB0aGUgYmxlbmQgbW9kZSBoYXMgY2hhbmdlZC5cbiAgICogQHBhcmFtIHJlbmRlcmFibGUgLSBUaGUgcmVuZGVyYWJsZSB3ZSBhcmUgYWRkaW5nIHRvIHRoZSBpbnN0cnVjdGlvbiBzZXRcbiAgICogQHBhcmFtIGJsZW5kTW9kZSAtIFRoZSBibGVuZCBtb2RlIG9mIHRoZSByZW5kZXJhYmxlXG4gICAqIEBwYXJhbSBpbnN0cnVjdGlvblNldCAtIFRoZSBpbnN0cnVjdGlvbiBzZXQgd2UgYXJlIGFkZGluZyB0b1xuICAgKi9cbiAgc2V0QmxlbmRNb2RlKHJlbmRlcmFibGUsIGJsZW5kTW9kZSwgaW5zdHJ1Y3Rpb25TZXQpIHtcbiAgICBpZiAodGhpcy5fYWN0aXZlQmxlbmRNb2RlID09PSBibGVuZE1vZGUpIHtcbiAgICAgIGlmICh0aGlzLl9pc0FkdmFuY2VkKVxuICAgICAgICB0aGlzLl9yZW5kZXJhYmxlTGlzdC5wdXNoKHJlbmRlcmFibGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9hY3RpdmVCbGVuZE1vZGUgPSBibGVuZE1vZGU7XG4gICAgaWYgKHRoaXMuX2lzQWR2YW5jZWQpIHtcbiAgICAgIHRoaXMuX2VuZEFkdmFuY2VkQmxlbmRNb2RlKGluc3RydWN0aW9uU2V0KTtcbiAgICB9XG4gICAgdGhpcy5faXNBZHZhbmNlZCA9ICEhQkxFTkRfTU9ERV9GSUxURVJTW2JsZW5kTW9kZV07XG4gICAgaWYgKHRoaXMuX2lzQWR2YW5jZWQpIHtcbiAgICAgIHRoaXMuX2JlZ2luQWR2YW5jZWRCbGVuZE1vZGUoaW5zdHJ1Y3Rpb25TZXQpO1xuICAgICAgdGhpcy5fcmVuZGVyYWJsZUxpc3QucHVzaChyZW5kZXJhYmxlKTtcbiAgICB9XG4gIH1cbiAgX2JlZ2luQWR2YW5jZWRCbGVuZE1vZGUoaW5zdHJ1Y3Rpb25TZXQpIHtcbiAgICB0aGlzLl9yZW5kZXJlci5yZW5kZXJQaXBlcy5iYXRjaC5icmVhayhpbnN0cnVjdGlvblNldCk7XG4gICAgY29uc3QgYmxlbmRNb2RlID0gdGhpcy5fYWN0aXZlQmxlbmRNb2RlO1xuICAgIGlmICghQkxFTkRfTU9ERV9GSUxURVJTW2JsZW5kTW9kZV0pIHtcbiAgICAgIHdhcm4oYFVuYWJsZSB0byBhc3NpZ24gQmxlbmRNb2RlOiAnJHtibGVuZE1vZGV9Jy4gWW91IG1heSB3YW50IHRvIGluY2x1ZGU6IGltcG9ydCAncGl4aS5qcy9hZHZhbmNlZC1ibGVuZC1tb2RlcydgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IGZpbHRlckVmZmVjdCA9IHRoaXMuX2ZpbHRlckhhc2hbYmxlbmRNb2RlXTtcbiAgICBpZiAoIWZpbHRlckVmZmVjdCkge1xuICAgICAgZmlsdGVyRWZmZWN0ID0gdGhpcy5fZmlsdGVySGFzaFtibGVuZE1vZGVdID0gbmV3IEZpbHRlckVmZmVjdCgpO1xuICAgICAgZmlsdGVyRWZmZWN0LmZpbHRlcnMgPSBbbmV3IEJMRU5EX01PREVfRklMVEVSU1tibGVuZE1vZGVdKCldO1xuICAgIH1cbiAgICBjb25zdCBpbnN0cnVjdGlvbiA9IHtcbiAgICAgIHJlbmRlclBpcGVJZDogXCJmaWx0ZXJcIixcbiAgICAgIGFjdGlvbjogXCJwdXNoRmlsdGVyXCIsXG4gICAgICByZW5kZXJhYmxlczogW10sXG4gICAgICBmaWx0ZXJFZmZlY3QsXG4gICAgICBjYW5CdW5kbGU6IGZhbHNlXG4gICAgfTtcbiAgICB0aGlzLl9yZW5kZXJhYmxlTGlzdCA9IGluc3RydWN0aW9uLnJlbmRlcmFibGVzO1xuICAgIGluc3RydWN0aW9uU2V0LmFkZChpbnN0cnVjdGlvbik7XG4gIH1cbiAgX2VuZEFkdmFuY2VkQmxlbmRNb2RlKGluc3RydWN0aW9uU2V0KSB7XG4gICAgdGhpcy5fcmVuZGVyYWJsZUxpc3QgPSBudWxsO1xuICAgIHRoaXMuX3JlbmRlcmVyLnJlbmRlclBpcGVzLmJhdGNoLmJyZWFrKGluc3RydWN0aW9uU2V0KTtcbiAgICBpbnN0cnVjdGlvblNldC5hZGQoe1xuICAgICAgcmVuZGVyUGlwZUlkOiBcImZpbHRlclwiLFxuICAgICAgYWN0aW9uOiBcInBvcEZpbHRlclwiLFxuICAgICAgY2FuQnVuZGxlOiBmYWxzZVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBjYWxsZWQgd2hlbiB0aGUgaW5zdHJ1Y3Rpb24gYnVpbGQgcHJvY2VzcyBpcyBzdGFydGluZyB0aGlzIHdpbGwgcmVzZXQgaW50ZXJuYWxseSB0byB0aGUgZGVmYXVsdCBibGVuZCBtb2RlXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAaWdub3JlXG4gICAqL1xuICBidWlsZFN0YXJ0KCkge1xuICAgIHRoaXMuX2lzQWR2YW5jZWQgPSBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogY2FsbGVkIHdoZW4gdGhlIGluc3RydWN0aW9uIGJ1aWxkIHByb2Nlc3MgaXMgZmluaXNoZWQsIGVuc3VyaW5nIHRoYXQgaWYgdGhlcmUgaXMgYW4gYWR2YW5jZWQgYmxlbmQgbW9kZVxuICAgKiBhY3RpdmUsIHdlIGFkZCB0aGUgZmluYWwgcmVuZGVyIGluc3RydWN0aW9ucyBhZGRlZCB0byB0aGUgaW5zdHJ1Y3Rpb24gc2V0XG4gICAqIEBwYXJhbSBpbnN0cnVjdGlvblNldCAtIFRoZSBpbnN0cnVjdGlvbiBzZXQgd2UgYXJlIGFkZGluZyB0b1xuICAgKiBAaW50ZXJuYWxcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgYnVpbGRFbmQoaW5zdHJ1Y3Rpb25TZXQpIHtcbiAgICBpZiAodGhpcy5faXNBZHZhbmNlZCkge1xuICAgICAgdGhpcy5fZW5kQWR2YW5jZWRCbGVuZE1vZGUoaW5zdHJ1Y3Rpb25TZXQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSBudWxsO1xuICAgIHRoaXMuX3JlbmRlcmFibGVMaXN0ID0gbnVsbDtcbiAgICBmb3IgKGNvbnN0IGkgaW4gdGhpcy5fZmlsdGVySGFzaCkge1xuICAgICAgdGhpcy5fZmlsdGVySGFzaFtpXS5kZXN0cm95KCk7XG4gICAgfVxuICAgIHRoaXMuX2ZpbHRlckhhc2ggPSBudWxsO1xuICB9XG59XG4vKiogQGlnbm9yZSAqL1xuQmxlbmRNb2RlUGlwZS5leHRlbnNpb24gPSB7XG4gIHR5cGU6IFtcbiAgICBFeHRlbnNpb25UeXBlLldlYkdMUGlwZXMsXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHUFVQaXBlcyxcbiAgICBFeHRlbnNpb25UeXBlLkNhbnZhc1BpcGVzXG4gIF0sXG4gIG5hbWU6IFwiYmxlbmRNb2RlXCJcbn07XG5cbmV4cG9ydCB7IEJsZW5kTW9kZVBpcGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUJsZW5kTW9kZVBpcGUubWpzLm1hcFxuIiwiaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uLy4uLy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgQ29udGFpbmVyIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmUvY29udGFpbmVyL0NvbnRhaW5lci5tanMnO1xuaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gJy4uL3RleHR1cmUvVGV4dHVyZS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNvbnN0IGltYWdlVHlwZXMgPSB7XG4gIHBuZzogXCJpbWFnZS9wbmdcIixcbiAganBnOiBcImltYWdlL2pwZWdcIixcbiAgd2VicDogXCJpbWFnZS93ZWJwXCJcbn07XG5jb25zdCBfRXh0cmFjdFN5c3RlbSA9IGNsYXNzIF9FeHRyYWN0U3lzdGVtIHtcbiAgLyoqIEBwYXJhbSByZW5kZXJlciAtIFRoZSByZW5kZXJlciB0aGlzIFN5c3RlbSB3b3JrcyBmb3IuICovXG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyKSB7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgfVxuICBfbm9ybWFsaXplT3B0aW9ucyhvcHRpb25zLCBkZWZhdWx0cyA9IHt9KSB7XG4gICAgaWYgKG9wdGlvbnMgaW5zdGFuY2VvZiBDb250YWluZXIgfHwgb3B0aW9ucyBpbnN0YW5jZW9mIFRleHR1cmUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRhcmdldDogb3B0aW9ucyxcbiAgICAgICAgLi4uZGVmYXVsdHNcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAuLi5kZWZhdWx0cyxcbiAgICAgIC4uLm9wdGlvbnNcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBXaWxsIHJldHVybiBhIEhUTUwgSW1hZ2Ugb2YgdGhlIHRhcmdldFxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIGZvciBjcmVhdGluZyB0aGUgaW1hZ2UsIG9yIHRoZSB0YXJnZXQgdG8gZXh0cmFjdFxuICAgKiBAcmV0dXJucyAtIEhUTUwgSW1hZ2Ugb2YgdGhlIHRhcmdldFxuICAgKi9cbiAgYXN5bmMgaW1hZ2Uob3B0aW9ucykge1xuICAgIGNvbnN0IGltYWdlID0gbmV3IEltYWdlKCk7XG4gICAgaW1hZ2Uuc3JjID0gYXdhaXQgdGhpcy5iYXNlNjQob3B0aW9ucyk7XG4gICAgcmV0dXJuIGltYWdlO1xuICB9XG4gIC8qKlxuICAgKiBXaWxsIHJldHVybiBhIGJhc2U2NCBlbmNvZGVkIHN0cmluZyBvZiB0aGlzIHRhcmdldC4gSXQgd29ya3MgYnkgY2FsbGluZ1xuICAgKiBgRXh0cmFjdC5jYW52YXNgIGFuZCB0aGVuIHJ1bm5pbmcgdG9EYXRhVVJMIG9uIHRoYXQuXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZm9yIGNyZWF0aW5nIHRoZSBpbWFnZSwgb3IgdGhlIHRhcmdldCB0byBleHRyYWN0XG4gICAqL1xuICBhc3luYyBiYXNlNjQob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB0aGlzLl9ub3JtYWxpemVPcHRpb25zKFxuICAgICAgb3B0aW9ucyxcbiAgICAgIF9FeHRyYWN0U3lzdGVtLmRlZmF1bHRJbWFnZU9wdGlvbnNcbiAgICApO1xuICAgIGNvbnN0IHsgZm9ybWF0LCBxdWFsaXR5IH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IGNhbnZhcyA9IHRoaXMuY2FudmFzKG9wdGlvbnMpO1xuICAgIGlmIChjYW52YXMudG9CbG9iICE9PSB2b2lkIDApIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNhbnZhcy50b0Jsb2IoKGJsb2IpID0+IHtcbiAgICAgICAgICBpZiAoIWJsb2IpIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJJQ2FudmFzLnRvQmxvYiBmYWlsZWQhXCIpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgICAgICByZWFkZXIub25sb2FkID0gKCkgPT4gcmVzb2x2ZShyZWFkZXIucmVzdWx0KTtcbiAgICAgICAgICByZWFkZXIub25lcnJvciA9IHJlamVjdDtcbiAgICAgICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChibG9iKTtcbiAgICAgICAgfSwgaW1hZ2VUeXBlc1tmb3JtYXRdLCBxdWFsaXR5KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoY2FudmFzLnRvRGF0YVVSTCAhPT0gdm9pZCAwKSB7XG4gICAgICByZXR1cm4gY2FudmFzLnRvRGF0YVVSTChpbWFnZVR5cGVzW2Zvcm1hdF0sIHF1YWxpdHkpO1xuICAgIH1cbiAgICBpZiAoY2FudmFzLmNvbnZlcnRUb0Jsb2IgIT09IHZvaWQgMCkge1xuICAgICAgY29uc3QgYmxvYiA9IGF3YWl0IGNhbnZhcy5jb252ZXJ0VG9CbG9iKHsgdHlwZTogaW1hZ2VUeXBlc1tmb3JtYXRdLCBxdWFsaXR5IH0pO1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgICAgcmVhZGVyLm9ubG9hZCA9ICgpID0+IHJlc29sdmUocmVhZGVyLnJlc3VsdCk7XG4gICAgICAgIHJlYWRlci5vbmVycm9yID0gcmVqZWN0O1xuICAgICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChibG9iKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHRyYWN0LmJhc2U2NCgpIHJlcXVpcmVzIElDYW52YXMudG9EYXRhVVJMLCBJQ2FudmFzLnRvQmxvYiwgb3IgSUNhbnZhcy5jb252ZXJ0VG9CbG9iIHRvIGJlIGltcGxlbWVudGVkXCIpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgQ2FudmFzIGVsZW1lbnQsIHJlbmRlcnMgdGhpcyB0YXJnZXQgdG8gaXQgYW5kIHRoZW4gcmV0dXJucyBpdC5cbiAgICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBmb3IgY3JlYXRpbmcgdGhlIGNhbnZhcywgb3IgdGhlIHRhcmdldCB0byBleHRyYWN0XG4gICAqIEByZXR1cm5zIC0gQSBDYW52YXMgZWxlbWVudCB3aXRoIHRoZSB0ZXh0dXJlIHJlbmRlcmVkIG9uLlxuICAgKi9cbiAgY2FudmFzKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gdGhpcy5fbm9ybWFsaXplT3B0aW9ucyhvcHRpb25zKTtcbiAgICBjb25zdCB0YXJnZXQgPSBvcHRpb25zLnRhcmdldDtcbiAgICBjb25zdCByZW5kZXJlciA9IHRoaXMuX3JlbmRlcmVyO1xuICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBUZXh0dXJlKSB7XG4gICAgICByZXR1cm4gcmVuZGVyZXIudGV4dHVyZS5nZW5lcmF0ZUNhbnZhcyh0YXJnZXQpO1xuICAgIH1cbiAgICBjb25zdCB0ZXh0dXJlID0gcmVuZGVyZXIudGV4dHVyZUdlbmVyYXRvci5nZW5lcmF0ZVRleHR1cmUob3B0aW9ucyk7XG4gICAgY29uc3QgY2FudmFzID0gcmVuZGVyZXIudGV4dHVyZS5nZW5lcmF0ZUNhbnZhcyh0ZXh0dXJlKTtcbiAgICB0ZXh0dXJlLmRlc3Ryb3koKTtcbiAgICByZXR1cm4gY2FudmFzO1xuICB9XG4gIC8qKlxuICAgKiBXaWxsIHJldHVybiBhIG9uZS1kaW1lbnNpb25hbCBhcnJheSBjb250YWluaW5nIHRoZSBwaXhlbCBkYXRhIG9mIHRoZSBlbnRpcmUgdGV4dHVyZSBpbiBSR0JBXG4gICAqIG9yZGVyLCB3aXRoIGludGVnZXIgdmFsdWVzIGJldHdlZW4gMCBhbmQgMjU1IChpbmNsdWRlZCkuXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZm9yIGV4dHJhY3RpbmcgdGhlIGltYWdlLCBvciB0aGUgdGFyZ2V0IHRvIGV4dHJhY3RcbiAgICogQHJldHVybnMgLSBPbmUtZGltZW5zaW9uYWwgYXJyYXkgY29udGFpbmluZyB0aGUgcGl4ZWwgZGF0YSBvZiB0aGUgZW50aXJlIHRleHR1cmVcbiAgICovXG4gIHBpeGVscyhvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHRoaXMuX25vcm1hbGl6ZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgY29uc3QgdGFyZ2V0ID0gb3B0aW9ucy50YXJnZXQ7XG4gICAgY29uc3QgcmVuZGVyZXIgPSB0aGlzLl9yZW5kZXJlcjtcbiAgICBjb25zdCB0ZXh0dXJlID0gdGFyZ2V0IGluc3RhbmNlb2YgVGV4dHVyZSA/IHRhcmdldCA6IHJlbmRlcmVyLnRleHR1cmVHZW5lcmF0b3IuZ2VuZXJhdGVUZXh0dXJlKG9wdGlvbnMpO1xuICAgIGNvbnN0IHBpeGVsSW5mbyA9IHJlbmRlcmVyLnRleHR1cmUuZ2V0UGl4ZWxzKHRleHR1cmUpO1xuICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBDb250YWluZXIpIHtcbiAgICAgIHRleHR1cmUuZGVzdHJveSgpO1xuICAgIH1cbiAgICByZXR1cm4gcGl4ZWxJbmZvO1xuICB9XG4gIC8qKlxuICAgKiBXaWxsIHJldHVybiBhIHRleHR1cmUgb2YgdGhlIHRhcmdldFxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIGZvciBjcmVhdGluZyB0aGUgdGV4dHVyZSwgb3IgdGhlIHRhcmdldCB0byBleHRyYWN0XG4gICAqIEByZXR1cm5zIC0gQSB0ZXh0dXJlIG9mIHRoZSB0YXJnZXRcbiAgICovXG4gIHRleHR1cmUob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB0aGlzLl9ub3JtYWxpemVPcHRpb25zKG9wdGlvbnMpO1xuICAgIGlmIChvcHRpb25zLnRhcmdldCBpbnN0YW5jZW9mIFRleHR1cmUpXG4gICAgICByZXR1cm4gb3B0aW9ucy50YXJnZXQ7XG4gICAgcmV0dXJuIHRoaXMuX3JlbmRlcmVyLnRleHR1cmVHZW5lcmF0b3IuZ2VuZXJhdGVUZXh0dXJlKG9wdGlvbnMpO1xuICB9XG4gIC8qKlxuICAgKiBXaWxsIGV4dHJhY3QgYSBIVE1MSW1hZ2Ugb2YgdGhlIHRhcmdldCBhbmQgZG93bmxvYWQgaXRcbiAgICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBmb3IgZG93bmxvYWRpbmcgYW5kIGV4dHJhY3RpbmcgdGhlIGltYWdlLCBvciB0aGUgdGFyZ2V0IHRvIGV4dHJhY3RcbiAgICovXG4gIGRvd25sb2FkKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gdGhpcy5fbm9ybWFsaXplT3B0aW9ucyhvcHRpb25zKTtcbiAgICBjb25zdCBjYW52YXMgPSB0aGlzLmNhbnZhcyhvcHRpb25zKTtcbiAgICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG4gICAgbGluay5kb3dubG9hZCA9IG9wdGlvbnMuZmlsZW5hbWUgPz8gXCJpbWFnZS5wbmdcIjtcbiAgICBsaW5rLmhyZWYgPSBjYW52YXMudG9EYXRhVVJMKFwiaW1hZ2UvcG5nXCIpO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobGluayk7XG4gICAgbGluay5jbGljaygpO1xuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQobGluayk7XG4gIH1cbiAgLyoqXG4gICAqIExvZ3MgdGhlIHRhcmdldCB0byB0aGUgY29uc29sZSBhcyBhbiBpbWFnZS4gVGhpcyBpcyBhIHVzZWZ1bCB3YXkgdG8gZGVidWcgd2hhdCdzIGhhcHBlbmluZyBpbiB0aGUgcmVuZGVyZXIuXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZm9yIGxvZ2dpbmcgdGhlIGltYWdlLCBvciB0aGUgdGFyZ2V0IHRvIGxvZ1xuICAgKi9cbiAgbG9nKG9wdGlvbnMpIHtcbiAgICBjb25zdCB3aWR0aCA9IG9wdGlvbnMud2lkdGggPz8gMjAwO1xuICAgIG9wdGlvbnMgPSB0aGlzLl9ub3JtYWxpemVPcHRpb25zKG9wdGlvbnMpO1xuICAgIGNvbnN0IGNhbnZhcyA9IHRoaXMuY2FudmFzKG9wdGlvbnMpO1xuICAgIGNvbnN0IGJhc2U2NCA9IGNhbnZhcy50b0RhdGFVUkwoKTtcbiAgICBjb25zb2xlLmxvZyhgW1BpeGkgVGV4dHVyZV0gJHtjYW52YXMud2lkdGh9cHggJHtjYW52YXMuaGVpZ2h0fXB4YCk7XG4gICAgY29uc3Qgc3R5bGUgPSBbXG4gICAgICBcImZvbnQtc2l6ZTogMXB4O1wiLFxuICAgICAgYHBhZGRpbmc6ICR7d2lkdGh9cHggJHszMDB9cHg7YCxcbiAgICAgIGBiYWNrZ3JvdW5kOiB1cmwoJHtiYXNlNjR9KSBuby1yZXBlYXQ7YCxcbiAgICAgIFwiYmFja2dyb3VuZC1zaXplOiBjb250YWluO1wiXG4gICAgXS5qb2luKFwiIFwiKTtcbiAgICBjb25zb2xlLmxvZyhcIiVjIFwiLCBzdHlsZSk7XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLl9yZW5kZXJlciA9IG51bGw7XG4gIH1cbn07XG4vKiogQGlnbm9yZSAqL1xuX0V4dHJhY3RTeXN0ZW0uZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHTFN5c3RlbSxcbiAgICBFeHRlbnNpb25UeXBlLldlYkdQVVN5c3RlbVxuICBdLFxuICBuYW1lOiBcImV4dHJhY3RcIlxufTtcbi8qKiBEZWZhdWx0IG9wdGlvbnMgZm9yIGNyZWF0aW5nIGFuIGltYWdlLiAqL1xuX0V4dHJhY3RTeXN0ZW0uZGVmYXVsdEltYWdlT3B0aW9ucyA9IHtcbiAgLyoqIFRoZSBmb3JtYXQgb2YgdGhlIGltYWdlLiAqL1xuICBmb3JtYXQ6IFwicG5nXCIsXG4gIC8qKiBUaGUgcXVhbGl0eSBvZiB0aGUgaW1hZ2UuICovXG4gIHF1YWxpdHk6IDFcbn07XG5sZXQgRXh0cmFjdFN5c3RlbSA9IF9FeHRyYWN0U3lzdGVtO1xuXG5leHBvcnQgeyBFeHRyYWN0U3lzdGVtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1FeHRyYWN0U3lzdGVtLm1qcy5tYXBcbiIsImltcG9ydCB7IFRleHR1cmVTb3VyY2UgfSBmcm9tICcuL3NvdXJjZXMvVGV4dHVyZVNvdXJjZS5tanMnO1xuaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gJy4vVGV4dHVyZS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNsYXNzIFJlbmRlclRleHR1cmUgZXh0ZW5kcyBUZXh0dXJlIHtcbiAgc3RhdGljIGNyZWF0ZShvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBUZXh0dXJlKHtcbiAgICAgIHNvdXJjZTogbmV3IFRleHR1cmVTb3VyY2Uob3B0aW9ucylcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogUmVzaXplcyB0aGUgcmVuZGVyIHRleHR1cmUuXG4gICAqIEBwYXJhbSB3aWR0aCAtIFRoZSBuZXcgd2lkdGggb2YgdGhlIHJlbmRlciB0ZXh0dXJlLlxuICAgKiBAcGFyYW0gaGVpZ2h0IC0gVGhlIG5ldyBoZWlnaHQgb2YgdGhlIHJlbmRlciB0ZXh0dXJlLlxuICAgKiBAcGFyYW0gcmVzb2x1dGlvbiAtIFRoZSBuZXcgcmVzb2x1dGlvbiBvZiB0aGUgcmVuZGVyIHRleHR1cmUuXG4gICAqIEByZXR1cm5zIFRoaXMgdGV4dHVyZS5cbiAgICovXG4gIHJlc2l6ZSh3aWR0aCwgaGVpZ2h0LCByZXNvbHV0aW9uKSB7XG4gICAgdGhpcy5zb3VyY2UucmVzaXplKHdpZHRoLCBoZWlnaHQsIHJlc29sdXRpb24pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG5cbmV4cG9ydCB7IFJlbmRlclRleHR1cmUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJlbmRlclRleHR1cmUubWpzLm1hcFxuIiwiaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi8uLi8uLi8uLi9jb2xvci9Db2xvci5tanMnO1xuaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uLy4uLy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgTWF0cml4IH0gZnJvbSAnLi4vLi4vLi4vLi4vbWF0aHMvbWF0cml4L01hdHJpeC5tanMnO1xuaW1wb3J0IHsgUmVjdGFuZ2xlIH0gZnJvbSAnLi4vLi4vLi4vLi4vbWF0aHMvc2hhcGVzL1JlY3RhbmdsZS5tanMnO1xuaW1wb3J0IHsgQm91bmRzIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmUvY29udGFpbmVyL2JvdW5kcy9Cb3VuZHMubWpzJztcbmltcG9ydCB7IGdldExvY2FsQm91bmRzIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmUvY29udGFpbmVyL2JvdW5kcy9nZXRMb2NhbEJvdW5kcy5tanMnO1xuaW1wb3J0IHsgQ29udGFpbmVyIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmUvY29udGFpbmVyL0NvbnRhaW5lci5tanMnO1xuaW1wb3J0IHsgUmVuZGVyVGV4dHVyZSB9IGZyb20gJy4uL3RleHR1cmUvUmVuZGVyVGV4dHVyZS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNvbnN0IHRlbXBSZWN0ID0gbmV3IFJlY3RhbmdsZSgpO1xuY29uc3QgdGVtcEJvdW5kcyA9IG5ldyBCb3VuZHMoKTtcbmNvbnN0IG5vQ29sb3IgPSBbMCwgMCwgMCwgMF07XG5jbGFzcyBHZW5lcmF0ZVRleHR1cmVTeXN0ZW0ge1xuICBjb25zdHJ1Y3RvcihyZW5kZXJlcikge1xuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG4gIH1cbiAgLyoqXG4gICAqIEEgVXNlZnVsIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHRleHR1cmUgb2YgdGhlIGRpc3BsYXkgb2JqZWN0IHRoYXQgY2FuIHRoZW4gYmUgdXNlZCB0byBjcmVhdGUgc3ByaXRlc1xuICAgKiBUaGlzIGNhbiBiZSBxdWl0ZSB1c2VmdWwgaWYgeW91ciBjb250YWluZXIgaXMgY29tcGxpY2F0ZWQgYW5kIG5lZWRzIHRvIGJlIHJldXNlZCBtdWx0aXBsZSB0aW1lcy5cbiAgICogQHBhcmFtIHtHZW5lcmF0ZVRleHR1cmVPcHRpb25zIHwgQ29udGFpbmVyfSBvcHRpb25zIC0gR2VuZXJhdGUgdGV4dHVyZSBvcHRpb25zLlxuICAgKiBAcGFyYW0ge0NvbnRhaW5lcn0gW29wdGlvbnMuY29udGFpbmVyXSAtIElmIG5vdCBnaXZlbiwgdGhlIHJlbmRlcmVyJ3MgcmVzb2x1dGlvbiBpcyB1c2VkLlxuICAgKiBAcGFyYW0ge1JlY3RhbmdsZX0gb3B0aW9ucy5yZWdpb24gLSBUaGUgcmVnaW9uIG9mIHRoZSBjb250YWluZXIsIHRoYXQgc2hhbGwgYmUgcmVuZGVyZWQsXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5yZXNvbHV0aW9uXSAtIFRoZSByZXNvbHV0aW9uIG9mIHRoZSB0ZXh0dXJlIGJlaW5nIGdlbmVyYXRlZC5cbiAgICogICAgICAgIGlmIG5vIHJlZ2lvbiBpcyBzcGVjaWZpZWQsIGRlZmF1bHRzIHRvIHRoZSBsb2NhbCBib3VuZHMgb2YgdGhlIGNvbnRhaW5lci5cbiAgICogQHBhcmFtIHtHZW5lcmF0ZVRleHR1cmVTb3VyY2VPcHRpb25zfSBbb3B0aW9ucy50ZXh0dXJlU291cmNlT3B0aW9uc10gLSBUZXh0dXJlIG9wdGlvbnMgZm9yIEdQVS5cbiAgICogQHJldHVybnMgYSBzaGlueSBuZXcgdGV4dHVyZSBvZiB0aGUgY29udGFpbmVyIHBhc3NlZCBpblxuICAgKi9cbiAgZ2VuZXJhdGVUZXh0dXJlKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyBpbnN0YW5jZW9mIENvbnRhaW5lcikge1xuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgdGFyZ2V0OiBvcHRpb25zLFxuICAgICAgICBmcmFtZTogdm9pZCAwLFxuICAgICAgICB0ZXh0dXJlU291cmNlT3B0aW9uczoge30sXG4gICAgICAgIHJlc29sdXRpb246IHZvaWQgMFxuICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgcmVzb2x1dGlvbiA9IG9wdGlvbnMucmVzb2x1dGlvbiB8fCB0aGlzLl9yZW5kZXJlci5yZXNvbHV0aW9uO1xuICAgIGNvbnN0IGFudGlhbGlhcyA9IG9wdGlvbnMuYW50aWFsaWFzIHx8IHRoaXMuX3JlbmRlcmVyLnZpZXcuYW50aWFsaWFzO1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IG9wdGlvbnMudGFyZ2V0O1xuICAgIGxldCBjbGVhckNvbG9yID0gb3B0aW9ucy5jbGVhckNvbG9yO1xuICAgIGlmIChjbGVhckNvbG9yKSB7XG4gICAgICBjb25zdCBpc1JHQkFBcnJheSA9IEFycmF5LmlzQXJyYXkoY2xlYXJDb2xvcikgJiYgY2xlYXJDb2xvci5sZW5ndGggPT09IDQ7XG4gICAgICBjbGVhckNvbG9yID0gaXNSR0JBQXJyYXkgPyBjbGVhckNvbG9yIDogQ29sb3Iuc2hhcmVkLnNldFZhbHVlKGNsZWFyQ29sb3IpLnRvQXJyYXkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2xlYXJDb2xvciA9IG5vQ29sb3I7XG4gICAgfVxuICAgIGNvbnN0IHJlZ2lvbiA9IG9wdGlvbnMuZnJhbWU/LmNvcHlUbyh0ZW1wUmVjdCkgfHwgZ2V0TG9jYWxCb3VuZHMoY29udGFpbmVyLCB0ZW1wQm91bmRzKS5yZWN0YW5nbGU7XG4gICAgcmVnaW9uLndpZHRoID0gTWF0aC5tYXgocmVnaW9uLndpZHRoLCAxIC8gcmVzb2x1dGlvbikgfCAwO1xuICAgIHJlZ2lvbi5oZWlnaHQgPSBNYXRoLm1heChyZWdpb24uaGVpZ2h0LCAxIC8gcmVzb2x1dGlvbikgfCAwO1xuICAgIGNvbnN0IHRhcmdldCA9IFJlbmRlclRleHR1cmUuY3JlYXRlKHtcbiAgICAgIC4uLm9wdGlvbnMudGV4dHVyZVNvdXJjZU9wdGlvbnMsXG4gICAgICB3aWR0aDogcmVnaW9uLndpZHRoLFxuICAgICAgaGVpZ2h0OiByZWdpb24uaGVpZ2h0LFxuICAgICAgcmVzb2x1dGlvbixcbiAgICAgIGFudGlhbGlhc1xuICAgIH0pO1xuICAgIGNvbnN0IHRyYW5zZm9ybSA9IE1hdHJpeC5zaGFyZWQudHJhbnNsYXRlKC1yZWdpb24ueCwgLXJlZ2lvbi55KTtcbiAgICB0aGlzLl9yZW5kZXJlci5yZW5kZXIoe1xuICAgICAgY29udGFpbmVyLFxuICAgICAgdHJhbnNmb3JtLFxuICAgICAgdGFyZ2V0LFxuICAgICAgY2xlYXJDb2xvclxuICAgIH0pO1xuICAgIHRhcmdldC5zb3VyY2UudXBkYXRlTWlwbWFwcygpO1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLl9yZW5kZXJlciA9IG51bGw7XG4gIH1cbn1cbi8qKiBAaWdub3JlICovXG5HZW5lcmF0ZVRleHR1cmVTeXN0ZW0uZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHTFN5c3RlbSxcbiAgICBFeHRlbnNpb25UeXBlLldlYkdQVVN5c3RlbVxuICBdLFxuICBuYW1lOiBcInRleHR1cmVHZW5lcmF0b3JcIlxufTtcblxuZXhwb3J0IHsgR2VuZXJhdGVUZXh0dXJlU3lzdGVtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HZW5lcmF0ZVRleHR1cmVTeXN0ZW0ubWpzLm1hcFxuIiwiaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uLy4uLy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgTWF0cml4IH0gZnJvbSAnLi4vLi4vLi4vLi4vbWF0aHMvbWF0cml4L01hdHJpeC5tanMnO1xuaW1wb3J0IHsgUG9pbnQgfSBmcm9tICcuLi8uLi8uLi8uLi9tYXRocy9wb2ludC9Qb2ludC5tanMnO1xuaW1wb3J0IHsgY29sb3IzMkJpdFRvVW5pZm9ybSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lL2dyYXBoaWNzL2dwdS9jb2xvclRvVW5pZm9ybS5tanMnO1xuaW1wb3J0IHsgQmluZEdyb3VwIH0gZnJvbSAnLi4vLi4vZ3B1L3NoYWRlci9CaW5kR3JvdXAubWpzJztcbmltcG9ydCB7IFJlbmRlcmVyVHlwZSB9IGZyb20gJy4uLy4uL3R5cGVzLm1qcyc7XG5pbXBvcnQgeyBVbmlmb3JtR3JvdXAgfSBmcm9tICcuLi9zaGFkZXIvVW5pZm9ybUdyb3VwLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY2xhc3MgR2xvYmFsVW5pZm9ybVN5c3RlbSB7XG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyKSB7XG4gICAgdGhpcy5fc3RhY2tJbmRleCA9IDA7XG4gICAgdGhpcy5fZ2xvYmFsVW5pZm9ybURhdGFTdGFjayA9IFtdO1xuICAgIHRoaXMuX3VuaWZvcm1zUG9vbCA9IFtdO1xuICAgIHRoaXMuX2FjdGl2ZVVuaWZvcm1zID0gW107XG4gICAgdGhpcy5fYmluZEdyb3VwUG9vbCA9IFtdO1xuICAgIHRoaXMuX2FjdGl2ZUJpbmRHcm91cHMgPSBbXTtcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xuICB9XG4gIHJlc2V0KCkge1xuICAgIHRoaXMuX3N0YWNrSW5kZXggPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fYWN0aXZlVW5pZm9ybXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuX3VuaWZvcm1zUG9vbC5wdXNoKHRoaXMuX2FjdGl2ZVVuaWZvcm1zW2ldKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9hY3RpdmVCaW5kR3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLl9iaW5kR3JvdXBQb29sLnB1c2godGhpcy5fYWN0aXZlQmluZEdyb3Vwc1tpXSk7XG4gICAgfVxuICAgIHRoaXMuX2FjdGl2ZVVuaWZvcm1zLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5fYWN0aXZlQmluZEdyb3Vwcy5sZW5ndGggPSAwO1xuICB9XG4gIHN0YXJ0KG9wdGlvbnMpIHtcbiAgICB0aGlzLnJlc2V0KCk7XG4gICAgdGhpcy5wdXNoKG9wdGlvbnMpO1xuICB9XG4gIGJpbmQoe1xuICAgIHNpemUsXG4gICAgcHJvamVjdGlvbk1hdHJpeCxcbiAgICB3b3JsZFRyYW5zZm9ybU1hdHJpeCxcbiAgICB3b3JsZENvbG9yLFxuICAgIG9mZnNldFxuICB9KSB7XG4gICAgY29uc3QgcmVuZGVyVGFyZ2V0ID0gdGhpcy5fcmVuZGVyZXIucmVuZGVyVGFyZ2V0LnJlbmRlclRhcmdldDtcbiAgICBjb25zdCBjdXJyZW50R2xvYmFsVW5pZm9ybURhdGEgPSB0aGlzLl9zdGFja0luZGV4ID8gdGhpcy5fZ2xvYmFsVW5pZm9ybURhdGFTdGFja1t0aGlzLl9zdGFja0luZGV4IC0gMV0gOiB7XG4gICAgICBwcm9qZWN0aW9uRGF0YTogcmVuZGVyVGFyZ2V0LFxuICAgICAgd29ybGRUcmFuc2Zvcm1NYXRyaXg6IG5ldyBNYXRyaXgoKSxcbiAgICAgIHdvcmxkQ29sb3I6IDQyOTQ5NjcyOTUsXG4gICAgICBvZmZzZXQ6IG5ldyBQb2ludCgpXG4gICAgfTtcbiAgICBjb25zdCBnbG9iYWxVbmlmb3JtRGF0YSA9IHtcbiAgICAgIHByb2plY3Rpb25NYXRyaXg6IHByb2plY3Rpb25NYXRyaXggfHwgdGhpcy5fcmVuZGVyZXIucmVuZGVyVGFyZ2V0LnByb2plY3Rpb25NYXRyaXgsXG4gICAgICByZXNvbHV0aW9uOiBzaXplIHx8IHJlbmRlclRhcmdldC5zaXplLFxuICAgICAgd29ybGRUcmFuc2Zvcm1NYXRyaXg6IHdvcmxkVHJhbnNmb3JtTWF0cml4IHx8IGN1cnJlbnRHbG9iYWxVbmlmb3JtRGF0YS53b3JsZFRyYW5zZm9ybU1hdHJpeCxcbiAgICAgIHdvcmxkQ29sb3I6IHdvcmxkQ29sb3IgfHwgY3VycmVudEdsb2JhbFVuaWZvcm1EYXRhLndvcmxkQ29sb3IsXG4gICAgICBvZmZzZXQ6IG9mZnNldCB8fCBjdXJyZW50R2xvYmFsVW5pZm9ybURhdGEub2Zmc2V0LFxuICAgICAgYmluZEdyb3VwOiBudWxsXG4gICAgfTtcbiAgICBjb25zdCB1bmlmb3JtR3JvdXAgPSB0aGlzLl91bmlmb3Jtc1Bvb2wucG9wKCkgfHwgdGhpcy5fY3JlYXRlVW5pZm9ybXMoKTtcbiAgICB0aGlzLl9hY3RpdmVVbmlmb3Jtcy5wdXNoKHVuaWZvcm1Hcm91cCk7XG4gICAgY29uc3QgdW5pZm9ybXMgPSB1bmlmb3JtR3JvdXAudW5pZm9ybXM7XG4gICAgdW5pZm9ybXMudVByb2plY3Rpb25NYXRyaXggPSBnbG9iYWxVbmlmb3JtRGF0YS5wcm9qZWN0aW9uTWF0cml4O1xuICAgIHVuaWZvcm1zLnVSZXNvbHV0aW9uID0gZ2xvYmFsVW5pZm9ybURhdGEucmVzb2x1dGlvbjtcbiAgICB1bmlmb3Jtcy51V29ybGRUcmFuc2Zvcm1NYXRyaXguY29weUZyb20oZ2xvYmFsVW5pZm9ybURhdGEud29ybGRUcmFuc2Zvcm1NYXRyaXgpO1xuICAgIHVuaWZvcm1zLnVXb3JsZFRyYW5zZm9ybU1hdHJpeC50eCAtPSBnbG9iYWxVbmlmb3JtRGF0YS5vZmZzZXQueDtcbiAgICB1bmlmb3Jtcy51V29ybGRUcmFuc2Zvcm1NYXRyaXgudHkgLT0gZ2xvYmFsVW5pZm9ybURhdGEub2Zmc2V0Lnk7XG4gICAgY29sb3IzMkJpdFRvVW5pZm9ybShcbiAgICAgIGdsb2JhbFVuaWZvcm1EYXRhLndvcmxkQ29sb3IsXG4gICAgICB1bmlmb3Jtcy51V29ybGRDb2xvckFscGhhLFxuICAgICAgMFxuICAgICk7XG4gICAgdW5pZm9ybUdyb3VwLnVwZGF0ZSgpO1xuICAgIGxldCBiaW5kR3JvdXA7XG4gICAgaWYgKHRoaXMuX3JlbmRlcmVyLnJlbmRlclBpcGVzLnVuaWZvcm1CYXRjaCkge1xuICAgICAgYmluZEdyb3VwID0gdGhpcy5fcmVuZGVyZXIucmVuZGVyUGlwZXMudW5pZm9ybUJhdGNoLmdldFVuaWZvcm1CaW5kR3JvdXAodW5pZm9ybUdyb3VwLCBmYWxzZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJpbmRHcm91cCA9IHRoaXMuX2JpbmRHcm91cFBvb2wucG9wKCkgfHwgbmV3IEJpbmRHcm91cCgpO1xuICAgICAgdGhpcy5fYWN0aXZlQmluZEdyb3Vwcy5wdXNoKGJpbmRHcm91cCk7XG4gICAgICBiaW5kR3JvdXAuc2V0UmVzb3VyY2UodW5pZm9ybUdyb3VwLCAwKTtcbiAgICB9XG4gICAgZ2xvYmFsVW5pZm9ybURhdGEuYmluZEdyb3VwID0gYmluZEdyb3VwO1xuICAgIHRoaXMuX2N1cnJlbnRHbG9iYWxVbmlmb3JtRGF0YSA9IGdsb2JhbFVuaWZvcm1EYXRhO1xuICB9XG4gIHB1c2gob3B0aW9ucykge1xuICAgIHRoaXMuYmluZChvcHRpb25zKTtcbiAgICB0aGlzLl9nbG9iYWxVbmlmb3JtRGF0YVN0YWNrW3RoaXMuX3N0YWNrSW5kZXgrK10gPSB0aGlzLl9jdXJyZW50R2xvYmFsVW5pZm9ybURhdGE7XG4gIH1cbiAgcG9wKCkge1xuICAgIHRoaXMuX2N1cnJlbnRHbG9iYWxVbmlmb3JtRGF0YSA9IHRoaXMuX2dsb2JhbFVuaWZvcm1EYXRhU3RhY2tbLS10aGlzLl9zdGFja0luZGV4IC0gMV07XG4gICAgaWYgKHRoaXMuX3JlbmRlcmVyLnR5cGUgPT09IFJlbmRlcmVyVHlwZS5XRUJHTCkge1xuICAgICAgdGhpcy5fY3VycmVudEdsb2JhbFVuaWZvcm1EYXRhLmJpbmRHcm91cC5yZXNvdXJjZXNbMF0udXBkYXRlKCk7XG4gICAgfVxuICB9XG4gIGdldCBiaW5kR3JvdXAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2N1cnJlbnRHbG9iYWxVbmlmb3JtRGF0YS5iaW5kR3JvdXA7XG4gIH1cbiAgZ2V0IHVuaWZvcm1Hcm91cCgpIHtcbiAgICByZXR1cm4gdGhpcy5fY3VycmVudEdsb2JhbFVuaWZvcm1EYXRhLmJpbmRHcm91cC5yZXNvdXJjZXNbMF07XG4gIH1cbiAgX2NyZWF0ZVVuaWZvcm1zKCkge1xuICAgIGNvbnN0IGdsb2JhbFVuaWZvcm1zID0gbmV3IFVuaWZvcm1Hcm91cCh7XG4gICAgICB1UHJvamVjdGlvbk1hdHJpeDogeyB2YWx1ZTogbmV3IE1hdHJpeCgpLCB0eXBlOiBcIm1hdDN4MzxmMzI+XCIgfSxcbiAgICAgIHVXb3JsZFRyYW5zZm9ybU1hdHJpeDogeyB2YWx1ZTogbmV3IE1hdHJpeCgpLCB0eXBlOiBcIm1hdDN4MzxmMzI+XCIgfSxcbiAgICAgIC8vIFRPRE8gLSBzb21lb25lIHNtYXJ0IC0gc2V0IHRoaXMgdG8gYmUgYSB1bm9ybTh4NCByYXRoZXIgdGhhbiBhIHZlYzQ8ZjMyPlxuICAgICAgdVdvcmxkQ29sb3JBbHBoYTogeyB2YWx1ZTogbmV3IEZsb2F0MzJBcnJheSg0KSwgdHlwZTogXCJ2ZWM0PGYzMj5cIiB9LFxuICAgICAgdVJlc29sdXRpb246IHsgdmFsdWU6IFswLCAwXSwgdHlwZTogXCJ2ZWMyPGYzMj5cIiB9XG4gICAgfSwge1xuICAgICAgaXNTdGF0aWM6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gZ2xvYmFsVW5pZm9ybXM7XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLl9yZW5kZXJlciA9IG51bGw7XG4gIH1cbn1cbi8qKiBAaWdub3JlICovXG5HbG9iYWxVbmlmb3JtU3lzdGVtLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW1xuICAgIEV4dGVuc2lvblR5cGUuV2ViR0xTeXN0ZW0sXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHUFVTeXN0ZW0sXG4gICAgRXh0ZW5zaW9uVHlwZS5DYW52YXNTeXN0ZW1cbiAgXSxcbiAgbmFtZTogXCJnbG9iYWxVbmlmb3Jtc1wiXG59O1xuXG5leHBvcnQgeyBHbG9iYWxVbmlmb3JtU3lzdGVtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HbG9iYWxVbmlmb3JtU3lzdGVtLm1qcy5tYXBcbiIsImltcG9ydCB7IERPTUFkYXB0ZXIgfSBmcm9tICcuLi9lbnZpcm9ubWVudC9hZGFwdGVyLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xubGV0IHNhaWRIZWxsbyA9IGZhbHNlO1xuY29uc3QgVkVSU0lPTiA9IFwiOC4yLjFcIjtcbmZ1bmN0aW9uIHNheUhlbGxvKHR5cGUpIHtcbiAgaWYgKHNhaWRIZWxsbykge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoRE9NQWRhcHRlci5nZXQoKS5nZXROYXZpZ2F0b3IoKS51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwiY2hyb21lXCIpID4gLTEpIHtcbiAgICBjb25zdCBhcmdzID0gW1xuICAgICAgYCVjICAlYyAgJWMgICVjICAlYyBQaXhpSlMgJWMgdiR7VkVSU0lPTn0gKCR7dHlwZX0pIGh0dHA6Ly93d3cucGl4aWpzLmNvbS9cblxuYCxcbiAgICAgIFwiYmFja2dyb3VuZDogI0U3MjI2NDsgcGFkZGluZzo1cHggMDtcIixcbiAgICAgIFwiYmFja2dyb3VuZDogIzZDQTJFQTsgcGFkZGluZzo1cHggMDtcIixcbiAgICAgIFwiYmFja2dyb3VuZDogI0I1RDMzRDsgcGFkZGluZzo1cHggMDtcIixcbiAgICAgIFwiYmFja2dyb3VuZDogI0ZFRDIzRjsgcGFkZGluZzo1cHggMDtcIixcbiAgICAgIFwiY29sb3I6ICNGRkZGRkY7IGJhY2tncm91bmQ6ICNFNzIyNjQ7IHBhZGRpbmc6NXB4IDA7XCIsXG4gICAgICBcImNvbG9yOiAjRTcyMjY0OyBiYWNrZ3JvdW5kOiAjRkZGRkZGOyBwYWRkaW5nOjVweCAwO1wiXG4gICAgXTtcbiAgICBnbG9iYWxUaGlzLmNvbnNvbGUubG9nKC4uLmFyZ3MpO1xuICB9IGVsc2UgaWYgKGdsb2JhbFRoaXMuY29uc29sZSkge1xuICAgIGdsb2JhbFRoaXMuY29uc29sZS5sb2coYFBpeGlKUyAke1ZFUlNJT059IC0gJHt0eXBlfSAtIGh0dHA6Ly93d3cucGl4aWpzLmNvbS9gKTtcbiAgfVxuICBzYWlkSGVsbG8gPSB0cnVlO1xufVxuXG5leHBvcnQgeyBWRVJTSU9OLCBzYXlIZWxsbyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2F5SGVsbG8ubWpzLm1hcFxuIiwiaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uLy4uLy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgc2F5SGVsbG8gfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy9zYXlIZWxsby5tanMnO1xuaW1wb3J0IHsgUmVuZGVyZXJUeXBlIH0gZnJvbSAnLi4vLi4vdHlwZXMubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBIZWxsb1N5c3RlbSB7XG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyKSB7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgfVxuICAvKipcbiAgICogSXQgYWxsIHN0YXJ0cyBoZXJlISBUaGlzIGluaXRpYXRlcyBldmVyeSBzeXN0ZW0sIHBhc3NpbmcgaW4gdGhlIG9wdGlvbnMgZm9yIGFueSBzeXN0ZW0gYnkgbmFtZS5cbiAgICogQHBhcmFtIG9wdGlvbnMgLSB0aGUgY29uZmlnIGZvciB0aGUgcmVuZGVyZXIgYW5kIGFsbCBpdHMgc3lzdGVtc1xuICAgKi9cbiAgaW5pdChvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuaGVsbG8pIHtcbiAgICAgIGxldCBuYW1lID0gdGhpcy5fcmVuZGVyZXIubmFtZTtcbiAgICAgIGlmICh0aGlzLl9yZW5kZXJlci50eXBlID09PSBSZW5kZXJlclR5cGUuV0VCR0wpIHtcbiAgICAgICAgbmFtZSArPSBgICR7dGhpcy5fcmVuZGVyZXIuY29udGV4dC53ZWJHTFZlcnNpb259YDtcbiAgICAgIH1cbiAgICAgIHNheUhlbGxvKG5hbWUpO1xuICAgIH1cbiAgfVxufVxuLyoqIEBpZ25vcmUgKi9cbkhlbGxvU3lzdGVtLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW1xuICAgIEV4dGVuc2lvblR5cGUuV2ViR0xTeXN0ZW0sXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHUFVTeXN0ZW0sXG4gICAgRXh0ZW5zaW9uVHlwZS5DYW52YXNTeXN0ZW1cbiAgXSxcbiAgbmFtZTogXCJoZWxsb1wiLFxuICBwcmlvcml0eTogLTJcbn07XG4vKiogVGhlIGRlZmF1bHQgb3B0aW9ucyBmb3IgdGhlIHN5c3RlbS4gKi9cbkhlbGxvU3lzdGVtLmRlZmF1bHRPcHRpb25zID0ge1xuICAvKioge0BsaW5rIFdlYkdMT3B0aW9ucy5oZWxsb30gKi9cbiAgaGVsbG86IGZhbHNlXG59O1xuXG5leHBvcnQgeyBIZWxsb1N5c3RlbSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SGVsbG9TeXN0ZW0ubWpzLm1hcFxuIiwiaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSwgZXh0ZW5zaW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNvbnN0IF9UZXh0dXJlR0NTeXN0ZW0gPSBjbGFzcyBfVGV4dHVyZUdDU3lzdGVtIHtcbiAgLyoqIEBwYXJhbSByZW5kZXJlciAtIFRoZSByZW5kZXJlciB0aGlzIFN5c3RlbSB3b3JrcyBmb3IuICovXG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyKSB7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgICB0aGlzLmNvdW50ID0gMDtcbiAgICB0aGlzLmNoZWNrQ291bnQgPSAwO1xuICB9XG4gIGluaXQob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7IC4uLl9UZXh0dXJlR0NTeXN0ZW0uZGVmYXVsdE9wdGlvbnMsIC4uLm9wdGlvbnMgfTtcbiAgICB0aGlzLmNoZWNrQ291bnRNYXggPSBvcHRpb25zLnRleHR1cmVHQ0NoZWNrQ291bnRNYXg7XG4gICAgdGhpcy5tYXhJZGxlID0gb3B0aW9ucy50ZXh0dXJlR0NBTWF4SWRsZTtcbiAgICB0aGlzLmFjdGl2ZSA9IG9wdGlvbnMudGV4dHVyZUdDQWN0aXZlO1xuICB9XG4gIC8qKlxuICAgKiBDaGVja3MgdG8gc2VlIHdoZW4gdGhlIGxhc3QgdGltZSBhIHRleHR1cmUgd2FzIHVzZWQuXG4gICAqIElmIHRoZSB0ZXh0dXJlIGhhcyBub3QgYmVlbiB1c2VkIGZvciBhIHNwZWNpZmllZCBhbW91bnQgb2YgdGltZSwgaXQgd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIEdQVS5cbiAgICovXG4gIHBvc3RyZW5kZXIoKSB7XG4gICAgaWYgKCF0aGlzLl9yZW5kZXJlci5yZW5kZXJpbmdUb1NjcmVlbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmNvdW50Kys7XG4gICAgaWYgKCF0aGlzLmFjdGl2ZSlcbiAgICAgIHJldHVybjtcbiAgICB0aGlzLmNoZWNrQ291bnQrKztcbiAgICBpZiAodGhpcy5jaGVja0NvdW50ID4gdGhpcy5jaGVja0NvdW50TWF4KSB7XG4gICAgICB0aGlzLmNoZWNrQ291bnQgPSAwO1xuICAgICAgdGhpcy5ydW4oKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrcyB0byBzZWUgd2hlbiB0aGUgbGFzdCB0aW1lIGEgdGV4dHVyZSB3YXMgdXNlZC5cbiAgICogSWYgdGhlIHRleHR1cmUgaGFzIG5vdCBiZWVuIHVzZWQgZm9yIGEgc3BlY2lmaWVkIGFtb3VudCBvZiB0aW1lLCBpdCB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgR1BVLlxuICAgKi9cbiAgcnVuKCkge1xuICAgIGNvbnN0IG1hbmFnZWRUZXh0dXJlcyA9IHRoaXMuX3JlbmRlcmVyLnRleHR1cmUubWFuYWdlZFRleHR1cmVzO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWFuYWdlZFRleHR1cmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCB0ZXh0dXJlID0gbWFuYWdlZFRleHR1cmVzW2ldO1xuICAgICAgaWYgKHRleHR1cmUuYXV0b0dhcmJhZ2VDb2xsZWN0ICYmIHRleHR1cmUucmVzb3VyY2UgJiYgdGV4dHVyZS5fdG91Y2hlZCA+IC0xICYmIHRoaXMuY291bnQgLSB0ZXh0dXJlLl90b3VjaGVkID4gdGhpcy5tYXhJZGxlKSB7XG4gICAgICAgIHRleHR1cmUuX3RvdWNoZWQgPSAtMTtcbiAgICAgICAgdGV4dHVyZS51bmxvYWQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLl9yZW5kZXJlciA9IG51bGw7XG4gIH1cbn07XG4vKiogQGlnbm9yZSAqL1xuX1RleHR1cmVHQ1N5c3RlbS5leHRlbnNpb24gPSB7XG4gIHR5cGU6IFtcbiAgICBFeHRlbnNpb25UeXBlLldlYkdMU3lzdGVtLFxuICAgIEV4dGVuc2lvblR5cGUuV2ViR1BVU3lzdGVtXG4gIF0sXG4gIG5hbWU6IFwidGV4dHVyZUdDXCJcbn07XG4vKiogZGVmYXVsdCBvcHRpb25zIGZvciB0aGUgVGV4dHVyZUdDU3lzdGVtICovXG5fVGV4dHVyZUdDU3lzdGVtLmRlZmF1bHRPcHRpb25zID0ge1xuICAvKipcbiAgICogSWYgc2V0IHRvIHRydWUsIHRoaXMgd2lsbCBlbmFibGUgdGhlIGdhcmJhZ2UgY29sbGVjdG9yIG9uIHRoZSBHUFUuXG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIHRleHR1cmVHQ0FjdGl2ZTogdHJ1ZSxcbiAgLyoqXG4gICAqIFRoZSBtYXhpbXVtIGlkbGUgZnJhbWVzIGJlZm9yZSBhIHRleHR1cmUgaXMgZGVzdHJveWVkIGJ5IGdhcmJhZ2UgY29sbGVjdGlvbi5cbiAgICogQGRlZmF1bHQgNjAgKiA2MFxuICAgKi9cbiAgdGV4dHVyZUdDQU1heElkbGU6IDYwICogNjAsXG4gIC8qKlxuICAgKiBGcmFtZXMgYmV0d2VlbiB0d28gZ2FyYmFnZSBjb2xsZWN0aW9ucy5cbiAgICogQGRlZmF1bHQgNjAwXG4gICAqL1xuICB0ZXh0dXJlR0NDaGVja0NvdW50TWF4OiA2MDBcbn07XG5sZXQgVGV4dHVyZUdDU3lzdGVtID0gX1RleHR1cmVHQ1N5c3RlbTtcbmV4dGVuc2lvbnMuYWRkKFRleHR1cmVHQ1N5c3RlbSk7XG5cbmV4cG9ydCB7IFRleHR1cmVHQ1N5c3RlbSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VGV4dHVyZUdDU3lzdGVtLm1qcy5tYXBcbiIsImltcG9ydCB7IERPTUFkYXB0ZXIgfSBmcm9tICcuLi8uLi8uLi8uLi9lbnZpcm9ubWVudC9hZGFwdGVyLm1qcyc7XG5pbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyBSZWN0YW5nbGUgfSBmcm9tICcuLi8uLi8uLi8uLi9tYXRocy9zaGFwZXMvUmVjdGFuZ2xlLm1qcyc7XG5pbXBvcnQgeyBkZXByZWNhdGlvbiwgdjhfMF8wIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvbG9nZ2luZy9kZXByZWNhdGlvbi5tanMnO1xuaW1wb3J0IHsgUmVuZGVyVGFyZ2V0IH0gZnJvbSAnLi4vcmVuZGVyVGFyZ2V0L1JlbmRlclRhcmdldC5tanMnO1xuaW1wb3J0IHsgZ2V0Q2FudmFzVGV4dHVyZSB9IGZyb20gJy4uL3RleHR1cmUvdXRpbHMvZ2V0Q2FudmFzVGV4dHVyZS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNvbnN0IF9WaWV3U3lzdGVtID0gY2xhc3MgX1ZpZXdTeXN0ZW0ge1xuICAvKiogVGhlIHJlc29sdXRpb24gLyBkZXZpY2UgcGl4ZWwgcmF0aW8gb2YgdGhlIHJlbmRlcmVyLiAqL1xuICBnZXQgcmVzb2x1dGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy50ZXh0dXJlLnNvdXJjZS5fcmVzb2x1dGlvbjtcbiAgfVxuICBzZXQgcmVzb2x1dGlvbih2YWx1ZSkge1xuICAgIHRoaXMudGV4dHVyZS5zb3VyY2UucmVzaXplKFxuICAgICAgdGhpcy50ZXh0dXJlLnNvdXJjZS53aWR0aCxcbiAgICAgIHRoaXMudGV4dHVyZS5zb3VyY2UuaGVpZ2h0LFxuICAgICAgdmFsdWVcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBpbml0aWF0ZXMgdGhlIHZpZXcgc3lzdGVtXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gdGhlIG9wdGlvbnMgZm9yIHRoZSB2aWV3XG4gICAqL1xuICBpbml0KG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge1xuICAgICAgLi4uX1ZpZXdTeXN0ZW0uZGVmYXVsdE9wdGlvbnMsXG4gICAgICAuLi5vcHRpb25zXG4gICAgfTtcbiAgICBpZiAob3B0aW9ucy52aWV3KSB7XG4gICAgICBkZXByZWNhdGlvbih2OF8wXzAsIFwiVmlld1N5c3RlbS52aWV3IGhhcyBiZWVuIHJlbmFtZWQgdG8gVmlld1N5c3RlbS5jYW52YXNcIik7XG4gICAgICBvcHRpb25zLmNhbnZhcyA9IG9wdGlvbnMudmlldztcbiAgICB9XG4gICAgdGhpcy5zY3JlZW4gPSBuZXcgUmVjdGFuZ2xlKDAsIDAsIG9wdGlvbnMud2lkdGgsIG9wdGlvbnMuaGVpZ2h0KTtcbiAgICB0aGlzLmNhbnZhcyA9IG9wdGlvbnMuY2FudmFzIHx8IERPTUFkYXB0ZXIuZ2V0KCkuY3JlYXRlQ2FudmFzKCk7XG4gICAgdGhpcy5hbnRpYWxpYXMgPSAhIW9wdGlvbnMuYW50aWFsaWFzO1xuICAgIHRoaXMudGV4dHVyZSA9IGdldENhbnZhc1RleHR1cmUodGhpcy5jYW52YXMsIG9wdGlvbnMpO1xuICAgIHRoaXMucmVuZGVyVGFyZ2V0ID0gbmV3IFJlbmRlclRhcmdldCh7XG4gICAgICBjb2xvclRleHR1cmVzOiBbdGhpcy50ZXh0dXJlXSxcbiAgICAgIGRlcHRoOiAhIW9wdGlvbnMuZGVwdGgsXG4gICAgICBpc1Jvb3Q6IHRydWVcbiAgICB9KTtcbiAgICB0aGlzLnRleHR1cmUuc291cmNlLnRyYW5zcGFyZW50ID0gb3B0aW9ucy5iYWNrZ3JvdW5kQWxwaGEgPCAxO1xuICAgIHRoaXMubXVsdGlWaWV3ID0gISFvcHRpb25zLm11bHRpVmlldztcbiAgICBpZiAodGhpcy5hdXRvRGVuc2l0eSkge1xuICAgICAgdGhpcy5jYW52YXMuc3R5bGUud2lkdGggPSBgJHt0aGlzLnRleHR1cmUud2lkdGh9cHhgO1xuICAgICAgdGhpcy5jYW52YXMuc3R5bGUuaGVpZ2h0ID0gYCR7dGhpcy50ZXh0dXJlLmhlaWdodH1weGA7XG4gICAgfVxuICAgIHRoaXMucmVzb2x1dGlvbiA9IG9wdGlvbnMucmVzb2x1dGlvbjtcbiAgfVxuICAvKipcbiAgICogUmVzaXplcyB0aGUgc2NyZWVuIGFuZCBjYW52YXMgdG8gdGhlIHNwZWNpZmllZCBkaW1lbnNpb25zLlxuICAgKiBAcGFyYW0gZGVzaXJlZFNjcmVlbldpZHRoIC0gVGhlIG5ldyB3aWR0aCBvZiB0aGUgc2NyZWVuLlxuICAgKiBAcGFyYW0gZGVzaXJlZFNjcmVlbkhlaWdodCAtIFRoZSBuZXcgaGVpZ2h0IG9mIHRoZSBzY3JlZW4uXG4gICAqIEBwYXJhbSByZXNvbHV0aW9uXG4gICAqL1xuICByZXNpemUoZGVzaXJlZFNjcmVlbldpZHRoLCBkZXNpcmVkU2NyZWVuSGVpZ2h0LCByZXNvbHV0aW9uKSB7XG4gICAgdGhpcy50ZXh0dXJlLnNvdXJjZS5yZXNpemUoZGVzaXJlZFNjcmVlbldpZHRoLCBkZXNpcmVkU2NyZWVuSGVpZ2h0LCByZXNvbHV0aW9uKTtcbiAgICB0aGlzLnNjcmVlbi53aWR0aCA9IHRoaXMudGV4dHVyZS5mcmFtZS53aWR0aDtcbiAgICB0aGlzLnNjcmVlbi5oZWlnaHQgPSB0aGlzLnRleHR1cmUuZnJhbWUuaGVpZ2h0O1xuICAgIGlmICh0aGlzLmF1dG9EZW5zaXR5KSB7XG4gICAgICB0aGlzLmNhbnZhcy5zdHlsZS53aWR0aCA9IGAke2Rlc2lyZWRTY3JlZW5XaWR0aH1weGA7XG4gICAgICB0aGlzLmNhbnZhcy5zdHlsZS5oZWlnaHQgPSBgJHtkZXNpcmVkU2NyZWVuSGVpZ2h0fXB4YDtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIERlc3Ryb3lzIHRoaXMgU3lzdGVtIGFuZCBvcHRpb25hbGx5IHJlbW92ZXMgdGhlIGNhbnZhcyBmcm9tIHRoZSBkb20uXG4gICAqIEBwYXJhbSB7b3B0aW9ucyB8IGZhbHNlfSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZm9yIGRlc3Ryb3lpbmcgdGhlIHZpZXcsIG9yIFwiZmFsc2VcIi5cbiAgICogQHBhcmFtIG9wdGlvbnMucmVtb3ZlVmlldyAtIFdoZXRoZXIgdG8gcmVtb3ZlIHRoZSB2aWV3IGVsZW1lbnQgZnJvbSB0aGUgRE9NLiBEZWZhdWx0cyB0byBgZmFsc2VgLlxuICAgKi9cbiAgZGVzdHJveShvcHRpb25zID0gZmFsc2UpIHtcbiAgICBjb25zdCByZW1vdmVWaWV3ID0gdHlwZW9mIG9wdGlvbnMgPT09IFwiYm9vbGVhblwiID8gb3B0aW9ucyA6ICEhb3B0aW9ucz8ucmVtb3ZlVmlldztcbiAgICBpZiAocmVtb3ZlVmlldyAmJiB0aGlzLmNhbnZhcy5wYXJlbnROb2RlKSB7XG4gICAgICB0aGlzLmNhbnZhcy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuY2FudmFzKTtcbiAgICB9XG4gIH1cbn07XG4vKiogQGlnbm9yZSAqL1xuX1ZpZXdTeXN0ZW0uZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHTFN5c3RlbSxcbiAgICBFeHRlbnNpb25UeXBlLldlYkdQVVN5c3RlbSxcbiAgICBFeHRlbnNpb25UeXBlLkNhbnZhc1N5c3RlbVxuICBdLFxuICBuYW1lOiBcInZpZXdcIixcbiAgcHJpb3JpdHk6IDBcbn07XG4vKiogVGhlIGRlZmF1bHQgb3B0aW9ucyBmb3IgdGhlIHZpZXcgc3lzdGVtLiAqL1xuX1ZpZXdTeXN0ZW0uZGVmYXVsdE9wdGlvbnMgPSB7XG4gIC8qKlxuICAgKiB7QGxpbmsgV2ViR0xPcHRpb25zLndpZHRofVxuICAgKiBAZGVmYXVsdCA4MDBcbiAgICovXG4gIHdpZHRoOiA4MDAsXG4gIC8qKlxuICAgKiB7QGxpbmsgV2ViR0xPcHRpb25zLmhlaWdodH1cbiAgICogQGRlZmF1bHQgNjAwXG4gICAqL1xuICBoZWlnaHQ6IDYwMCxcbiAgLyoqXG4gICAqIHtAbGluayBXZWJHTE9wdGlvbnMuYXV0b0RlbnNpdHl9XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhdXRvRGVuc2l0eTogZmFsc2UsXG4gIC8qKlxuICAgKiB7QGxpbmsgV2ViR0xPcHRpb25zLmFudGlhbGlhc31cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGFudGlhbGlhczogZmFsc2Vcbn07XG5sZXQgVmlld1N5c3RlbSA9IF9WaWV3U3lzdGVtO1xuXG5leHBvcnQgeyBWaWV3U3lzdGVtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WaWV3U3lzdGVtLm1qcy5tYXBcbiIsImltcG9ydCB7IEN1c3RvbVJlbmRlclBpcGUgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZS9jb250YWluZXIvQ3VzdG9tUmVuZGVyUGlwZS5tanMnO1xuaW1wb3J0IHsgUmVuZGVyR3JvdXBQaXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmUvY29udGFpbmVyL1JlbmRlckdyb3VwUGlwZS5tanMnO1xuaW1wb3J0IHsgUmVuZGVyR3JvdXBTeXN0ZW0gfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZS9jb250YWluZXIvUmVuZGVyR3JvdXBTeXN0ZW0ubWpzJztcbmltcG9ydCB7IFNwcml0ZVBpcGUgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZS9zcHJpdGUvU3ByaXRlUGlwZS5tanMnO1xuaW1wb3J0IHsgUmVuZGVyZXJJbml0SG9vayB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL2dsb2JhbC9nbG9iYWxIb29rcy5tanMnO1xuaW1wb3J0IHsgQmF0Y2hlclBpcGUgfSBmcm9tICcuLi8uLi8uLi9iYXRjaGVyL3NoYXJlZC9CYXRjaGVyUGlwZS5tanMnO1xuaW1wb3J0IHsgQWxwaGFNYXNrUGlwZSB9IGZyb20gJy4uLy4uLy4uL21hc2svYWxwaGEvQWxwaGFNYXNrUGlwZS5tanMnO1xuaW1wb3J0IHsgQ29sb3JNYXNrUGlwZSB9IGZyb20gJy4uLy4uLy4uL21hc2svY29sb3IvQ29sb3JNYXNrUGlwZS5tanMnO1xuaW1wb3J0IHsgU3RlbmNpbE1hc2tQaXBlIH0gZnJvbSAnLi4vLi4vLi4vbWFzay9zdGVuY2lsL1N0ZW5jaWxNYXNrUGlwZS5tanMnO1xuaW1wb3J0IHsgQmFja2dyb3VuZFN5c3RlbSB9IGZyb20gJy4uL2JhY2tncm91bmQvQmFja2dyb3VuZFN5c3RlbS5tanMnO1xuaW1wb3J0IHsgQmxlbmRNb2RlUGlwZSB9IGZyb20gJy4uL2JsZW5kTW9kZXMvQmxlbmRNb2RlUGlwZS5tanMnO1xuaW1wb3J0IHsgRXh0cmFjdFN5c3RlbSB9IGZyb20gJy4uL2V4dHJhY3QvRXh0cmFjdFN5c3RlbS5tanMnO1xuaW1wb3J0IHsgR2VuZXJhdGVUZXh0dXJlU3lzdGVtIH0gZnJvbSAnLi4vZXh0cmFjdC9HZW5lcmF0ZVRleHR1cmVTeXN0ZW0ubWpzJztcbmltcG9ydCB7IEdsb2JhbFVuaWZvcm1TeXN0ZW0gfSBmcm9tICcuLi9yZW5kZXJUYXJnZXQvR2xvYmFsVW5pZm9ybVN5c3RlbS5tanMnO1xuaW1wb3J0IHsgSGVsbG9TeXN0ZW0gfSBmcm9tICcuLi9zdGFydHVwL0hlbGxvU3lzdGVtLm1qcyc7XG5pbXBvcnQgeyBUZXh0dXJlR0NTeXN0ZW0gfSBmcm9tICcuLi90ZXh0dXJlL1RleHR1cmVHQ1N5c3RlbS5tanMnO1xuaW1wb3J0IHsgVmlld1N5c3RlbSB9IGZyb20gJy4uL3ZpZXcvVmlld1N5c3RlbS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNvbnN0IFNoYXJlZFN5c3RlbXMgPSBbXG4gIEJhY2tncm91bmRTeXN0ZW0sXG4gIEdsb2JhbFVuaWZvcm1TeXN0ZW0sXG4gIEhlbGxvU3lzdGVtLFxuICBWaWV3U3lzdGVtLFxuICBSZW5kZXJHcm91cFN5c3RlbSxcbiAgVGV4dHVyZUdDU3lzdGVtLFxuICBHZW5lcmF0ZVRleHR1cmVTeXN0ZW0sXG4gIEV4dHJhY3RTeXN0ZW0sXG4gIFJlbmRlcmVySW5pdEhvb2tcbl07XG5jb25zdCBTaGFyZWRSZW5kZXJQaXBlcyA9IFtcbiAgQmxlbmRNb2RlUGlwZSxcbiAgQmF0Y2hlclBpcGUsXG4gIFNwcml0ZVBpcGUsXG4gIFJlbmRlckdyb3VwUGlwZSxcbiAgQWxwaGFNYXNrUGlwZSxcbiAgU3RlbmNpbE1hc2tQaXBlLFxuICBDb2xvck1hc2tQaXBlLFxuICBDdXN0b21SZW5kZXJQaXBlXG5dO1xuXG5leHBvcnQgeyBTaGFyZWRSZW5kZXJQaXBlcywgU2hhcmVkU3lzdGVtcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2hhcmVkU3lzdGVtcy5tanMubWFwXG4iLCJpbXBvcnQgeyBDYW52YXNTb3VyY2UgfSBmcm9tICcuLi9zb3VyY2VzL0NhbnZhc1NvdXJjZS5tanMnO1xuaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gJy4uL1RleHR1cmUubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBjYW52YXNDYWNoZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG5mdW5jdGlvbiBnZXRDYW52YXNUZXh0dXJlKGNhbnZhcywgb3B0aW9ucykge1xuICBpZiAoIWNhbnZhc0NhY2hlLmhhcyhjYW52YXMpKSB7XG4gICAgY29uc3QgdGV4dHVyZSA9IG5ldyBUZXh0dXJlKHtcbiAgICAgIHNvdXJjZTogbmV3IENhbnZhc1NvdXJjZSh7XG4gICAgICAgIHJlc291cmNlOiBjYW52YXMsXG4gICAgICAgIC4uLm9wdGlvbnNcbiAgICAgIH0pXG4gICAgfSk7XG4gICAgY29uc3Qgb25EZXN0cm95ID0gKCkgPT4ge1xuICAgICAgaWYgKGNhbnZhc0NhY2hlLmdldChjYW52YXMpID09PSB0ZXh0dXJlKSB7XG4gICAgICAgIGNhbnZhc0NhY2hlLmRlbGV0ZShjYW52YXMpO1xuICAgICAgfVxuICAgIH07XG4gICAgdGV4dHVyZS5vbmNlKFwiZGVzdHJveVwiLCBvbkRlc3Ryb3kpO1xuICAgIHRleHR1cmUuc291cmNlLm9uY2UoXCJkZXN0cm95XCIsIG9uRGVzdHJveSk7XG4gICAgY2FudmFzQ2FjaGUuc2V0KGNhbnZhcywgdGV4dHVyZSk7XG4gIH1cbiAgcmV0dXJuIGNhbnZhc0NhY2hlLmdldChjYW52YXMpO1xufVxuZnVuY3Rpb24gaGFzQ2FjaGVkQ2FudmFzVGV4dHVyZShjYW52YXMpIHtcbiAgcmV0dXJuIGNhbnZhc0NhY2hlLmhhcyhjYW52YXMpO1xufVxuXG5leHBvcnQgeyBnZXRDYW52YXNUZXh0dXJlLCBoYXNDYWNoZWRDYW52YXNUZXh0dXJlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRDYW52YXNUZXh0dXJlLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJ0ZXh0dXJlQml0IiwibmFtZSIsInZlcnRleCIsImhlYWRlciIsIm1haW4iLCJmcmFnbWVudCIsInRleHR1cmVCaXRHbCIsImVuc3VyZUF0dHJpYnV0ZXMiLCJnZW9tZXRyeSIsImV4dHJhY3RlZERhdGEiLCJpIiwiYXR0cmlidXRlcyIsImF0dHJpYnV0ZSIsImF0dHJpYnV0ZURhdGEiLCJsb2NhdGlvbiIsImZvcm1hdCIsIm9mZnNldCIsImluc3RhbmNlIiwiYnVmZmVycyIsInRlbXBTdHJpZGUiLCJ0ZW1wU3RhcnQiLCJqIiwiYnVmZmVyIiwidWlkIiwic3RyaWRlIiwic3RhcnQiLCJlbnN1cmVTdGFydEFuZFN0cmlkZSIsIkdwdVN0ZW5jaWxNb2Rlc1RvUGl4aSIsIk5PTkUiLCJESVNBQkxFRCIsInN0ZW5jaWxXcml0ZU1hc2siLCJzdGVuY2lsUmVhZE1hc2siLCJSRU5ERVJJTkdfTUFTS19BREQiLCJzdGVuY2lsRnJvbnQiLCJjb21wYXJlIiwicGFzc09wIiwic3RlbmNpbEJhY2siLCJSRU5ERVJJTkdfTUFTS19SRU1PVkUiLCJNQVNLX0FDVElWRSIsIkJ1ZmZlclJlc291cmNlIiwiY29uc3RydWN0b3IiLCJzaXplIiwic3VwZXIiLCJ0aGlzIiwiX3Jlc291cmNlVHlwZSIsIl90b3VjaGVkIiwiX3Jlc291cmNlSWQiLCJfYnVmZmVyUmVzb3VyY2UiLCJkZXN0cm95ZWQiLCJvbiIsIm9uQnVmZmVyQ2hhbmdlIiwiZW1pdCIsImRlc3Ryb3kiLCJkZXN0cm95QnVmZmVyIiwiX1JlbmRlclRhcmdldCIsImRlc2NyaXB0b3IiLCJjb2xvclRleHR1cmVzIiwiZGlydHlJZCIsImlzUm9vdCIsIl9zaXplIiwiRmxvYXQzMkFycmF5IiwiX21hbmFnZWRDb2xvclRleHR1cmVzIiwiZGVmYXVsdE9wdGlvbnMiLCJzdGVuY2lsIiwiZGVwdGgiLCJwdXNoIiwid2lkdGgiLCJoZWlnaHQiLCJyZXNvbHV0aW9uIiwiYW50aWFsaWFzIiwibWFwIiwidGV4dHVyZSIsInNvdXJjZSIsImNvbG9yU291cmNlIiwiY29sb3JUZXh0dXJlIiwicmVzaXplIiwiX3Jlc29sdXRpb24iLCJvblNvdXJjZVJlc2l6ZSIsImRlcHRoU3RlbmNpbFRleHR1cmUiLCJlbnN1cmVEZXB0aFN0ZW5jaWxUZXh0dXJlIiwicGl4ZWxXaWR0aCIsInBpeGVsSGVpZ2h0IiwiYXV0b0dlbmVyYXRlTWlwbWFwcyIsIm1pcExldmVsQ291bnQiLCJza2lwQ29sb3JUZXh0dXJlIiwiZm9yRWFjaCIsIm9mZiIsIlJlbmRlclRhcmdldCIsIlJlbmRlclRhcmdldFN5c3RlbSIsInJlbmRlcmVyIiwicm9vdFZpZXdQb3J0IiwiUmVjdGFuZ2xlIiwidmlld3BvcnQiLCJvblJlbmRlclRhcmdldENoYW5nZSIsIlN5c3RlbVJ1bm5lciIsInByb2plY3Rpb25NYXRyaXgiLCJNYXRyaXgiLCJkZWZhdWx0Q2xlYXJDb2xvciIsIl9yZW5kZXJTdXJmYWNlVG9SZW5kZXJUYXJnZXRIYXNoIiwiTWFwIiwiX2dwdVJlbmRlclRhcmdldEhhc2giLCJPYmplY3QiLCJjcmVhdGUiLCJfcmVuZGVyVGFyZ2V0U3RhY2siLCJfcmVuZGVyZXIiLCJmaW5pc2hSZW5kZXJQYXNzIiwiYWRhcHRvciIsInJlbmRlclRhcmdldCIsInJlbmRlclN0YXJ0IiwidGFyZ2V0IiwiY2xlYXIiLCJjbGVhckNvbG9yIiwiZnJhbWUiLCJsZW5ndGgiLCJjb3B5RnJvbSIsInJvb3RSZW5kZXJUYXJnZXQiLCJyZW5kZXJpbmdUb1NjcmVlbiIsInJlc291cmNlIiwiZ2xvYmFsVGhpcyIsIkhUTUxDYW52YXNFbGVtZW50IiwiZG9jdW1lbnQiLCJib2R5IiwiY29udGFpbnMiLCJpc1JlbmRlcmluZ1RvU2NyZWVuIiwiYmluZCIsInJlbmRlclN1cmZhY2UiLCJnZXRSZW5kZXJUYXJnZXQiLCJkaWRDaGFuZ2UiLCJncHVSZW5kZXJUYXJnZXQiLCJnZXRHcHVSZW5kZXJUYXJnZXQiLCJyZXNpemVHcHVSZW5kZXJUYXJnZXQiLCJUZXh0dXJlIiwieCIsInkiLCJwbSIsImZsaXBZIiwic2lnbiIsImlkZW50aXR5IiwiYSIsImQiLCJ0eCIsInR5IiwiY2FsY3VsYXRlUHJvamVjdGlvbiIsInN0YXJ0UmVuZGVyUGFzcyIsIkFMTCIsImNvbnRleHRDaGFuZ2UiLCJwb3AiLCJjdXJyZW50UmVuZGVyVGFyZ2V0RGF0YSIsImlzVGV4dHVyZSIsImdldCIsIl9pbml0UmVuZGVyVGFyZ2V0IiwiY29weVRvVGV4dHVyZSIsInNvdXJjZVJlbmRlclN1cmZhY2VUZXh0dXJlIiwiZGVzdGluYXRpb25UZXh0dXJlIiwib3JpZ2luU3JjIiwib3JpZ2luRGVzdCIsIk1hdGgiLCJtaW4iLCJlbnN1cmVEZXB0aFN0ZW5jaWwiLCJrZXkiLCJDYW52YXNTb3VyY2UiLCJ0ZXN0IiwiZ2V0Q2FudmFzVGV4dHVyZSIsIlRleHR1cmVTb3VyY2UiLCJvbmNlIiwiZGVzdHJveUdwdVJlbmRlclRhcmdldCIsInNldCIsImluaXRHcHVSZW5kZXJUYXJnZXQiLCJVYm9TeXN0ZW0iLCJfc3luY0Z1bmN0aW9uSGFzaCIsIl9hZGFwdG9yIiwiX3N5c3RlbUNoZWNrIiwiRXJyb3IiLCJlbnN1cmVVbmlmb3JtR3JvdXAiLCJ1bmlmb3JtR3JvdXAiLCJ1bmlmb3JtRGF0YSIsImdldFVuaWZvcm1Hcm91cERhdGEiLCJkYXRhIiwibGF5b3V0IiwidXNhZ2UiLCJVTklGT1JNIiwiQ09QWV9EU1QiLCJfc2lnbmF0dXJlIiwiX2luaXRVbmlmb3JtR3JvdXAiLCJ1bmlmb3JtR3JvdXBTaWduYXR1cmUiLCJlbGVtZW50cyIsImtleXMiLCJ1bmlmb3JtU3RydWN0dXJlcyIsImNyZWF0ZVVib0VsZW1lbnRzIiwic3luY0Z1bmN0aW9uIiwiX2dlbmVyYXRlVWJvU3luYyIsInVib0VsZW1lbnRzIiwiZ2VuZXJhdGVVYm9TeW5jIiwic3luY1VuaWZvcm1Hcm91cCIsInVuaWZvcm1Hcm91cERhdGEiLCJ1bmlmb3JtcyIsInVwZGF0ZVVuaWZvcm1Hcm91cCIsImlzU3RhdGljIiwiX2RpcnR5SWQiLCJzeW5jZWQiLCJ1cGRhdGUiLCJjcmVhdGVVYm9TeW5jRnVuY3Rpb24iLCJwYXJzZXJDb2RlIiwiYXJyYXlHZW5lcmF0aW9uRnVuY3Rpb24iLCJzaW5nbGVTZXR0ZXJzTWFwIiwiZnVuY0ZyYWdtZW50cyIsInByZXYiLCJ1Ym9FbGVtZW50IiwicGFyc2VkIiwidWJvIiwidGVtcGxhdGUiLCJ0eXBlIiwiZnJhZ21lbnRTcmMiLCJqb2luIiwiRnVuY3Rpb24iLCJsb29wTWF0cml4IiwiY29sIiwicm93IiwidWJvU3luY0Z1bmN0aW9uc1NURDQwIiwiZjMyIiwiaTMyIiwidWJvU3luY0Z1bmN0aW9uc1dHU0wiLCJ1bmlmb3JtUGFyc2VycyIsInZhbHVlIiwidW5pZm9ybSIsInJlZCIsIkN1c3RvbVJlbmRlclBpcGUiLCJhZGRSZW5kZXJhYmxlIiwiY29udGFpbmVyIiwiaW5zdHJ1Y3Rpb25TZXQiLCJyZW5kZXJQaXBlcyIsImJhdGNoIiwiYnJlYWsiLCJhZGQiLCJleGVjdXRlIiwiaXNSZW5kZXJhYmxlIiwicmVuZGVyIiwiZXhlY3V0ZUluc3RydWN0aW9ucyIsInJlbmRlckdyb3VwIiwiaW5zdHJ1Y3Rpb25zIiwiaW5zdHJ1Y3Rpb25TaXplIiwiaW5zdHJ1Y3Rpb24iLCJyZW5kZXJQaXBlSWQiLCJleHRlbnNpb24iLCJXZWJHTFBpcGVzIiwiV2ViR1BVUGlwZXMiLCJDYW52YXNQaXBlcyIsIlJlbmRlckdyb3VwUGlwZSIsImFkZFJlbmRlckdyb3VwIiwiZ2xvYmFsVW5pZm9ybXMiLCJ3b3JsZFRyYW5zZm9ybU1hdHJpeCIsIndvcmxkVHJhbnNmb3JtIiwid29ybGRDb2xvciIsIndvcmxkQ29sb3JBbHBoYSIsImJ1aWxkSW5zdHJ1Y3Rpb25zIiwicm9vdCIsInJlc2V0IiwiYnVpbGRTdGFydCIsImJsZW5kTW9kZSIsImNvbG9yTWFzayIsInNvcnRhYmxlQ2hpbGRyZW4iLCJzb3J0Q2hpbGRyZW4iLCJjb2xsZWN0QWxsUmVuZGVyYWJsZXNBZHZhbmNlZCIsImJ1aWxkRW5kIiwiY29sbGVjdEFsbFJlbmRlcmFibGVzIiwicmVuZGVyZXJQaXBlcyIsImdsb2JhbERpc3BsYXlTdGF0dXMiLCJpbmNsdWRlSW5CdWlsZCIsImlzU2ltcGxlIiwic2V0QmxlbmRNb2RlIiwiZ3JvdXBCbGVuZE1vZGUiLCJkaWRWaWV3VXBkYXRlIiwiY2hpbGRyZW4iLCJjb2xsZWN0QWxsUmVuZGVyYWJsZXNTaW1wbGUiLCJlZmZlY3RzIiwiZWZmZWN0IiwicGlwZSIsImNvbGxlY3RSZW5kZXJHcm91cHMiLCJvdXQiLCJyZW5kZXJHcm91cENoaWxkcmVuIiwiV0hJVEVfQkdSIiwibWl4Q29sb3JzIiwibG9jYWxCR1JDb2xvciIsInBhcmVudEJHUkNvbG9yIiwiY29sb3IxIiwiY29sb3IyIiwicmF0aW8iLCJyMSIsImcxIiwiYjEiLCJ0ZW1wQ29udGFpbmVyIiwiQ29udGFpbmVyIiwidXBkYXRlUmVuZGVyR3JvdXBUcmFuc2Zvcm1zIiwidXBkYXRlQ2hpbGRSZW5kZXJHcm91cHMiLCJ3b3JsZEFscGhhIiwicmVuZGVyR3JvdXBQYXJlbnQiLCJhcHBlbmRGcm9tIiwicmVsYXRpdmVHcm91cFRyYW5zZm9ybSIsImdyb3VwQ29sb3IiLCJncm91cEFscGhhIiwibG9jYWxUcmFuc2Zvcm0iLCJsb2NhbENvbG9yIiwibG9jYWxBbHBoYSIsInVwZGF0ZVJlbmRlckdyb3VwVHJhbnNmb3JtIiwiY2hpbGRyZW5Ub1VwZGF0ZSIsInVwZGF0ZVRpY2siLCJyZW5kZXJHcm91cERlcHRoIiwiTnVtYmVyIiwiY2hpbGRyZW5BdERlcHRoIiwibGlzdCIsImluZGV4IiwiY2hpbGQiLCJwYXJlbnRSZW5kZXJHcm91cCIsInJlbGF0aXZlUmVuZGVyR3JvdXBEZXB0aCIsInVwZGF0ZVRyYW5zZm9ybUFuZENoaWxkcmVuIiwidXBkYXRlRmxhZ3MiLCJ1cGRhdGVMb2NhbFRyYW5zZm9ybSIsInBhcmVudCIsIl91cGRhdGVGbGFncyIsInVwZGF0ZUNvbG9yQmxlbmRWaXNpYmlsaXR5Iiwic3RydWN0dXJlRGlkQ2hhbmdlIiwidXBkYXRlUmVuZGVyYWJsZSIsImdyb3VwQ29sb3JBbHBoYSIsImxvY2FsQmxlbmRNb2RlIiwibG9jYWxEaXNwbGF5U3RhdHVzIiwidmFsaWRhdGVSZW5kZXJhYmxlcyIsImNoaWxkcmVuUmVuZGVyYWJsZXNUb1VwZGF0ZSIsInJlYnVpbGRSZXF1aXJlZCIsInZhbGlkYXRlUmVuZGVyYWJsZSIsInRlbXBNYXRyaXgiLCJSZW5kZXJHcm91cFN5c3RlbSIsInRyYW5zZm9ybSIsImlzUmVuZGVyR3JvdXAiLCJyZW5kZXJHcm91cHMiLCJvcmlnaW5hbExvY2FsVHJhbnNmb3JtIiwicnVuT25SZW5kZXIiLCJ1cGRhdGVSZW5kZXJhYmxlcyIsInVwbG9hZCIsInVuaWZvcm1CYXRjaCIsInJlbmRlckVuZCIsIldlYkdMU3lzdGVtIiwiV2ViR1BVU3lzdGVtIiwiQ2FudmFzU3lzdGVtIiwiU3ByaXRlUGlwZSIsIl9ncHVTcHJpdGVIYXNoIiwic3ByaXRlIiwiX2luc3RydWN0aW9uU2V0IiwiZ3B1U3ByaXRlIiwiX2dldEdwdVNwcml0ZSIsIl9kaWRTcHJpdGVVcGRhdGUiLCJfdXBkYXRlQmF0Y2hhYmxlU3ByaXRlIiwiYWRkVG9CYXRjaCIsImJhdGNoZXIiLCJ1cGRhdGVFbGVtZW50IiwiX3RleHR1cmUiLCJfc291cmNlIiwiY2hlY2tBbmRVcGRhdGVUZXh0dXJlIiwiZGVzdHJveVJlbmRlcmFibGUiLCJiYXRjaGFibGVTcHJpdGUiLCJyZXR1cm4iLCJib3VuZHMiLCJfaW5pdEdQVVNwcml0ZSIsIkJhdGNoYWJsZVNwcml0ZSIsInJlbmRlcmFibGUiLCJyb3VuZFBpeGVscyIsIl9yb3VuZFBpeGVscyIsIkJhdGNoZXJQaXBlIiwic3RhdGUiLCJTdGF0ZSIsImZvcjJkIiwiX2JhdGNoZXMiLCJfZ2VvbWV0cmllcyIsImluaXQiLCJCYXRjaGVyIiwiQmF0Y2hHZW9tZXRyeSIsIl9hY3RpdmVCYXRjaCIsIl9hY3RpdmVHZW9tZXRyeSIsImJlZ2luIiwiYmF0Y2hhYmxlT2JqZWN0IiwiYWN0aXZlQmF0Y2giLCJmaW5pc2giLCJpbmRleEJ1ZmZlciIsInNldERhdGFXaXRoU2l6ZSIsImluZGV4U2l6ZSIsImF0dHJpYnV0ZUJ1ZmZlciIsImZsb2F0MzJWaWV3IiwiYXR0cmlidXRlU2l6ZSIsImRpcnR5IiwiYWN0aW9uIiwiX0ZpbHRlciIsIlNoYWRlciIsIm9wdGlvbnMiLCJlbmFibGVkIiwiX3N0YXRlIiwicGFkZGluZyIsImJsZW5kUmVxdWlyZWQiLCJhZGRSZXNvdXJjZSIsImFwcGx5IiwiZmlsdGVyTWFuYWdlciIsImlucHV0Iiwib3V0cHV0IiwiY2xlYXJNb2RlIiwiYXBwbHlGaWx0ZXIiLCJmcm9tIiwiZ3B1IiwiZ2wiLCJyZXN0IiwiZ3B1UHJvZ3JhbSIsImdsUHJvZ3JhbSIsIkdwdVByb2dyYW0iLCJHbFByb2dyYW0iLCJGaWx0ZXIiLCJNYXNrRmlsdGVyIiwidGV4dHVyZU1hdHJpeCIsIlRleHR1cmVNYXRyaXgiLCJmaWx0ZXJVbmlmb3JtcyIsIlVuaWZvcm1Hcm91cCIsInVGaWx0ZXJNYXRyaXgiLCJ1TWFza0NsYW1wIiwidUNsYW1wRnJhbWUiLCJ1QWxwaGEiLCJlbnRyeVBvaW50IiwicmVzb3VyY2VzIiwidU1hc2tUZXh0dXJlIiwiX3RleHR1cmVNYXRyaXgiLCJjYWxjdWxhdGVTcHJpdGVNYXRyaXgiLCJwcmVwZW5kIiwibWFwQ29vcmQiLCJ0ZW1wQm91bmRzIiwiQm91bmRzIiwiQWxwaGFNYXNrRWZmZWN0IiwiRmlsdGVyRWZmZWN0IiwiZmlsdGVycyIsIlNwcml0ZSIsIkVNUFRZIiwiQWxwaGFNYXNrUGlwZSIsIl9hY3RpdmVNYXNrU3RhZ2UiLCJtYXNrIiwibWFza2VkQ29udGFpbmVyIiwiY2FuQnVuZGxlIiwicmVuZGVyTWFza1RvVGV4dHVyZSIsIm1hc2tDb250YWluZXIiLCJfbWFza2VkQ29udGFpbmVyIiwicmVuZGVyTWFzayIsImZpbHRlckVmZmVjdCIsIm1lYXN1cmFibGUiLCJnZXRHbG9iYWxCb3VuZHMiLCJjZWlsIiwiZmlsdGVyVGV4dHVyZSIsIlRleHR1cmVQb29sIiwiZ2V0T3B0aW1hbFRleHR1cmUiLCJtaW5YIiwibWluWSIsIm1hc2tEYXRhIiwiZmlsdGVyIiwicmV0dXJuVGV4dHVyZSIsIkNvbG9yTWFza1BpcGUiLCJfY29sb3JTdGFjayIsIl9jb2xvclN0YWNrSW5kZXgiLCJfY3VycmVudENvbG9yIiwiX2NvbnRhaW5lciIsImNvbG9yU3RhY2siLCJjdXJyZW50Q29sb3IiLCJfbWFzayIsInNldE1hc2siLCJTdGVuY2lsTWFza1BpcGUiLCJfbWFza1N0YWNrSGFzaCIsIl9tYXNrSGFzaCIsIldlYWtNYXAiLCJfYSIsImhhcyIsImluc3RydWN0aW9uc1N0YXJ0IiwiaW5zdHJ1Y3Rpb25zTGVuZ3RoIiwicmVuZGVyVGFyZ2V0VWlkIiwibWFza1N0YWNrSW5kZXgiLCJzZXRTdGVuY2lsTW9kZSIsIlNURU5DSUwiLCJfQmFja2dyb3VuZFN5c3RlbSIsImNsZWFyQmVmb3JlUmVuZGVyIiwiX2JhY2tncm91bmRDb2xvciIsIkNvbG9yIiwiY29sb3IiLCJhbHBoYSIsImJhY2tncm91bmQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJiYWNrZ3JvdW5kQWxwaGEiLCJzZXRBbHBoYSIsInNldFZhbHVlIiwiY29sb3JSZ2JhIiwidG9BcnJheSIsInByaW9yaXR5IiwiQmFja2dyb3VuZFN5c3RlbSIsIkJMRU5EX01PREVfRklMVEVSUyIsImhhbmRsZSIsIkJsZW5kTW9kZSIsInJlZiIsIkJsZW5kTW9kZVBpcGUiLCJfaXNBZHZhbmNlZCIsIl9maWx0ZXJIYXNoIiwiX2FjdGl2ZUJsZW5kTW9kZSIsIl9lbmRBZHZhbmNlZEJsZW5kTW9kZSIsIl9iZWdpbkFkdmFuY2VkQmxlbmRNb2RlIiwiX3JlbmRlcmFibGVMaXN0Iiwid2FybiIsInJlbmRlcmFibGVzIiwiaW1hZ2VUeXBlcyIsInBuZyIsImpwZyIsIndlYnAiLCJfRXh0cmFjdFN5c3RlbSIsIl9ub3JtYWxpemVPcHRpb25zIiwiZGVmYXVsdHMiLCJpbWFnZSIsIkltYWdlIiwic3JjIiwiYmFzZTY0IiwiZGVmYXVsdEltYWdlT3B0aW9ucyIsInF1YWxpdHkiLCJjYW52YXMiLCJ0b0Jsb2IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImJsb2IiLCJyZWFkZXIiLCJGaWxlUmVhZGVyIiwib25sb2FkIiwicmVzdWx0Iiwib25lcnJvciIsInJlYWRBc0RhdGFVUkwiLCJ0b0RhdGFVUkwiLCJjb252ZXJ0VG9CbG9iIiwiZ2VuZXJhdGVDYW52YXMiLCJ0ZXh0dXJlR2VuZXJhdG9yIiwiZ2VuZXJhdGVUZXh0dXJlIiwicGl4ZWxzIiwicGl4ZWxJbmZvIiwiZ2V0UGl4ZWxzIiwiZG93bmxvYWQiLCJsaW5rIiwiY3JlYXRlRWxlbWVudCIsImZpbGVuYW1lIiwiaHJlZiIsImFwcGVuZENoaWxkIiwiY2xpY2siLCJyZW1vdmVDaGlsZCIsImxvZyIsImNvbnNvbGUiLCJzdHlsZSIsIkV4dHJhY3RTeXN0ZW0iLCJSZW5kZXJUZXh0dXJlIiwidGVtcFJlY3QiLCJub0NvbG9yIiwiR2VuZXJhdGVUZXh0dXJlU3lzdGVtIiwidGV4dHVyZVNvdXJjZU9wdGlvbnMiLCJ2aWV3IiwiQXJyYXkiLCJpc0FycmF5Iiwic2hhcmVkIiwicmVnaW9uIiwiY29weVRvIiwiZ2V0TG9jYWxCb3VuZHMiLCJyZWN0YW5nbGUiLCJtYXgiLCJ0cmFuc2xhdGUiLCJ1cGRhdGVNaXBtYXBzIiwiR2xvYmFsVW5pZm9ybVN5c3RlbSIsIl9zdGFja0luZGV4IiwiX2dsb2JhbFVuaWZvcm1EYXRhU3RhY2siLCJfdW5pZm9ybXNQb29sIiwiX2FjdGl2ZVVuaWZvcm1zIiwiX2JpbmRHcm91cFBvb2wiLCJfYWN0aXZlQmluZEdyb3VwcyIsImN1cnJlbnRHbG9iYWxVbmlmb3JtRGF0YSIsInByb2plY3Rpb25EYXRhIiwiUG9pbnQiLCJnbG9iYWxVbmlmb3JtRGF0YSIsImJpbmRHcm91cCIsIl9jcmVhdGVVbmlmb3JtcyIsInVQcm9qZWN0aW9uTWF0cml4IiwidVJlc29sdXRpb24iLCJ1V29ybGRUcmFuc2Zvcm1NYXRyaXgiLCJ1V29ybGRDb2xvckFscGhhIiwiZ2V0VW5pZm9ybUJpbmRHcm91cCIsIkJpbmRHcm91cCIsInNldFJlc291cmNlIiwiX2N1cnJlbnRHbG9iYWxVbmlmb3JtRGF0YSIsIldFQkdMIiwic2FpZEhlbGxvIiwiVkVSU0lPTiIsIkhlbGxvU3lzdGVtIiwiaGVsbG8iLCJjb250ZXh0Iiwid2ViR0xWZXJzaW9uIiwiZ2V0TmF2aWdhdG9yIiwidXNlckFnZW50IiwidG9Mb3dlckNhc2UiLCJpbmRleE9mIiwiYXJncyIsInNheUhlbGxvIiwiX1RleHR1cmVHQ1N5c3RlbSIsImNvdW50IiwiY2hlY2tDb3VudCIsImNoZWNrQ291bnRNYXgiLCJ0ZXh0dXJlR0NDaGVja0NvdW50TWF4IiwibWF4SWRsZSIsInRleHR1cmVHQ0FNYXhJZGxlIiwiYWN0aXZlIiwidGV4dHVyZUdDQWN0aXZlIiwicG9zdHJlbmRlciIsInJ1biIsIm1hbmFnZWRUZXh0dXJlcyIsImF1dG9HYXJiYWdlQ29sbGVjdCIsInVubG9hZCIsIlRleHR1cmVHQ1N5c3RlbSIsIl9WaWV3U3lzdGVtIiwiZGVwcmVjYXRpb24iLCJzY3JlZW4iLCJjcmVhdGVDYW52YXMiLCJ0cmFuc3BhcmVudCIsIm11bHRpVmlldyIsImF1dG9EZW5zaXR5IiwiZGVzaXJlZFNjcmVlbldpZHRoIiwiZGVzaXJlZFNjcmVlbkhlaWdodCIsInJlbW92ZVZpZXciLCJwYXJlbnROb2RlIiwiU2hhcmVkU3lzdGVtcyIsIlNoYXJlZFJlbmRlclBpcGVzIiwiY2FudmFzQ2FjaGUiLCJvbkRlc3Ryb3kiLCJkZWxldGUiXSwic291cmNlUm9vdCI6IiJ9